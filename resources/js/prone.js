if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2913";
cljs.core._STAR_unchecked_if_STAR_ = false;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__10967__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__10966 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__10966) : cljs.core.into_array.call(null, G__10966);
      }());
    };
    var G__10967 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__10968__i = 0, G__10968__a = new Array(arguments.length - 0);
        while (G__10968__i < G__10968__a.length) {
          G__10968__a[G__10968__i] = arguments[G__10968__i + 0];
          ++G__10968__i;
        }
        args = new cljs.core.IndexedSeq(G__10968__a, 0);
      }
      return G__10967__delegate.call(this, args);
    };
    G__10967.cljs$lang$maxFixedArity = 0;
    G__10967.cljs$lang$applyTo = function(arglist__10969) {
      var args = cljs.core.seq(arglist__10969);
      return G__10967__delegate(args);
    };
    G__10967.cljs$core$IFn$_invoke$arity$variadic = G__10967__delegate;
    return G__10967;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var G__10971 = x;
  return goog.isString(G__10971);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__10973 = x__$1;
    return goog.typeOf(G__10973);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4213__auto__ = ty;
    if (cljs.core.truth_(and__4213__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4213__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__10975 = obj;
    return goog.typeOf(G__10975);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.importScript_(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__10977 = Symbol;
  return goog.typeOf(G__10977);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5112__auto___10979 = len;
  var i_10980 = 0;
  while (true) {
    if (i_10980 < n__5112__auto___10979) {
      new_arr[i_10980] = arr[i_10980];
      var G__10981 = i_10980 + 1;
      i_10980 = G__10981;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__10982 = i + 1;
      i = G__10982;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__10991__delegate = function(array, i, idxs) {
      var G__10988 = aget;
      var G__10989 = aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__10990 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__10988, G__10989, G__10990) : cljs.core.apply.call(null, G__10988, G__10989, G__10990);
    };
    var G__10991 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__10992__i = 0, G__10992__a = new Array(arguments.length - 2);
        while (G__10992__i < G__10992__a.length) {
          G__10992__a[G__10992__i] = arguments[G__10992__i + 2];
          ++G__10992__i;
        }
        idxs = new cljs.core.IndexedSeq(G__10992__a, 0);
      }
      return G__10991__delegate.call(this, array, i, idxs);
    };
    G__10991.cljs$lang$maxFixedArity = 2;
    G__10991.cljs$lang$applyTo = function(arglist__10993) {
      var array = cljs.core.first(arglist__10993);
      arglist__10993 = cljs.core.next(arglist__10993);
      var i = cljs.core.first(arglist__10993);
      var idxs = cljs.core.rest(arglist__10993);
      return G__10991__delegate(array, i, idxs);
    };
    G__10991.cljs$core$IFn$_invoke$arity$variadic = G__10991__delegate;
    return G__10991;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        var G__10994 = null;
        if (arguments.length > 2) {
          var G__10995__i = 0, G__10995__a = new Array(arguments.length - 2);
          while (G__10995__i < G__10995__a.length) {
            G__10995__a[G__10995__i] = arguments[G__10995__i + 2];
            ++G__10995__i;
          }
          G__10994 = new cljs.core.IndexedSeq(G__10995__a, 0);
        }
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__10994);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__11004__delegate = function(array, idx, idx2, idxv) {
      var G__11000 = aset;
      var G__11001 = array[idx];
      var G__11002 = idx2;
      var G__11003 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__11000, G__11001, G__11002, G__11003) : cljs.core.apply.call(null, G__11000, G__11001, G__11002, G__11003);
    };
    var G__11004 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__11005__i = 0, G__11005__a = new Array(arguments.length - 3);
        while (G__11005__i < G__11005__a.length) {
          G__11005__a[G__11005__i] = arguments[G__11005__i + 3];
          ++G__11005__i;
        }
        idxv = new cljs.core.IndexedSeq(G__11005__a, 0);
      }
      return G__11004__delegate.call(this, array, idx, idx2, idxv);
    };
    G__11004.cljs$lang$maxFixedArity = 3;
    G__11004.cljs$lang$applyTo = function(arglist__11006) {
      var array = cljs.core.first(arglist__11006);
      arglist__11006 = cljs.core.next(arglist__11006);
      var idx = cljs.core.first(arglist__11006);
      arglist__11006 = cljs.core.next(arglist__11006);
      var idx2 = cljs.core.first(arglist__11006);
      var idxv = cljs.core.rest(arglist__11006);
      return G__11004__delegate(array, idx, idx2, idxv);
    };
    G__11004.cljs$core$IFn$_invoke$arity$variadic = G__11004__delegate;
    return G__11004;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        var G__11007 = null;
        if (arguments.length > 3) {
          var G__11008__i = 0, G__11008__a = new Array(arguments.length - 3);
          while (G__11008__i < G__11008__a.length) {
            G__11008__a[G__11008__i] = arguments[G__11008__i + 3];
            ++G__11008__i;
          }
          G__11007 = new cljs.core.IndexedSeq(G__11008__a, 0);
        }
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__11007);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    var G__11014 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__11015 = [];
    var G__11016 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__11014, G__11015, G__11016) : cljs.core.reduce.call(null, G__11014, G__11015, G__11016);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__11017__i = 0, G__11017__a = new Array(arguments.length - 2);
      while (G__11017__i < G__11017__a.length) {
        G__11017__a[G__11017__i] = arguments[G__11017__i + 2];
        ++G__11017__i;
      }
      args = new cljs.core.IndexedSeq(G__11017__a, 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__11018) {
    var obj = cljs.core.first(arglist__11018);
    arglist__11018 = cljs.core.next(arglist__11018);
    var s = cljs.core.first(arglist__11018);
    var args = cljs.core.rest(arglist__11018);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj11020 = {};
  return obj11020;
}();
cljs.core.IFn = function() {
  var obj11022 = {};
  return obj11022;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11068 = x__4869__auto__;
          return goog.typeOf(G__11068);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11070 = x__4869__auto__;
          return goog.typeOf(G__11070);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11072 = x__4869__auto__;
          return goog.typeOf(G__11072);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11074 = x__4869__auto__;
          return goog.typeOf(G__11074);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11076 = x__4869__auto__;
          return goog.typeOf(G__11076);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11078 = x__4869__auto__;
          return goog.typeOf(G__11078);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11080 = x__4869__auto__;
          return goog.typeOf(G__11080);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11082 = x__4869__auto__;
          return goog.typeOf(G__11082);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11084 = x__4869__auto__;
          return goog.typeOf(G__11084);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11086 = x__4869__auto__;
          return goog.typeOf(G__11086);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11088 = x__4869__auto__;
          return goog.typeOf(G__11088);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11090 = x__4869__auto__;
          return goog.typeOf(G__11090);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11092 = x__4869__auto__;
          return goog.typeOf(G__11092);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11094 = x__4869__auto__;
          return goog.typeOf(G__11094);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11096 = x__4869__auto__;
          return goog.typeOf(G__11096);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11098 = x__4869__auto__;
          return goog.typeOf(G__11098);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11100 = x__4869__auto__;
          return goog.typeOf(G__11100);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11102 = x__4869__auto__;
          return goog.typeOf(G__11102);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11104 = x__4869__auto__;
          return goog.typeOf(G__11104);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11106 = x__4869__auto__;
          return goog.typeOf(G__11106);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11108 = x__4869__auto__;
          return goog.typeOf(G__11108);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__4213__auto__ = this$;
      if (and__4213__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4869__auto__ = this$ == null ? null : this$;
      return function() {
        var or__4225__auto__ = cljs.core._invoke[function() {
          var G__11110 = x__4869__auto__;
          return goog.typeOf(G__11110);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._invoke["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj11112 = {};
  return obj11112;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__4213__auto__ = value;
    if (and__4213__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4869__auto__ = value == null ? null : value;
    return function() {
      var or__4225__auto__ = cljs.core._clone[function() {
        var G__11116 = x__4869__auto__;
        return goog.typeOf(G__11116);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._clone["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj11118 = {};
  return obj11118;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._count[function() {
        var G__11122 = x__4869__auto__;
        return goog.typeOf(G__11122);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._count["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj11124 = {};
  return obj11124;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._empty[function() {
        var G__11128 = x__4869__auto__;
        return goog.typeOf(G__11128);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._empty["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj11130 = {};
  return obj11130;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._conj[function() {
        var G__11134 = x__4869__auto__;
        return goog.typeOf(G__11134);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._conj["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj11136 = {};
  return obj11136;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__4213__auto__ = coll;
      if (and__4213__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4869__auto__ = coll == null ? null : coll;
      return function() {
        var or__4225__auto__ = cljs.core._nth[function() {
          var G__11142 = x__4869__auto__;
          return goog.typeOf(G__11142);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._nth["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__4213__auto__ = coll;
      if (and__4213__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4869__auto__ = coll == null ? null : coll;
      return function() {
        var or__4225__auto__ = cljs.core._nth[function() {
          var G__11144 = x__4869__auto__;
          return goog.typeOf(G__11144);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._nth["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj11146 = {};
  return obj11146;
}();
cljs.core.ISeq = function() {
  var obj11148 = {};
  return obj11148;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._first[function() {
        var G__11152 = x__4869__auto__;
        return goog.typeOf(G__11152);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._first["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._rest[function() {
        var G__11156 = x__4869__auto__;
        return goog.typeOf(G__11156);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._rest["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj11158 = {};
  return obj11158;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._next[function() {
        var G__11162 = x__4869__auto__;
        return goog.typeOf(G__11162);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._next["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj11164 = {};
  return obj11164;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__4213__auto__ = o;
      if (and__4213__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4869__auto__ = o == null ? null : o;
      return function() {
        var or__4225__auto__ = cljs.core._lookup[function() {
          var G__11170 = x__4869__auto__;
          return goog.typeOf(G__11170);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._lookup["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__4213__auto__ = o;
      if (and__4213__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4869__auto__ = o == null ? null : o;
      return function() {
        var or__4225__auto__ = cljs.core._lookup[function() {
          var G__11172 = x__4869__auto__;
          return goog.typeOf(G__11172);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._lookup["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj11174 = {};
  return obj11174;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__11178 = x__4869__auto__;
        return goog.typeOf(G__11178);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._assoc[function() {
        var G__11182 = x__4869__auto__;
        return goog.typeOf(G__11182);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._assoc["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj11184 = {};
  return obj11184;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._dissoc[function() {
        var G__11188 = x__4869__auto__;
        return goog.typeOf(G__11188);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._dissoc["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj11190 = {};
  return obj11190;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._key[function() {
        var G__11194 = x__4869__auto__;
        return goog.typeOf(G__11194);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._key["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._val[function() {
        var G__11198 = x__4869__auto__;
        return goog.typeOf(G__11198);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._val["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj11200 = {};
  return obj11200;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._disjoin[function() {
        var G__11204 = x__4869__auto__;
        return goog.typeOf(G__11204);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._disjoin["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj11206 = {};
  return obj11206;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._peek[function() {
        var G__11210 = x__4869__auto__;
        return goog.typeOf(G__11210);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._peek["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._pop[function() {
        var G__11214 = x__4869__auto__;
        return goog.typeOf(G__11214);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._pop["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj11216 = {};
  return obj11216;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._assoc_n[function() {
        var G__11220 = x__4869__auto__;
        return goog.typeOf(G__11220);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj11222 = {};
  return obj11222;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._deref[function() {
        var G__11226 = x__4869__auto__;
        return goog.typeOf(G__11226);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._deref["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj11228 = {};
  return obj11228;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._deref_with_timeout[function() {
        var G__11232 = x__4869__auto__;
        return goog.typeOf(G__11232);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj11234 = {};
  return obj11234;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._meta[function() {
        var G__11238 = x__4869__auto__;
        return goog.typeOf(G__11238);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._meta["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj11240 = {};
  return obj11240;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._with_meta[function() {
        var G__11244 = x__4869__auto__;
        return goog.typeOf(G__11244);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._with_meta["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj11246 = {};
  return obj11246;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__4213__auto__ = coll;
      if (and__4213__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4869__auto__ = coll == null ? null : coll;
      return function() {
        var or__4225__auto__ = cljs.core._reduce[function() {
          var G__11252 = x__4869__auto__;
          return goog.typeOf(G__11252);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._reduce["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__4213__auto__ = coll;
      if (and__4213__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4869__auto__ = coll == null ? null : coll;
      return function() {
        var or__4225__auto__ = cljs.core._reduce[function() {
          var G__11254 = x__4869__auto__;
          return goog.typeOf(G__11254);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._reduce["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj11256 = {};
  return obj11256;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._kv_reduce[function() {
        var G__11260 = x__4869__auto__;
        return goog.typeOf(G__11260);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj11262 = {};
  return obj11262;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._equiv[function() {
        var G__11266 = x__4869__auto__;
        return goog.typeOf(G__11266);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._equiv["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj11268 = {};
  return obj11268;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._hash[function() {
        var G__11272 = x__4869__auto__;
        return goog.typeOf(G__11272);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._hash["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj11274 = {};
  return obj11274;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._seq[function() {
        var G__11278 = x__4869__auto__;
        return goog.typeOf(G__11278);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._seq["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj11280 = {};
  return obj11280;
}();
cljs.core.IList = function() {
  var obj11282 = {};
  return obj11282;
}();
cljs.core.IRecord = function() {
  var obj11284 = {};
  return obj11284;
}();
cljs.core.IReversible = function() {
  var obj11286 = {};
  return obj11286;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._rseq[function() {
        var G__11290 = x__4869__auto__;
        return goog.typeOf(G__11290);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._rseq["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj11292 = {};
  return obj11292;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._sorted_seq[function() {
        var G__11296 = x__4869__auto__;
        return goog.typeOf(G__11296);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._sorted_seq_from[function() {
        var G__11300 = x__4869__auto__;
        return goog.typeOf(G__11300);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._entry_key[function() {
        var G__11304 = x__4869__auto__;
        return goog.typeOf(G__11304);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._entry_key["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._comparator[function() {
        var G__11308 = x__4869__auto__;
        return goog.typeOf(G__11308);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._comparator["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj11310 = {};
  return obj11310;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__4213__auto__ = writer;
    if (and__4213__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4869__auto__ = writer == null ? null : writer;
    return function() {
      var or__4225__auto__ = cljs.core._write[function() {
        var G__11314 = x__4869__auto__;
        return goog.typeOf(G__11314);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._write["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__4213__auto__ = writer;
    if (and__4213__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4869__auto__ = writer == null ? null : writer;
    return function() {
      var or__4225__auto__ = cljs.core._flush[function() {
        var G__11318 = x__4869__auto__;
        return goog.typeOf(G__11318);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._flush["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj11320 = {};
  return obj11320;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._pr_writer[function() {
        var G__11324 = x__4869__auto__;
        return goog.typeOf(G__11324);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj11326 = {};
  return obj11326;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__4213__auto__ = d;
    if (and__4213__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4869__auto__ = d == null ? null : d;
    return function() {
      var or__4225__auto__ = cljs.core._realized_QMARK_[function() {
        var G__11330 = x__4869__auto__;
        return goog.typeOf(G__11330);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj11332 = {};
  return obj11332;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4213__auto__ = this$;
    if (and__4213__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4869__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4225__auto__ = cljs.core._notify_watches[function() {
        var G__11336 = x__4869__auto__;
        return goog.typeOf(G__11336);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__4213__auto__ = this$;
    if (and__4213__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4869__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4225__auto__ = cljs.core._add_watch[function() {
        var G__11340 = x__4869__auto__;
        return goog.typeOf(G__11340);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._add_watch["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__4213__auto__ = this$;
    if (and__4213__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4869__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4225__auto__ = cljs.core._remove_watch[function() {
        var G__11344 = x__4869__auto__;
        return goog.typeOf(G__11344);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj11346 = {};
  return obj11346;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._as_transient[function() {
        var G__11350 = x__4869__auto__;
        return goog.typeOf(G__11350);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._as_transient["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj11352 = {};
  return obj11352;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._conj_BANG_[function() {
        var G__11356 = x__4869__auto__;
        return goog.typeOf(G__11356);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._persistent_BANG_[function() {
        var G__11360 = x__4869__auto__;
        return goog.typeOf(G__11360);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj11362 = {};
  return obj11362;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._assoc_BANG_[function() {
        var G__11366 = x__4869__auto__;
        return goog.typeOf(G__11366);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj11368 = {};
  return obj11368;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__11372 = x__4869__auto__;
        return goog.typeOf(G__11372);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj11374 = {};
  return obj11374;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__11378 = x__4869__auto__;
        return goog.typeOf(G__11378);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._pop_BANG_[function() {
        var G__11382 = x__4869__auto__;
        return goog.typeOf(G__11382);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj11384 = {};
  return obj11384;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4213__auto__ = tcoll;
    if (and__4213__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4869__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4225__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__11388 = x__4869__auto__;
        return goog.typeOf(G__11388);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj11390 = {};
  return obj11390;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__4213__auto__ = x;
    if (and__4213__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4869__auto__ = x == null ? null : x;
    return function() {
      var or__4225__auto__ = cljs.core._compare[function() {
        var G__11394 = x__4869__auto__;
        return goog.typeOf(G__11394);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._compare["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj11396 = {};
  return obj11396;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._drop_first[function() {
        var G__11400 = x__4869__auto__;
        return goog.typeOf(G__11400);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._drop_first["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj11402 = {};
  return obj11402;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._chunked_first[function() {
        var G__11406 = x__4869__auto__;
        return goog.typeOf(G__11406);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._chunked_rest[function() {
        var G__11410 = x__4869__auto__;
        return goog.typeOf(G__11410);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj11412 = {};
  return obj11412;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._chunked_next[function() {
        var G__11416 = x__4869__auto__;
        return goog.typeOf(G__11416);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj11418 = {};
  return obj11418;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__4213__auto__ = x;
    if (and__4213__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4869__auto__ = x == null ? null : x;
    return function() {
      var or__4225__auto__ = cljs.core._name[function() {
        var G__11422 = x__4869__auto__;
        return goog.typeOf(G__11422);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._name["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__4213__auto__ = x;
    if (and__4213__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4869__auto__ = x == null ? null : x;
    return function() {
      var or__4225__auto__ = cljs.core._namespace[function() {
        var G__11426 = x__4869__auto__;
        return goog.typeOf(G__11426);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._namespace["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj11428 = {};
  return obj11428;
}();
cljs.core.IReset = function() {
  var obj11430 = {};
  return obj11430;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._reset_BANG_[function() {
        var G__11434 = x__4869__auto__;
        return goog.typeOf(G__11434);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj11436 = {};
  return obj11436;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__4213__auto__ = o;
      if (and__4213__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4869__auto__ = o == null ? null : o;
      return function() {
        var or__4225__auto__ = cljs.core._swap_BANG_[function() {
          var G__11446 = x__4869__auto__;
          return goog.typeOf(G__11446);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__4213__auto__ = o;
      if (and__4213__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4869__auto__ = o == null ? null : o;
      return function() {
        var or__4225__auto__ = cljs.core._swap_BANG_[function() {
          var G__11448 = x__4869__auto__;
          return goog.typeOf(G__11448);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__4213__auto__ = o;
      if (and__4213__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4869__auto__ = o == null ? null : o;
      return function() {
        var or__4225__auto__ = cljs.core._swap_BANG_[function() {
          var G__11450 = x__4869__auto__;
          return goog.typeOf(G__11450);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__4213__auto__ = o;
      if (and__4213__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4869__auto__ = o == null ? null : o;
      return function() {
        var or__4225__auto__ = cljs.core._swap_BANG_[function() {
          var G__11452 = x__4869__auto__;
          return goog.typeOf(G__11452);
        }()];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj11454 = {};
  return obj11454;
}();
cljs.core._vreset_BANG_ = function _vreset_BANG_(o, new_value) {
  if (function() {
    var and__4213__auto__ = o;
    if (and__4213__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4869__auto__ = o == null ? null : o;
    return function() {
      var or__4225__auto__ = cljs.core._vreset_BANG_[function() {
        var G__11458 = x__4869__auto__;
        return goog.typeOf(G__11458);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj11460 = {};
  return obj11460;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__4213__auto__ = coll;
    if (and__4213__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4869__auto__ = coll == null ? null : coll;
    return function() {
      var or__4225__auto__ = cljs.core._iterator[function() {
        var G__11464 = x__4869__auto__;
        return goog.typeOf(G__11464);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._iterator["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__11467 = 4294967295;
  var G__11468 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__11467, G__11468) : Math.imul.call(null, G__11467, G__11468);
}() === 0)) {
  cljs.core.imul = function imul(a, b) {
    var G__11471 = a;
    var G__11472 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__11471, G__11472) : Math.imul.call(null, G__11471, G__11472);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__11473 = i + 2;
        var G__11474 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__11473;
        h1 = G__11474;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj11476 = {};
  return obj11476;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__11477 = i + 1;
          var G__11478 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__11477;
          hash = G__11478;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj11482 = {};
      return obj11482;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__11485 = o;
    if (G__11485) {
      var bit__4899__auto__ = G__11485.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4899__auto__ || G__11485.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__11486 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__11486) : Math.floor.call(null, G__11486);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = cljs.core.not(a.ns);
      if (and__4213__auto__) {
        return b.ns;
      } else {
        return and__4213__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__11493 = a.ns;
            var G__11494 = b.ns;
            return goog.array.defaultCompare(G__11493, G__11494);
          }();
          if (0 === nsc) {
            var G__11495 = a.name;
            var G__11496 = b.name;
            return goog.array.defaultCompare(G__11495, G__11496);
          } else {
            return nsc;
          }
        }
      } else {
        var G__11497 = a.name;
        var G__11498 = b.name;
        return goog.array.defaultCompare(G__11497, G__11498);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4646__auto__ = self__._hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__11500 = null;
  var G__11500__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__11500__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__11500 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11500__2.call(this, self__, coll);
      case 3:
        return G__11500__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11500.cljs$core$IFn$_invoke$arity$2 = G__11500__2;
  G__11500.cljs$core$IFn$_invoke$arity$3 = G__11500__3;
  return G__11500;
}();
cljs.core.Symbol.prototype.apply = function(self__, args11499) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11499)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__11548 = null;
  var G__11548__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__11548__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__11548__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__11548__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__11548__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__11548__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__11548__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__11548__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__11548__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__11548__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__11548__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__11548__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__11548__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__11548__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__11548__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__11548__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__11548__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__11548__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__11548__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__11548__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__11548__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__11548__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11504 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__11505 = a;
    var G__11506 = b;
    var G__11507 = c;
    var G__11508 = d;
    var G__11509 = e;
    var G__11510 = f;
    var G__11511 = g;
    var G__11512 = h;
    var G__11513 = i;
    var G__11514 = j;
    var G__11515 = k;
    var G__11516 = l;
    var G__11517 = m;
    var G__11518 = n;
    var G__11519 = o;
    var G__11520 = p;
    var G__11521 = q;
    var G__11522 = r;
    var G__11523 = s;
    var G__11524 = t;
    var G__11525 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515, G__11516, G__11517, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525) : cljs.core.apply.call(null, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515, G__11516, G__11517, G__11518, 
    G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525);
  };
  G__11548 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11548__1.call(this, self__);
      case 2:
        return G__11548__2.call(this, self__, a);
      case 3:
        return G__11548__3.call(this, self__, a, b);
      case 4:
        return G__11548__4.call(this, self__, a, b, c);
      case 5:
        return G__11548__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11548__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11548__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11548__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11548__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11548__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11548__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11548__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11548__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11548__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11548__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11548__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11548__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11548__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11548__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11548__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11548__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11548__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11548.cljs$core$IFn$_invoke$arity$1 = G__11548__1;
  G__11548.cljs$core$IFn$_invoke$arity$2 = G__11548__2;
  G__11548.cljs$core$IFn$_invoke$arity$3 = G__11548__3;
  G__11548.cljs$core$IFn$_invoke$arity$4 = G__11548__4;
  G__11548.cljs$core$IFn$_invoke$arity$5 = G__11548__5;
  G__11548.cljs$core$IFn$_invoke$arity$6 = G__11548__6;
  G__11548.cljs$core$IFn$_invoke$arity$7 = G__11548__7;
  G__11548.cljs$core$IFn$_invoke$arity$8 = G__11548__8;
  G__11548.cljs$core$IFn$_invoke$arity$9 = G__11548__9;
  G__11548.cljs$core$IFn$_invoke$arity$10 = G__11548__10;
  G__11548.cljs$core$IFn$_invoke$arity$11 = G__11548__11;
  G__11548.cljs$core$IFn$_invoke$arity$12 = G__11548__12;
  G__11548.cljs$core$IFn$_invoke$arity$13 = G__11548__13;
  G__11548.cljs$core$IFn$_invoke$arity$14 = G__11548__14;
  G__11548.cljs$core$IFn$_invoke$arity$15 = G__11548__15;
  G__11548.cljs$core$IFn$_invoke$arity$16 = G__11548__16;
  G__11548.cljs$core$IFn$_invoke$arity$17 = G__11548__17;
  G__11548.cljs$core$IFn$_invoke$arity$18 = G__11548__18;
  G__11548.cljs$core$IFn$_invoke$arity$19 = G__11548__19;
  G__11548.cljs$core$IFn$_invoke$arity$20 = G__11548__20;
  G__11548.cljs$core$IFn$_invoke$arity$21 = G__11548__21;
  G__11548.cljs$core$IFn$_invoke$arity$22 = G__11548__22;
  return G__11548;
}();
cljs.core.Var.prototype.apply = function(self__, args11503) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11503)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__11526 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__11527 = a;
  var G__11528 = b;
  var G__11529 = c;
  var G__11530 = d;
  var G__11531 = e;
  var G__11532 = f;
  var G__11533 = g;
  var G__11534 = h;
  var G__11535 = i;
  var G__11536 = j;
  var G__11537 = k;
  var G__11538 = l;
  var G__11539 = m;
  var G__11540 = n;
  var G__11541 = o;
  var G__11542 = p;
  var G__11543 = q;
  var G__11544 = r;
  var G__11545 = s;
  var G__11546 = t;
  var G__11547 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533, G__11534, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546, G__11547) : cljs.core.apply.call(null, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533, G__11534, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, 
  G__11541, G__11542, G__11543, G__11544, G__11545, G__11546, G__11547);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function __GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__11550 = x;
  if (G__11550) {
    var bit__4906__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4225__auto__ = bit__4906__auto__;
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return G__11550.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__11550.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__11550);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__11550);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__11552 = value;
  if (G__11552) {
    var bit__4906__auto__ = G__11552.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4906__auto__ || G__11552.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__11552.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__11552);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__11552);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11554 = coll;
      if (G__11554) {
        var bit__4899__auto__ = G__11554.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4899__auto__ || G__11554.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11556 = coll;
      if (G__11556) {
        var bit__4899__auto__ = G__11556.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4899__auto__ || G__11556.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11558 = coll;
      if (G__11558) {
        var bit__4899__auto__ = G__11558.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4899__auto__ || G__11558.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11560 = coll;
      if (G__11560) {
        var bit__4899__auto__ = G__11560.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4899__auto__ || G__11560.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var _EQ___3 = function() {
    var G__11565__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__11566 = y;
            var G__11567 = cljs.core.first(more);
            var G__11568 = cljs.core.next(more);
            x = G__11566;
            y = G__11567;
            more = G__11568;
            continue;
          } else {
            return _EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11565 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__11569__i = 0, G__11569__a = new Array(arguments.length - 2);
        while (G__11569__i < G__11569__a.length) {
          G__11569__a[G__11569__i] = arguments[G__11569__i + 2];
          ++G__11569__i;
        }
        more = new cljs.core.IndexedSeq(G__11569__a, 0);
      }
      return G__11565__delegate.call(this, x, y, more);
    };
    G__11565.cljs$lang$maxFixedArity = 2;
    G__11565.cljs$lang$applyTo = function(arglist__11570) {
      var x = cljs.core.first(arglist__11570);
      arglist__11570 = cljs.core.next(arglist__11570);
      var y = cljs.core.first(arglist__11570);
      var more = cljs.core.rest(arglist__11570);
      return G__11565__delegate(x, y, more);
    };
    G__11565.cljs$core$IFn$_invoke$arity$variadic = G__11565__delegate;
    return G__11565;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        var G__11571 = null;
        if (arguments.length > 2) {
          var G__11572__i = 0, G__11572__a = new Array(arguments.length - 2);
          while (G__11572__i < G__11572__a.length) {
            G__11572__a[G__11572__i] = arguments[G__11572__i + 2];
            ++G__11572__i;
          }
          G__11571 = new cljs.core.IndexedSeq(G__11572__a, 0);
        }
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__11571);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__11573 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__11573) : cljs.core.es6_iterator_seq.call(null, G__11573);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11574 = n + 1;
      var G__11575 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__11576 = cljs.core.next(coll__$1);
      n = G__11574;
      hash_code = G__11575;
      coll__$1 = G__11576;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__11577 = n + 1;
      var G__11578 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__11579 = cljs.core.next(coll__$1);
      n = G__11577;
      hash_code = G__11578;
      coll__$1 = G__11579;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__11580 = o;
  return goog.getUid(G__11580);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__11582 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11582) : cljs.core.deref.call(null, G__11582);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__11589 = val;
            var G__11590 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11589, G__11590) : f.call(null, G__11589, G__11590);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__11595 = nval;
            var G__11596 = n + 1;
            val = G__11595;
            n = G__11596;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__11591 = val__$1;
          var G__11592 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11591, G__11592) : f.call(null, G__11591, G__11592);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__11597 = nval;
          var G__11598 = n + 1;
          val__$1 = G__11597;
          n = G__11598;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__11593 = val__$1;
          var G__11594 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11593, G__11594) : f.call(null, G__11593, G__11594);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__11599 = nval;
          var G__11600 = n + 1;
          val__$1 = G__11599;
          n = G__11600;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__11607 = val;
            var G__11608 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11607, G__11608) : f.call(null, G__11607, G__11608);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__11613 = nval;
            var G__11614 = n + 1;
            val = G__11613;
            n = G__11614;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__11609 = val__$1;
          var G__11610 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11609, G__11610) : f.call(null, G__11609, G__11610);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__11615 = nval;
          var G__11616 = n + 1;
          val__$1 = G__11615;
          n = G__11616;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__11611 = val__$1;
          var G__11612 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11611, G__11612) : f.call(null, G__11611, G__11612);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__11617 = nval;
          var G__11618 = n + 1;
          val__$1 = G__11617;
          n = G__11618;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__11620 = x;
  if (G__11620) {
    var bit__4906__auto__ = G__11620.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4906__auto__ || G__11620.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__11620.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__11620);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__11620);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__11622 = x;
  if (G__11622) {
    var bit__4906__auto__ = G__11622.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4906__auto__ || G__11622.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__11622.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__11622);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__11622);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__11623 = coll__$1;
  var G__11624 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__11623, G__11624) : cljs.core.equiv_sequential.call(null, G__11623, G__11624);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__11625 = o;
  var G__11626 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__11625, G__11626) : cljs.core.cons.call(null, G__11625, G__11626);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__11629 = coll__$1;
  var G__11630 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__11629, G__11630) : cljs.core.equiv_sequential.call(null, G__11629, G__11630);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__11631 = cljs.core.List.EMPTY;
  var G__11632 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__11631, G__11632) : cljs.core.with_meta.call(null, G__11631, G__11632);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__11633 = f;
  var G__11634 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__11633, G__11634) : cljs.core.seq_reduce.call(null, G__11633, G__11634);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__11635 = f;
  var G__11636 = start;
  var G__11637 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__11635, G__11636, G__11637) : cljs.core.seq_reduce.call(null, G__11635, G__11636, G__11637);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__11638 = o;
  var G__11639 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__11638, G__11639) : cljs.core.cons.call(null, G__11638, G__11639);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__11640 = sn;
      s = G__11640;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__11645__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__11646 = conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__11647 = cljs.core.first(xs);
          var G__11648 = cljs.core.next(xs);
          coll = G__11646;
          x = G__11647;
          xs = G__11648;
          continue;
        } else {
          return conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__11645 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__11649__i = 0, G__11649__a = new Array(arguments.length - 2);
        while (G__11649__i < G__11649__a.length) {
          G__11649__a[G__11649__i] = arguments[G__11649__i + 2];
          ++G__11649__i;
        }
        xs = new cljs.core.IndexedSeq(G__11649__a, 0);
      }
      return G__11645__delegate.call(this, coll, x, xs);
    };
    G__11645.cljs$lang$maxFixedArity = 2;
    G__11645.cljs$lang$applyTo = function(arglist__11650) {
      var coll = cljs.core.first(arglist__11650);
      arglist__11650 = cljs.core.next(arglist__11650);
      var x = cljs.core.first(arglist__11650);
      var xs = cljs.core.rest(arglist__11650);
      return G__11645__delegate(coll, x, xs);
    };
    G__11645.cljs$core$IFn$_invoke$arity$variadic = G__11645__delegate;
    return G__11645;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        var G__11651 = null;
        if (arguments.length > 2) {
          var G__11652__i = 0, G__11652__a = new Array(arguments.length - 2);
          while (G__11652__i < G__11652__a.length) {
            G__11652__a[G__11652__i] = arguments[G__11652__i + 2];
            ++G__11652__i;
          }
          G__11651 = new cljs.core.IndexedSeq(G__11652__a, 0);
        }
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__11651);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__11653 = cljs.core.next(s);
      var G__11654 = acc + 1;
      s = G__11653;
      acc = G__11654;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11656 = coll;
      if (G__11656) {
        var bit__4899__auto__ = G__11656.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4899__auto__ || G__11656.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__11657 = cljs.core.next(coll);
              var G__11658 = n - 1;
              coll = G__11657;
              n = G__11658;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__11659 = cljs.core.next(coll);
              var G__11660 = n - 1;
              var G__11661 = not_found;
              coll = G__11659;
              n = G__11660;
              not_found = G__11661;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__11666 = coll;
          if (G__11666) {
            var bit__4899__auto__ = G__11666.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4899__auto__ || G__11666.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__11667 = coll;
                  if (G__11667) {
                    var bit__4906__auto__ = G__11667.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4906__auto__ || G__11667.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11667.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__11667);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__11667);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__11668 = coll;
          if (G__11668) {
            var bit__4899__auto__ = G__11668.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4899__auto__ || G__11668.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__11669 = coll;
                  if (G__11669) {
                    var bit__4906__auto__ = G__11669.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4906__auto__ || G__11669.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11669.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__11669);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__11669);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__11670 = n__$1 - 1;
      var G__11671 = cljs.core.rest(xs);
      n__$1 = G__11670;
      xs = G__11671;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__11674 = o;
        if (G__11674) {
          var bit__4899__auto__ = G__11674.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4899__auto__ || G__11674.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__11675 = o;
        if (G__11675) {
          var bit__4899__auto__ = G__11675.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4899__auto__ || G__11675.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__11679__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__11680 = ret;
          var G__11681 = cljs.core.first(kvs);
          var G__11682 = cljs.core.second(kvs);
          var G__11683 = cljs.core.nnext(kvs);
          coll = G__11680;
          k = G__11681;
          v = G__11682;
          kvs = G__11683;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__11679 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__11684__i = 0, G__11684__a = new Array(arguments.length - 3);
        while (G__11684__i < G__11684__a.length) {
          G__11684__a[G__11684__i] = arguments[G__11684__i + 3];
          ++G__11684__i;
        }
        kvs = new cljs.core.IndexedSeq(G__11684__a, 0);
      }
      return G__11679__delegate.call(this, coll, k, v, kvs);
    };
    G__11679.cljs$lang$maxFixedArity = 3;
    G__11679.cljs$lang$applyTo = function(arglist__11685) {
      var coll = cljs.core.first(arglist__11685);
      arglist__11685 = cljs.core.next(arglist__11685);
      var k = cljs.core.first(arglist__11685);
      arglist__11685 = cljs.core.next(arglist__11685);
      var v = cljs.core.first(arglist__11685);
      var kvs = cljs.core.rest(arglist__11685);
      return G__11679__delegate(coll, k, v, kvs);
    };
    G__11679.cljs$core$IFn$_invoke$arity$variadic = G__11679__delegate;
    return G__11679;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        var G__11686 = null;
        if (arguments.length > 3) {
          var G__11687__i = 0, G__11687__a = new Array(arguments.length - 3);
          while (G__11687__i < G__11687__a.length) {
            G__11687__a[G__11687__i] = arguments[G__11687__i + 3];
            ++G__11687__i;
          }
          G__11686 = new cljs.core.IndexedSeq(G__11687__a, 0);
        }
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__11686);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__11690__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11691 = ret;
            var G__11692 = cljs.core.first(ks);
            var G__11693 = cljs.core.next(ks);
            coll = G__11691;
            k = G__11692;
            ks = G__11693;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11690 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__11694__i = 0, G__11694__a = new Array(arguments.length - 2);
        while (G__11694__i < G__11694__a.length) {
          G__11694__a[G__11694__i] = arguments[G__11694__i + 2];
          ++G__11694__i;
        }
        ks = new cljs.core.IndexedSeq(G__11694__a, 0);
      }
      return G__11690__delegate.call(this, coll, k, ks);
    };
    G__11690.cljs$lang$maxFixedArity = 2;
    G__11690.cljs$lang$applyTo = function(arglist__11695) {
      var coll = cljs.core.first(arglist__11695);
      arglist__11695 = cljs.core.next(arglist__11695);
      var k = cljs.core.first(arglist__11695);
      var ks = cljs.core.rest(arglist__11695);
      return G__11690__delegate(coll, k, ks);
    };
    G__11690.cljs$core$IFn$_invoke$arity$variadic = G__11690__delegate;
    return G__11690;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        var G__11696 = null;
        if (arguments.length > 2) {
          var G__11697__i = 0, G__11697__a = new Array(arguments.length - 2);
          while (G__11697__i < G__11697__a.length) {
            G__11697__a[G__11697__i] = arguments[G__11697__i + 2];
            ++G__11697__i;
          }
          G__11696 = new cljs.core.IndexedSeq(G__11697__a, 0);
        }
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__11696);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__4225__auto__ = function() {
    var G__11702 = f;
    return goog.isFunction(G__11702);
  }();
  if (cljs.core.truth_(or__4225__auto__)) {
    return or__4225__auto__;
  } else {
    var G__11703 = f;
    if (G__11703) {
      var bit__4906__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4225__auto____$1 = bit__4906__auto__;
        if (cljs.core.truth_(or__4225__auto____$1)) {
          return or__4225__auto____$1;
        } else {
          return G__11703.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__11703.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__11703);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__11703);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__12169 = null;
  var G__12169__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__12169__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11705 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__11705) : self__.afn.call(null, G__11705);
  };
  var G__12169__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11706 = a;
    var G__11707 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__11706, G__11707) : self__.afn.call(null, G__11706, G__11707);
  };
  var G__12169__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11708 = a;
    var G__11709 = b;
    var G__11710 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__11708, G__11709, G__11710) : self__.afn.call(null, G__11708, G__11709, G__11710);
  };
  var G__12169__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11711 = a;
    var G__11712 = b;
    var G__11713 = c;
    var G__11714 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__11711, G__11712, G__11713, G__11714) : self__.afn.call(null, G__11711, G__11712, G__11713, G__11714);
  };
  var G__12169__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11715 = a;
    var G__11716 = b;
    var G__11717 = c;
    var G__11718 = d;
    var G__11719 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__11715, G__11716, G__11717, G__11718, G__11719) : self__.afn.call(null, G__11715, G__11716, G__11717, G__11718, G__11719);
  };
  var G__12169__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11720 = a;
    var G__11721 = b;
    var G__11722 = c;
    var G__11723 = d;
    var G__11724 = e;
    var G__11725 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__11720, G__11721, G__11722, G__11723, G__11724, G__11725) : self__.afn.call(null, G__11720, G__11721, G__11722, G__11723, G__11724, G__11725);
  };
  var G__12169__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11726 = a;
    var G__11727 = b;
    var G__11728 = c;
    var G__11729 = d;
    var G__11730 = e;
    var G__11731 = f;
    var G__11732 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__11726, G__11727, G__11728, G__11729, G__11730, G__11731, G__11732) : self__.afn.call(null, G__11726, G__11727, G__11728, G__11729, G__11730, G__11731, G__11732);
  };
  var G__12169__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11733 = a;
    var G__11734 = b;
    var G__11735 = c;
    var G__11736 = d;
    var G__11737 = e;
    var G__11738 = f;
    var G__11739 = g;
    var G__11740 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__11733, G__11734, G__11735, G__11736, G__11737, G__11738, G__11739, G__11740) : self__.afn.call(null, G__11733, G__11734, G__11735, G__11736, G__11737, G__11738, G__11739, G__11740);
  };
  var G__12169__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11741 = a;
    var G__11742 = b;
    var G__11743 = c;
    var G__11744 = d;
    var G__11745 = e;
    var G__11746 = f;
    var G__11747 = g;
    var G__11748 = h;
    var G__11749 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__11741, G__11742, G__11743, G__11744, G__11745, G__11746, G__11747, G__11748, G__11749) : self__.afn.call(null, G__11741, G__11742, G__11743, G__11744, G__11745, G__11746, G__11747, G__11748, G__11749);
  };
  var G__12169__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11750 = a;
    var G__11751 = b;
    var G__11752 = c;
    var G__11753 = d;
    var G__11754 = e;
    var G__11755 = f;
    var G__11756 = g;
    var G__11757 = h;
    var G__11758 = i;
    var G__11759 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__11750, G__11751, G__11752, G__11753, G__11754, G__11755, G__11756, G__11757, G__11758, G__11759) : self__.afn.call(null, G__11750, G__11751, G__11752, G__11753, G__11754, G__11755, G__11756, G__11757, G__11758, G__11759);
  };
  var G__12169__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11760 = a;
    var G__11761 = b;
    var G__11762 = c;
    var G__11763 = d;
    var G__11764 = e;
    var G__11765 = f;
    var G__11766 = g;
    var G__11767 = h;
    var G__11768 = i;
    var G__11769 = j;
    var G__11770 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__11760, G__11761, G__11762, G__11763, G__11764, G__11765, G__11766, G__11767, G__11768, G__11769, G__11770) : self__.afn.call(null, G__11760, G__11761, G__11762, G__11763, G__11764, G__11765, G__11766, G__11767, G__11768, G__11769, G__11770);
  };
  var G__12169__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11771 = a;
    var G__11772 = b;
    var G__11773 = c;
    var G__11774 = d;
    var G__11775 = e;
    var G__11776 = f;
    var G__11777 = g;
    var G__11778 = h;
    var G__11779 = i;
    var G__11780 = j;
    var G__11781 = k;
    var G__11782 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__11771, G__11772, G__11773, G__11774, G__11775, G__11776, G__11777, G__11778, G__11779, G__11780, G__11781, G__11782) : self__.afn.call(null, G__11771, G__11772, G__11773, G__11774, G__11775, G__11776, G__11777, G__11778, G__11779, G__11780, G__11781, G__11782);
  };
  var G__12169__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11783 = a;
    var G__11784 = b;
    var G__11785 = c;
    var G__11786 = d;
    var G__11787 = e;
    var G__11788 = f;
    var G__11789 = g;
    var G__11790 = h;
    var G__11791 = i;
    var G__11792 = j;
    var G__11793 = k;
    var G__11794 = l;
    var G__11795 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__11783, G__11784, G__11785, G__11786, G__11787, G__11788, G__11789, G__11790, G__11791, G__11792, G__11793, G__11794, G__11795) : self__.afn.call(null, G__11783, G__11784, G__11785, G__11786, G__11787, G__11788, G__11789, G__11790, G__11791, G__11792, G__11793, G__11794, G__11795);
  };
  var G__12169__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11796 = a;
    var G__11797 = b;
    var G__11798 = c;
    var G__11799 = d;
    var G__11800 = e;
    var G__11801 = f;
    var G__11802 = g;
    var G__11803 = h;
    var G__11804 = i;
    var G__11805 = j;
    var G__11806 = k;
    var G__11807 = l;
    var G__11808 = m;
    var G__11809 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__11796, G__11797, G__11798, G__11799, G__11800, G__11801, G__11802, G__11803, G__11804, G__11805, G__11806, G__11807, G__11808, G__11809) : self__.afn.call(null, G__11796, G__11797, G__11798, G__11799, G__11800, G__11801, G__11802, G__11803, G__11804, G__11805, G__11806, G__11807, G__11808, G__11809);
  };
  var G__12169__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11810 = a;
    var G__11811 = b;
    var G__11812 = c;
    var G__11813 = d;
    var G__11814 = e;
    var G__11815 = f;
    var G__11816 = g;
    var G__11817 = h;
    var G__11818 = i;
    var G__11819 = j;
    var G__11820 = k;
    var G__11821 = l;
    var G__11822 = m;
    var G__11823 = n;
    var G__11824 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__11810, G__11811, G__11812, G__11813, G__11814, G__11815, G__11816, G__11817, G__11818, G__11819, G__11820, G__11821, G__11822, G__11823, G__11824) : self__.afn.call(null, G__11810, G__11811, G__11812, G__11813, G__11814, G__11815, G__11816, G__11817, G__11818, G__11819, G__11820, G__11821, G__11822, G__11823, G__11824);
  };
  var G__12169__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11825 = a;
    var G__11826 = b;
    var G__11827 = c;
    var G__11828 = d;
    var G__11829 = e;
    var G__11830 = f;
    var G__11831 = g;
    var G__11832 = h;
    var G__11833 = i;
    var G__11834 = j;
    var G__11835 = k;
    var G__11836 = l;
    var G__11837 = m;
    var G__11838 = n;
    var G__11839 = o;
    var G__11840 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__11825, G__11826, G__11827, G__11828, G__11829, G__11830, G__11831, G__11832, G__11833, G__11834, G__11835, G__11836, G__11837, G__11838, G__11839, G__11840) : self__.afn.call(null, G__11825, G__11826, G__11827, G__11828, G__11829, G__11830, G__11831, G__11832, G__11833, G__11834, G__11835, G__11836, G__11837, G__11838, G__11839, G__11840);
  };
  var G__12169__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11841 = a;
    var G__11842 = b;
    var G__11843 = c;
    var G__11844 = d;
    var G__11845 = e;
    var G__11846 = f;
    var G__11847 = g;
    var G__11848 = h;
    var G__11849 = i;
    var G__11850 = j;
    var G__11851 = k;
    var G__11852 = l;
    var G__11853 = m;
    var G__11854 = n;
    var G__11855 = o;
    var G__11856 = p;
    var G__11857 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__11841, G__11842, G__11843, G__11844, G__11845, G__11846, G__11847, G__11848, G__11849, G__11850, G__11851, G__11852, G__11853, G__11854, G__11855, G__11856, G__11857) : self__.afn.call(null, G__11841, G__11842, G__11843, G__11844, G__11845, G__11846, G__11847, G__11848, G__11849, G__11850, G__11851, G__11852, G__11853, G__11854, G__11855, G__11856, G__11857);
  };
  var G__12169__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11858 = a;
    var G__11859 = b;
    var G__11860 = c;
    var G__11861 = d;
    var G__11862 = e;
    var G__11863 = f;
    var G__11864 = g;
    var G__11865 = h;
    var G__11866 = i;
    var G__11867 = j;
    var G__11868 = k;
    var G__11869 = l;
    var G__11870 = m;
    var G__11871 = n;
    var G__11872 = o;
    var G__11873 = p;
    var G__11874 = q;
    var G__11875 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__11858, G__11859, G__11860, G__11861, G__11862, G__11863, G__11864, G__11865, G__11866, G__11867, G__11868, G__11869, G__11870, G__11871, G__11872, G__11873, G__11874, G__11875) : self__.afn.call(null, G__11858, G__11859, G__11860, G__11861, G__11862, G__11863, G__11864, G__11865, G__11866, G__11867, G__11868, G__11869, G__11870, G__11871, G__11872, G__11873, G__11874, G__11875);
  };
  var G__12169__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11876 = a;
    var G__11877 = b;
    var G__11878 = c;
    var G__11879 = d;
    var G__11880 = e;
    var G__11881 = f;
    var G__11882 = g;
    var G__11883 = h;
    var G__11884 = i;
    var G__11885 = j;
    var G__11886 = k;
    var G__11887 = l;
    var G__11888 = m;
    var G__11889 = n;
    var G__11890 = o;
    var G__11891 = p;
    var G__11892 = q;
    var G__11893 = r;
    var G__11894 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__11876, G__11877, G__11878, G__11879, G__11880, G__11881, G__11882, G__11883, G__11884, G__11885, G__11886, G__11887, G__11888, G__11889, G__11890, G__11891, G__11892, G__11893, G__11894) : self__.afn.call(null, G__11876, G__11877, G__11878, G__11879, G__11880, G__11881, G__11882, G__11883, G__11884, G__11885, G__11886, G__11887, G__11888, G__11889, G__11890, G__11891, G__11892, G__11893, G__11894);
  };
  var G__12169__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11895 = a;
    var G__11896 = b;
    var G__11897 = c;
    var G__11898 = d;
    var G__11899 = e;
    var G__11900 = f;
    var G__11901 = g;
    var G__11902 = h;
    var G__11903 = i;
    var G__11904 = j;
    var G__11905 = k;
    var G__11906 = l;
    var G__11907 = m;
    var G__11908 = n;
    var G__11909 = o;
    var G__11910 = p;
    var G__11911 = q;
    var G__11912 = r;
    var G__11913 = s;
    var G__11914 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__11895, G__11896, G__11897, G__11898, G__11899, G__11900, G__11901, G__11902, G__11903, G__11904, G__11905, G__11906, G__11907, G__11908, G__11909, G__11910, G__11911, G__11912, G__11913, G__11914) : self__.afn.call(null, G__11895, G__11896, G__11897, G__11898, G__11899, G__11900, G__11901, G__11902, G__11903, G__11904, G__11905, G__11906, G__11907, G__11908, G__11909, G__11910, G__11911, G__11912, 
    G__11913, G__11914);
  };
  var G__12169__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__11915 = self__.afn;
    var G__11916 = a;
    var G__11917 = b;
    var G__11918 = c;
    var G__11919 = d;
    var G__11920 = e;
    var G__11921 = f;
    var G__11922 = g;
    var G__11923 = h;
    var G__11924 = i;
    var G__11925 = j;
    var G__11926 = k;
    var G__11927 = l;
    var G__11928 = m;
    var G__11929 = n;
    var G__11930 = o;
    var G__11931 = p;
    var G__11932 = q;
    var G__11933 = r;
    var G__11934 = s;
    var G__11935 = t;
    var G__11936 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__11915, G__11916, G__11917, G__11918, G__11919, G__11920, G__11921, G__11922, G__11923, G__11924, G__11925, G__11926, G__11927, G__11928, G__11929, G__11930, G__11931, G__11932, G__11933, G__11934, G__11935, G__11936) : cljs.core.apply.call(null, G__11915, G__11916, G__11917, G__11918, G__11919, G__11920, G__11921, G__11922, G__11923, G__11924, G__11925, G__11926, G__11927, G__11928, G__11929, 
    G__11930, G__11931, G__11932, G__11933, G__11934, G__11935, G__11936);
  };
  G__12169 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__12169__1.call(this, self__);
      case 2:
        return G__12169__2.call(this, self__, a);
      case 3:
        return G__12169__3.call(this, self__, a, b);
      case 4:
        return G__12169__4.call(this, self__, a, b, c);
      case 5:
        return G__12169__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12169__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12169__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12169__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12169__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12169__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12169__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12169__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12169__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12169__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12169__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12169__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12169__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12169__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12169__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12169__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12169__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12169__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12169.cljs$core$IFn$_invoke$arity$1 = G__12169__1;
  G__12169.cljs$core$IFn$_invoke$arity$2 = G__12169__2;
  G__12169.cljs$core$IFn$_invoke$arity$3 = G__12169__3;
  G__12169.cljs$core$IFn$_invoke$arity$4 = G__12169__4;
  G__12169.cljs$core$IFn$_invoke$arity$5 = G__12169__5;
  G__12169.cljs$core$IFn$_invoke$arity$6 = G__12169__6;
  G__12169.cljs$core$IFn$_invoke$arity$7 = G__12169__7;
  G__12169.cljs$core$IFn$_invoke$arity$8 = G__12169__8;
  G__12169.cljs$core$IFn$_invoke$arity$9 = G__12169__9;
  G__12169.cljs$core$IFn$_invoke$arity$10 = G__12169__10;
  G__12169.cljs$core$IFn$_invoke$arity$11 = G__12169__11;
  G__12169.cljs$core$IFn$_invoke$arity$12 = G__12169__12;
  G__12169.cljs$core$IFn$_invoke$arity$13 = G__12169__13;
  G__12169.cljs$core$IFn$_invoke$arity$14 = G__12169__14;
  G__12169.cljs$core$IFn$_invoke$arity$15 = G__12169__15;
  G__12169.cljs$core$IFn$_invoke$arity$16 = G__12169__16;
  G__12169.cljs$core$IFn$_invoke$arity$17 = G__12169__17;
  G__12169.cljs$core$IFn$_invoke$arity$18 = G__12169__18;
  G__12169.cljs$core$IFn$_invoke$arity$19 = G__12169__19;
  G__12169.cljs$core$IFn$_invoke$arity$20 = G__12169__20;
  G__12169.cljs$core$IFn$_invoke$arity$21 = G__12169__21;
  G__12169.cljs$core$IFn$_invoke$arity$22 = G__12169__22;
  return G__12169;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args11704) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11704)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__11937 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__11937) : self__.afn.call(null, G__11937);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__11938 = a;
  var G__11939 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__11938, G__11939) : self__.afn.call(null, G__11938, G__11939);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__11940 = a;
  var G__11941 = b;
  var G__11942 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__11940, G__11941, G__11942) : self__.afn.call(null, G__11940, G__11941, G__11942);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__11943 = a;
  var G__11944 = b;
  var G__11945 = c;
  var G__11946 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__11943, G__11944, G__11945, G__11946) : self__.afn.call(null, G__11943, G__11944, G__11945, G__11946);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__11947 = a;
  var G__11948 = b;
  var G__11949 = c;
  var G__11950 = d;
  var G__11951 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__11947, G__11948, G__11949, G__11950, G__11951) : self__.afn.call(null, G__11947, G__11948, G__11949, G__11950, G__11951);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__11952 = a;
  var G__11953 = b;
  var G__11954 = c;
  var G__11955 = d;
  var G__11956 = e;
  var G__11957 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__11952, G__11953, G__11954, G__11955, G__11956, G__11957) : self__.afn.call(null, G__11952, G__11953, G__11954, G__11955, G__11956, G__11957);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__11958 = a;
  var G__11959 = b;
  var G__11960 = c;
  var G__11961 = d;
  var G__11962 = e;
  var G__11963 = f;
  var G__11964 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__11958, G__11959, G__11960, G__11961, G__11962, G__11963, G__11964) : self__.afn.call(null, G__11958, G__11959, G__11960, G__11961, G__11962, G__11963, G__11964);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__11965 = a;
  var G__11966 = b;
  var G__11967 = c;
  var G__11968 = d;
  var G__11969 = e;
  var G__11970 = f;
  var G__11971 = g;
  var G__11972 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__11965, G__11966, G__11967, G__11968, G__11969, G__11970, G__11971, G__11972) : self__.afn.call(null, G__11965, G__11966, G__11967, G__11968, G__11969, G__11970, G__11971, G__11972);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__11973 = a;
  var G__11974 = b;
  var G__11975 = c;
  var G__11976 = d;
  var G__11977 = e;
  var G__11978 = f;
  var G__11979 = g;
  var G__11980 = h;
  var G__11981 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__11973, G__11974, G__11975, G__11976, G__11977, G__11978, G__11979, G__11980, G__11981) : self__.afn.call(null, G__11973, G__11974, G__11975, G__11976, G__11977, G__11978, G__11979, G__11980, G__11981);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__11982 = a;
  var G__11983 = b;
  var G__11984 = c;
  var G__11985 = d;
  var G__11986 = e;
  var G__11987 = f;
  var G__11988 = g;
  var G__11989 = h;
  var G__11990 = i;
  var G__11991 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__11982, G__11983, G__11984, G__11985, G__11986, G__11987, G__11988, G__11989, G__11990, G__11991) : self__.afn.call(null, G__11982, G__11983, G__11984, G__11985, G__11986, G__11987, G__11988, G__11989, G__11990, G__11991);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__11992 = a;
  var G__11993 = b;
  var G__11994 = c;
  var G__11995 = d;
  var G__11996 = e;
  var G__11997 = f;
  var G__11998 = g;
  var G__11999 = h;
  var G__12000 = i;
  var G__12001 = j;
  var G__12002 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__11992, G__11993, G__11994, G__11995, G__11996, G__11997, G__11998, G__11999, G__12000, G__12001, G__12002) : self__.afn.call(null, G__11992, G__11993, G__11994, G__11995, G__11996, G__11997, G__11998, G__11999, G__12000, G__12001, G__12002);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__12003 = a;
  var G__12004 = b;
  var G__12005 = c;
  var G__12006 = d;
  var G__12007 = e;
  var G__12008 = f;
  var G__12009 = g;
  var G__12010 = h;
  var G__12011 = i;
  var G__12012 = j;
  var G__12013 = k;
  var G__12014 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__12003, G__12004, G__12005, G__12006, G__12007, G__12008, G__12009, G__12010, G__12011, G__12012, G__12013, G__12014) : self__.afn.call(null, G__12003, G__12004, G__12005, G__12006, G__12007, G__12008, G__12009, G__12010, G__12011, G__12012, G__12013, G__12014);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__12015 = a;
  var G__12016 = b;
  var G__12017 = c;
  var G__12018 = d;
  var G__12019 = e;
  var G__12020 = f;
  var G__12021 = g;
  var G__12022 = h;
  var G__12023 = i;
  var G__12024 = j;
  var G__12025 = k;
  var G__12026 = l;
  var G__12027 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__12015, G__12016, G__12017, G__12018, G__12019, G__12020, G__12021, G__12022, G__12023, G__12024, G__12025, G__12026, G__12027) : self__.afn.call(null, G__12015, G__12016, G__12017, G__12018, G__12019, G__12020, G__12021, G__12022, G__12023, G__12024, G__12025, G__12026, G__12027);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__12028 = a;
  var G__12029 = b;
  var G__12030 = c;
  var G__12031 = d;
  var G__12032 = e;
  var G__12033 = f;
  var G__12034 = g;
  var G__12035 = h;
  var G__12036 = i;
  var G__12037 = j;
  var G__12038 = k;
  var G__12039 = l;
  var G__12040 = m;
  var G__12041 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__12028, G__12029, G__12030, G__12031, G__12032, G__12033, G__12034, G__12035, G__12036, G__12037, G__12038, G__12039, G__12040, G__12041) : self__.afn.call(null, G__12028, G__12029, G__12030, G__12031, G__12032, G__12033, G__12034, G__12035, G__12036, G__12037, G__12038, G__12039, G__12040, G__12041);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__12042 = a;
  var G__12043 = b;
  var G__12044 = c;
  var G__12045 = d;
  var G__12046 = e;
  var G__12047 = f;
  var G__12048 = g;
  var G__12049 = h;
  var G__12050 = i;
  var G__12051 = j;
  var G__12052 = k;
  var G__12053 = l;
  var G__12054 = m;
  var G__12055 = n;
  var G__12056 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__12042, G__12043, G__12044, G__12045, G__12046, G__12047, G__12048, G__12049, G__12050, G__12051, G__12052, G__12053, G__12054, G__12055, G__12056) : self__.afn.call(null, G__12042, G__12043, G__12044, G__12045, G__12046, G__12047, G__12048, G__12049, G__12050, G__12051, G__12052, G__12053, G__12054, G__12055, G__12056);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__12057 = a;
  var G__12058 = b;
  var G__12059 = c;
  var G__12060 = d;
  var G__12061 = e;
  var G__12062 = f;
  var G__12063 = g;
  var G__12064 = h;
  var G__12065 = i;
  var G__12066 = j;
  var G__12067 = k;
  var G__12068 = l;
  var G__12069 = m;
  var G__12070 = n;
  var G__12071 = o;
  var G__12072 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__12057, G__12058, G__12059, G__12060, G__12061, G__12062, G__12063, G__12064, G__12065, G__12066, G__12067, G__12068, G__12069, G__12070, G__12071, G__12072) : self__.afn.call(null, G__12057, G__12058, G__12059, G__12060, G__12061, G__12062, G__12063, G__12064, G__12065, G__12066, G__12067, G__12068, G__12069, G__12070, G__12071, G__12072);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__12073 = a;
  var G__12074 = b;
  var G__12075 = c;
  var G__12076 = d;
  var G__12077 = e;
  var G__12078 = f;
  var G__12079 = g;
  var G__12080 = h;
  var G__12081 = i;
  var G__12082 = j;
  var G__12083 = k;
  var G__12084 = l;
  var G__12085 = m;
  var G__12086 = n;
  var G__12087 = o;
  var G__12088 = p;
  var G__12089 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__12073, G__12074, G__12075, G__12076, G__12077, G__12078, G__12079, G__12080, G__12081, G__12082, G__12083, G__12084, G__12085, G__12086, G__12087, G__12088, G__12089) : self__.afn.call(null, G__12073, G__12074, G__12075, G__12076, G__12077, G__12078, G__12079, G__12080, G__12081, G__12082, G__12083, G__12084, G__12085, G__12086, G__12087, G__12088, G__12089);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__12090 = a;
  var G__12091 = b;
  var G__12092 = c;
  var G__12093 = d;
  var G__12094 = e;
  var G__12095 = f;
  var G__12096 = g;
  var G__12097 = h;
  var G__12098 = i;
  var G__12099 = j;
  var G__12100 = k;
  var G__12101 = l;
  var G__12102 = m;
  var G__12103 = n;
  var G__12104 = o;
  var G__12105 = p;
  var G__12106 = q;
  var G__12107 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__12090, G__12091, G__12092, G__12093, G__12094, G__12095, G__12096, G__12097, G__12098, G__12099, G__12100, G__12101, G__12102, G__12103, G__12104, G__12105, G__12106, G__12107) : self__.afn.call(null, G__12090, G__12091, G__12092, G__12093, G__12094, G__12095, G__12096, G__12097, G__12098, G__12099, G__12100, G__12101, G__12102, G__12103, G__12104, G__12105, G__12106, G__12107);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__12108 = a;
  var G__12109 = b;
  var G__12110 = c;
  var G__12111 = d;
  var G__12112 = e;
  var G__12113 = f;
  var G__12114 = g;
  var G__12115 = h;
  var G__12116 = i;
  var G__12117 = j;
  var G__12118 = k;
  var G__12119 = l;
  var G__12120 = m;
  var G__12121 = n;
  var G__12122 = o;
  var G__12123 = p;
  var G__12124 = q;
  var G__12125 = r;
  var G__12126 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__12108, G__12109, G__12110, G__12111, G__12112, G__12113, G__12114, G__12115, G__12116, G__12117, G__12118, G__12119, G__12120, G__12121, G__12122, G__12123, G__12124, G__12125, G__12126) : self__.afn.call(null, G__12108, G__12109, G__12110, G__12111, G__12112, G__12113, G__12114, G__12115, G__12116, G__12117, G__12118, G__12119, G__12120, G__12121, G__12122, G__12123, G__12124, G__12125, G__12126);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__12127 = a;
  var G__12128 = b;
  var G__12129 = c;
  var G__12130 = d;
  var G__12131 = e;
  var G__12132 = f;
  var G__12133 = g;
  var G__12134 = h;
  var G__12135 = i;
  var G__12136 = j;
  var G__12137 = k;
  var G__12138 = l;
  var G__12139 = m;
  var G__12140 = n;
  var G__12141 = o;
  var G__12142 = p;
  var G__12143 = q;
  var G__12144 = r;
  var G__12145 = s;
  var G__12146 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__12127, G__12128, G__12129, G__12130, G__12131, G__12132, G__12133, G__12134, G__12135, G__12136, G__12137, G__12138, G__12139, G__12140, G__12141, G__12142, G__12143, G__12144, G__12145, G__12146) : self__.afn.call(null, G__12127, G__12128, G__12129, G__12130, G__12131, G__12132, G__12133, G__12134, G__12135, G__12136, G__12137, G__12138, G__12139, G__12140, G__12141, G__12142, G__12143, G__12144, G__12145, 
  G__12146);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__12147 = self__.afn;
  var G__12148 = a;
  var G__12149 = b;
  var G__12150 = c;
  var G__12151 = d;
  var G__12152 = e;
  var G__12153 = f;
  var G__12154 = g;
  var G__12155 = h;
  var G__12156 = i;
  var G__12157 = j;
  var G__12158 = k;
  var G__12159 = l;
  var G__12160 = m;
  var G__12161 = n;
  var G__12162 = o;
  var G__12163 = p;
  var G__12164 = q;
  var G__12165 = r;
  var G__12166 = s;
  var G__12167 = t;
  var G__12168 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__12147, G__12148, G__12149, G__12150, G__12151, G__12152, G__12153, G__12154, G__12155, G__12156, G__12157, G__12158, G__12159, G__12160, G__12161, G__12162, G__12163, G__12164, G__12165, G__12166, G__12167, G__12168) : cljs.core.apply.call(null, G__12147, G__12148, G__12149, G__12150, G__12151, G__12152, G__12153, G__12154, G__12155, G__12156, G__12157, G__12158, G__12159, G__12160, G__12161, 
  G__12162, G__12163, G__12164, G__12165, G__12166, G__12167, G__12168);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__12173 = o;
    if (G__12173) {
      var bit__4906__auto__ = G__12173.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4906__auto__ || G__12173.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__12173.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__12173);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__12173);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__4213__auto__ = !(o == null);
    if (and__4213__auto__) {
      var G__12177 = o;
      if (G__12177) {
        var bit__4906__auto__ = G__12177.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4906__auto__ || G__12177.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__12177.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__12177);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__12177);
      }
    } else {
      return and__4213__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var disj__3 = function() {
    var G__12180__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__12181 = ret;
            var G__12182 = cljs.core.first(ks);
            var G__12183 = cljs.core.next(ks);
            coll = G__12181;
            k = G__12182;
            ks = G__12183;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__12180 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__12184__i = 0, G__12184__a = new Array(arguments.length - 2);
        while (G__12184__i < G__12184__a.length) {
          G__12184__a[G__12184__i] = arguments[G__12184__i + 2];
          ++G__12184__i;
        }
        ks = new cljs.core.IndexedSeq(G__12184__a, 0);
      }
      return G__12180__delegate.call(this, coll, k, ks);
    };
    G__12180.cljs$lang$maxFixedArity = 2;
    G__12180.cljs$lang$applyTo = function(arglist__12185) {
      var coll = cljs.core.first(arglist__12185);
      arglist__12185 = cljs.core.next(arglist__12185);
      var k = cljs.core.first(arglist__12185);
      var ks = cljs.core.rest(arglist__12185);
      return G__12180__delegate(coll, k, ks);
    };
    G__12180.cljs$core$IFn$_invoke$arity$variadic = G__12180__delegate;
    return G__12180;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        var G__12186 = null;
        if (arguments.length > 2) {
          var G__12187__i = 0, G__12187__a = new Array(arguments.length - 2);
          while (G__12187__i < G__12187__a.length) {
            G__12187__a[G__12187__i] = arguments[G__12187__i + 2];
            ++G__12187__i;
          }
          G__12186 = new cljs.core.IndexedSeq(G__12187__a, 0);
        }
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__12186);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__12189 = x;
    if (G__12189) {
      var bit__4906__auto__ = G__12189.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4906__auto__ || G__12189.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__12189.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__12189);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__12189);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__12191 = x;
    if (G__12191) {
      var bit__4906__auto__ = G__12191.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4906__auto__ || G__12191.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__12191.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__12191);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__12191);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__12193 = x;
  if (G__12193) {
    var bit__4906__auto__ = G__12193.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4906__auto__ || G__12193.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__12193.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__12193);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__12193);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__12195 = x;
  if (G__12195) {
    var bit__4906__auto__ = G__12195.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4906__auto__ || G__12195.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__12195.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__12195);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__12195);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__12197 = x;
  if (G__12197) {
    var bit__4906__auto__ = G__12197.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4906__auto__ || G__12197.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__12197.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__12197);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__12197);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__12199 = x;
  if (G__12199) {
    var bit__4906__auto__ = G__12199.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4906__auto__ || G__12199.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__12199.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__12199);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__12199);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__12201 = x;
    if (G__12201) {
      var bit__4906__auto__ = G__12201.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4906__auto__ || G__12201.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__12201.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__12201);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__12201);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__12203 = x;
  if (G__12203) {
    var bit__4906__auto__ = G__12203.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4906__auto__ || G__12203.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__12203.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__12203);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__12203);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__12205 = x;
  if (G__12205) {
    var bit__4899__auto__ = G__12205.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4899__auto__ || G__12205.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj12211 = {};
    return obj12211;
  };
  var js_obj__1 = function() {
    var G__12214__delegate = function(keyvals) {
      var G__12212 = goog.object.create;
      var G__12213 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__12212, G__12213) : cljs.core.apply.call(null, G__12212, G__12213);
    };
    var G__12214 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__12215__i = 0, G__12215__a = new Array(arguments.length - 0);
        while (G__12215__i < G__12215__a.length) {
          G__12215__a[G__12215__i] = arguments[G__12215__i + 0];
          ++G__12215__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__12215__a, 0);
      }
      return G__12214__delegate.call(this, keyvals);
    };
    G__12214.cljs$lang$maxFixedArity = 0;
    G__12214.cljs$lang$applyTo = function(arglist__12216) {
      var keyvals = cljs.core.seq(arglist__12216);
      return G__12214__delegate(keyvals);
    };
    G__12214.cljs$core$IFn$_invoke$arity$variadic = G__12214__delegate;
    return G__12214;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        var G__12217 = null;
        if (arguments.length > 0) {
          var G__12218__i = 0, G__12218__a = new Array(arguments.length - 0);
          while (G__12218__i < G__12218__a.length) {
            G__12218__a[G__12218__i] = arguments[G__12218__i + 0];
            ++G__12218__i;
          }
          G__12217 = new cljs.core.IndexedSeq(G__12218__a, 0);
        }
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__12217);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  var G__12221_12223 = obj;
  var G__12222_12224 = function(G__12221_12223, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__12221_12223, keys);
  goog.object.forEach(G__12221_12223, G__12222_12224);
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__12225 = i__$1 + 1;
      var G__12226 = j__$1 + 1;
      var G__12227 = len__$1 - 1;
      i__$1 = G__12225;
      j__$1 = G__12226;
      len__$1 = G__12227;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__12228 = i__$1 - 1;
      var G__12229 = j__$1 - 1;
      var G__12230 = len__$1 - 1;
      i__$1 = G__12228;
      j__$1 = G__12229;
      len__$1 = G__12230;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj12232 = {};
  return obj12232;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__12234 = s;
    if (G__12234) {
      var bit__4906__auto__ = G__12234.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4906__auto__ || G__12234.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__12234.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__12234);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__12234);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__12236 = s;
  if (G__12236) {
    var bit__4906__auto__ = G__12236.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4906__auto__ || G__12236.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__12236.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__12236);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__12236);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__4225__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4225__auto__) {
    return or__4225__auto__;
  } else {
    var G__12240 = f;
    if (G__12240) {
      var bit__4906__auto__ = G__12240.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4906__auto__ || G__12240.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__12240.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__12240);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__12240);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__12253 = n;
    return isNaN(G__12253);
  }()) && !(n === Infinity) && function() {
    var G__12254 = n;
    return parseFloat(G__12254);
  }() === function() {
    var G__12255 = n;
    var G__12256 = 10;
    return parseInt(G__12255, G__12256);
  }();
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__12257__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__12258 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__12259 = etc;
              s = G__12258;
              xs = G__12259;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__12257 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12260__i = 0, G__12260__a = new Array(arguments.length - 2);
        while (G__12260__i < G__12260__a.length) {
          G__12260__a[G__12260__i] = arguments[G__12260__i + 2];
          ++G__12260__i;
        }
        more = new cljs.core.IndexedSeq(G__12260__a, 0);
      }
      return G__12257__delegate.call(this, x, y, more);
    };
    G__12257.cljs$lang$maxFixedArity = 2;
    G__12257.cljs$lang$applyTo = function(arglist__12261) {
      var x = cljs.core.first(arglist__12261);
      arglist__12261 = cljs.core.next(arglist__12261);
      var y = cljs.core.first(arglist__12261);
      var more = cljs.core.rest(arglist__12261);
      return G__12257__delegate(x, y, more);
    };
    G__12257.cljs$core$IFn$_invoke$arity$variadic = G__12257__delegate;
    return G__12257;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        var G__12262 = null;
        if (arguments.length > 2) {
          var G__12263__i = 0, G__12263__a = new Array(arguments.length - 2);
          while (G__12263__i < G__12263__a.length) {
            G__12263__a[G__12263__i] = arguments[G__12263__i + 2];
            ++G__12263__i;
          }
          G__12262 = new cljs.core.IndexedSeq(G__12263__a, 0);
        }
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12262);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__12267 = x;
            if (G__12267) {
              var bit__4899__auto__ = G__12267.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4899__auto__ || G__12267.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__12268 = x;
            var G__12269 = y;
            return goog.array.defaultCompare(G__12268, G__12269);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__12274 = xs;
        var G__12275 = ys;
        var G__12276 = len;
        var G__12277 = n + 1;
        xs = G__12274;
        ys = G__12275;
        len = G__12276;
        n = G__12277;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__12282 = x;
        var G__12283 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12282, G__12283) : f.call(null, G__12282, G__12283);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__12284 = y;
            var G__12285 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12284, G__12285) : f.call(null, G__12284, G__12285);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__12291 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__12291) : cljs.core.to_array.call(null, G__12291);
      }();
      var G__12292_12294 = a;
      var G__12293_12295 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__12292_12294, G__12293_12295);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__12301 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__12301) : keyfn.call(null, G__12301);
      }(), function() {
        var G__12302 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__12302) : keyfn.call(null, G__12302);
      }());
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__12308 = f;
      var G__12309 = cljs.core.first(s);
      var G__12310 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__12308, G__12309, G__12310) : cljs.core.reduce.call(null, G__12308, G__12309, G__12310);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__12311 = val__$1;
          var G__12312 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12311, G__12312) : f.call(null, G__12311, G__12312);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__12313 = nval;
          var G__12314 = cljs.core.next(coll__$1);
          val__$1 = G__12313;
          coll__$1 = G__12314;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = function() {
    var G__12318 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__12318) : cljs.core.to_array.call(null, G__12318);
  }();
  var G__12319_12321 = a;
  goog.array.shuffle(G__12319_12321);
  var G__12320 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__12320) : cljs.core.vec.call(null, G__12320);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__12324 = coll;
      if (G__12324) {
        var bit__4899__auto__ = G__12324.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4899__auto__ || G__12324.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__12325 = coll;
      if (G__12325) {
        var bit__4899__auto__ = G__12325.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4899__auto__ || G__12325.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__12334 = null;
      var G__12334__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__12334__1 = function(x) {
        var G__12331 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__12331) : cf.call(null, G__12331);
      };
      var G__12334__2 = function(x, y) {
        var G__12332 = x;
        var G__12333 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12332, G__12333) : f.call(null, G__12332, G__12333);
      };
      G__12334 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__12334__0.call(this);
          case 1:
            return G__12334__1.call(this, x);
          case 2:
            return G__12334__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12334.cljs$core$IFn$_invoke$arity$0 = G__12334__0;
      G__12334.cljs$core$IFn$_invoke$arity$1 = G__12334__1;
      G__12334.cljs$core$IFn$_invoke$arity$2 = G__12334__2;
      return G__12334;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__12341 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__12341) : xform.call(null, G__12341);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__12342 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__12342) : f__$1.call(null, G__12342);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__12343__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_PLUS_, x + y, more);
    };
    var G__12343 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12344__i = 0, G__12344__a = new Array(arguments.length - 2);
        while (G__12344__i < G__12344__a.length) {
          G__12344__a[G__12344__i] = arguments[G__12344__i + 2];
          ++G__12344__i;
        }
        more = new cljs.core.IndexedSeq(G__12344__a, 0);
      }
      return G__12343__delegate.call(this, x, y, more);
    };
    G__12343.cljs$lang$maxFixedArity = 2;
    G__12343.cljs$lang$applyTo = function(arglist__12345) {
      var x = cljs.core.first(arglist__12345);
      arglist__12345 = cljs.core.next(arglist__12345);
      var y = cljs.core.first(arglist__12345);
      var more = cljs.core.rest(arglist__12345);
      return G__12343__delegate(x, y, more);
    };
    G__12343.cljs$core$IFn$_invoke$arity$variadic = G__12343__delegate;
    return G__12343;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        var G__12346 = null;
        if (arguments.length > 2) {
          var G__12347__i = 0, G__12347__a = new Array(arguments.length - 2);
          while (G__12347__i < G__12347__a.length) {
            G__12347__a[G__12347__i] = arguments[G__12347__i + 2];
            ++G__12347__i;
          }
          G__12346 = new cljs.core.IndexedSeq(G__12347__a, 0);
        }
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12346);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__12348__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_, x - y, more);
    };
    var G__12348 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12349__i = 0, G__12349__a = new Array(arguments.length - 2);
        while (G__12349__i < G__12349__a.length) {
          G__12349__a[G__12349__i] = arguments[G__12349__i + 2];
          ++G__12349__i;
        }
        more = new cljs.core.IndexedSeq(G__12349__a, 0);
      }
      return G__12348__delegate.call(this, x, y, more);
    };
    G__12348.cljs$lang$maxFixedArity = 2;
    G__12348.cljs$lang$applyTo = function(arglist__12350) {
      var x = cljs.core.first(arglist__12350);
      arglist__12350 = cljs.core.next(arglist__12350);
      var y = cljs.core.first(arglist__12350);
      var more = cljs.core.rest(arglist__12350);
      return G__12348__delegate(x, y, more);
    };
    G__12348.cljs$core$IFn$_invoke$arity$variadic = G__12348__delegate;
    return G__12348;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        var G__12351 = null;
        if (arguments.length > 2) {
          var G__12352__i = 0, G__12352__a = new Array(arguments.length - 2);
          while (G__12352__i < G__12352__a.length) {
            G__12352__a[G__12352__i] = arguments[G__12352__i + 2];
            ++G__12352__i;
          }
          G__12351 = new cljs.core.IndexedSeq(G__12352__a, 0);
        }
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12351);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__12353__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_, x * y, more);
    };
    var G__12353 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12354__i = 0, G__12354__a = new Array(arguments.length - 2);
        while (G__12354__i < G__12354__a.length) {
          G__12354__a[G__12354__i] = arguments[G__12354__i + 2];
          ++G__12354__i;
        }
        more = new cljs.core.IndexedSeq(G__12354__a, 0);
      }
      return G__12353__delegate.call(this, x, y, more);
    };
    G__12353.cljs$lang$maxFixedArity = 2;
    G__12353.cljs$lang$applyTo = function(arglist__12355) {
      var x = cljs.core.first(arglist__12355);
      arglist__12355 = cljs.core.next(arglist__12355);
      var y = cljs.core.first(arglist__12355);
      var more = cljs.core.rest(arglist__12355);
      return G__12353__delegate(x, y, more);
    };
    G__12353.cljs$core$IFn$_invoke$arity$variadic = G__12353__delegate;
    return G__12353;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        var G__12356 = null;
        if (arguments.length > 2) {
          var G__12357__i = 0, G__12357__a = new Array(arguments.length - 2);
          while (G__12357__i < G__12357__a.length) {
            G__12357__a[G__12357__i] = arguments[G__12357__i + 2];
            ++G__12357__i;
          }
          G__12356 = new cljs.core.IndexedSeq(G__12357__a, 0);
        }
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12356);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__12362__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_SLASH_, _SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__12362 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12363__i = 0, G__12363__a = new Array(arguments.length - 2);
        while (G__12363__i < G__12363__a.length) {
          G__12363__a[G__12363__i] = arguments[G__12363__i + 2];
          ++G__12363__i;
        }
        more = new cljs.core.IndexedSeq(G__12363__a, 0);
      }
      return G__12362__delegate.call(this, x, y, more);
    };
    G__12362.cljs$lang$maxFixedArity = 2;
    G__12362.cljs$lang$applyTo = function(arglist__12364) {
      var x = cljs.core.first(arglist__12364);
      arglist__12364 = cljs.core.next(arglist__12364);
      var y = cljs.core.first(arglist__12364);
      var more = cljs.core.rest(arglist__12364);
      return G__12362__delegate(x, y, more);
    };
    G__12362.cljs$core$IFn$_invoke$arity$variadic = G__12362__delegate;
    return G__12362;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        var G__12365 = null;
        if (arguments.length > 2) {
          var G__12366__i = 0, G__12366__a = new Array(arguments.length - 2);
          while (G__12366__i < G__12366__a.length) {
            G__12366__a[G__12366__i] = arguments[G__12366__i + 2];
            ++G__12366__i;
          }
          G__12365 = new cljs.core.IndexedSeq(G__12366__a, 0);
        }
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12365);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__12367__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__12368 = y;
            var G__12369 = cljs.core.first(more);
            var G__12370 = cljs.core.next(more);
            x = G__12368;
            y = G__12369;
            more = G__12370;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__12367 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12371__i = 0, G__12371__a = new Array(arguments.length - 2);
        while (G__12371__i < G__12371__a.length) {
          G__12371__a[G__12371__i] = arguments[G__12371__i + 2];
          ++G__12371__i;
        }
        more = new cljs.core.IndexedSeq(G__12371__a, 0);
      }
      return G__12367__delegate.call(this, x, y, more);
    };
    G__12367.cljs$lang$maxFixedArity = 2;
    G__12367.cljs$lang$applyTo = function(arglist__12372) {
      var x = cljs.core.first(arglist__12372);
      arglist__12372 = cljs.core.next(arglist__12372);
      var y = cljs.core.first(arglist__12372);
      var more = cljs.core.rest(arglist__12372);
      return G__12367__delegate(x, y, more);
    };
    G__12367.cljs$core$IFn$_invoke$arity$variadic = G__12367__delegate;
    return G__12367;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        var G__12373 = null;
        if (arguments.length > 2) {
          var G__12374__i = 0, G__12374__a = new Array(arguments.length - 2);
          while (G__12374__i < G__12374__a.length) {
            G__12374__a[G__12374__i] = arguments[G__12374__i + 2];
            ++G__12374__i;
          }
          G__12373 = new cljs.core.IndexedSeq(G__12374__a, 0);
        }
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12373);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__12375__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__12376 = y;
            var G__12377 = cljs.core.first(more);
            var G__12378 = cljs.core.next(more);
            x = G__12376;
            y = G__12377;
            more = G__12378;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__12375 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12379__i = 0, G__12379__a = new Array(arguments.length - 2);
        while (G__12379__i < G__12379__a.length) {
          G__12379__a[G__12379__i] = arguments[G__12379__i + 2];
          ++G__12379__i;
        }
        more = new cljs.core.IndexedSeq(G__12379__a, 0);
      }
      return G__12375__delegate.call(this, x, y, more);
    };
    G__12375.cljs$lang$maxFixedArity = 2;
    G__12375.cljs$lang$applyTo = function(arglist__12380) {
      var x = cljs.core.first(arglist__12380);
      arglist__12380 = cljs.core.next(arglist__12380);
      var y = cljs.core.first(arglist__12380);
      var more = cljs.core.rest(arglist__12380);
      return G__12375__delegate(x, y, more);
    };
    G__12375.cljs$core$IFn$_invoke$arity$variadic = G__12375__delegate;
    return G__12375;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        var G__12381 = null;
        if (arguments.length > 2) {
          var G__12382__i = 0, G__12382__a = new Array(arguments.length - 2);
          while (G__12382__i < G__12382__a.length) {
            G__12382__a[G__12382__i] = arguments[G__12382__i + 2];
            ++G__12382__i;
          }
          G__12381 = new cljs.core.IndexedSeq(G__12382__a, 0);
        }
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12381);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__12383__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__12384 = y;
            var G__12385 = cljs.core.first(more);
            var G__12386 = cljs.core.next(more);
            x = G__12384;
            y = G__12385;
            more = G__12386;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__12383 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12387__i = 0, G__12387__a = new Array(arguments.length - 2);
        while (G__12387__i < G__12387__a.length) {
          G__12387__a[G__12387__i] = arguments[G__12387__i + 2];
          ++G__12387__i;
        }
        more = new cljs.core.IndexedSeq(G__12387__a, 0);
      }
      return G__12383__delegate.call(this, x, y, more);
    };
    G__12383.cljs$lang$maxFixedArity = 2;
    G__12383.cljs$lang$applyTo = function(arglist__12388) {
      var x = cljs.core.first(arglist__12388);
      arglist__12388 = cljs.core.next(arglist__12388);
      var y = cljs.core.first(arglist__12388);
      var more = cljs.core.rest(arglist__12388);
      return G__12383__delegate(x, y, more);
    };
    G__12383.cljs$core$IFn$_invoke$arity$variadic = G__12383__delegate;
    return G__12383;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        var G__12389 = null;
        if (arguments.length > 2) {
          var G__12390__i = 0, G__12390__a = new Array(arguments.length - 2);
          while (G__12390__i < G__12390__a.length) {
            G__12390__a[G__12390__i] = arguments[G__12390__i + 2];
            ++G__12390__i;
          }
          G__12389 = new cljs.core.IndexedSeq(G__12390__a, 0);
        }
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12389);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__12391__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__12392 = y;
            var G__12393 = cljs.core.first(more);
            var G__12394 = cljs.core.next(more);
            x = G__12392;
            y = G__12393;
            more = G__12394;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__12391 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12395__i = 0, G__12395__a = new Array(arguments.length - 2);
        while (G__12395__i < G__12395__a.length) {
          G__12395__a[G__12395__i] = arguments[G__12395__i + 2];
          ++G__12395__i;
        }
        more = new cljs.core.IndexedSeq(G__12395__a, 0);
      }
      return G__12391__delegate.call(this, x, y, more);
    };
    G__12391.cljs$lang$maxFixedArity = 2;
    G__12391.cljs$lang$applyTo = function(arglist__12396) {
      var x = cljs.core.first(arglist__12396);
      arglist__12396 = cljs.core.next(arglist__12396);
      var y = cljs.core.first(arglist__12396);
      var more = cljs.core.rest(arglist__12396);
      return G__12391__delegate(x, y, more);
    };
    G__12391.cljs$core$IFn$_invoke$arity$variadic = G__12391__delegate;
    return G__12391;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        var G__12397 = null;
        if (arguments.length > 2) {
          var G__12398__i = 0, G__12398__a = new Array(arguments.length - 2);
          while (G__12398__i < G__12398__a.length) {
            G__12398__a[G__12398__i] = arguments[G__12398__i + 2];
            ++G__12398__i;
          }
          G__12397 = new cljs.core.IndexedSeq(G__12398__a, 0);
        }
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12397);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4542__auto__ = x;
    var y__4543__auto__ = y;
    return x__4542__auto__ > y__4543__auto__ ? x__4542__auto__ : y__4543__auto__;
  };
  var max__3 = function() {
    var G__12399__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(max, function() {
        var x__4542__auto__ = x;
        var y__4543__auto__ = y;
        return x__4542__auto__ > y__4543__auto__ ? x__4542__auto__ : y__4543__auto__;
      }(), more);
    };
    var G__12399 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12400__i = 0, G__12400__a = new Array(arguments.length - 2);
        while (G__12400__i < G__12400__a.length) {
          G__12400__a[G__12400__i] = arguments[G__12400__i + 2];
          ++G__12400__i;
        }
        more = new cljs.core.IndexedSeq(G__12400__a, 0);
      }
      return G__12399__delegate.call(this, x, y, more);
    };
    G__12399.cljs$lang$maxFixedArity = 2;
    G__12399.cljs$lang$applyTo = function(arglist__12401) {
      var x = cljs.core.first(arglist__12401);
      arglist__12401 = cljs.core.next(arglist__12401);
      var y = cljs.core.first(arglist__12401);
      var more = cljs.core.rest(arglist__12401);
      return G__12399__delegate(x, y, more);
    };
    G__12399.cljs$core$IFn$_invoke$arity$variadic = G__12399__delegate;
    return G__12399;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        var G__12402 = null;
        if (arguments.length > 2) {
          var G__12403__i = 0, G__12403__a = new Array(arguments.length - 2);
          while (G__12403__i < G__12403__a.length) {
            G__12403__a[G__12403__i] = arguments[G__12403__i + 2];
            ++G__12403__i;
          }
          G__12402 = new cljs.core.IndexedSeq(G__12403__a, 0);
        }
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12402);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4549__auto__ = x;
    var y__4550__auto__ = y;
    return x__4549__auto__ < y__4550__auto__ ? x__4549__auto__ : y__4550__auto__;
  };
  var min__3 = function() {
    var G__12404__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(min, function() {
        var x__4549__auto__ = x;
        var y__4550__auto__ = y;
        return x__4549__auto__ < y__4550__auto__ ? x__4549__auto__ : y__4550__auto__;
      }(), more);
    };
    var G__12404 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12405__i = 0, G__12405__a = new Array(arguments.length - 2);
        while (G__12405__i < G__12405__a.length) {
          G__12405__a[G__12405__i] = arguments[G__12405__i + 2];
          ++G__12405__i;
        }
        more = new cljs.core.IndexedSeq(G__12405__a, 0);
      }
      return G__12404__delegate.call(this, x, y, more);
    };
    G__12404.cljs$lang$maxFixedArity = 2;
    G__12404.cljs$lang$applyTo = function(arglist__12406) {
      var x = cljs.core.first(arglist__12406);
      arglist__12406 = cljs.core.next(arglist__12406);
      var y = cljs.core.first(arglist__12406);
      var more = cljs.core.rest(arglist__12406);
      return G__12404__delegate(x, y, more);
    };
    G__12404.cljs$core$IFn$_invoke$arity$variadic = G__12404__delegate;
    return G__12404;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        var G__12407 = null;
        if (arguments.length > 2) {
          var G__12408__i = 0, G__12408__a = new Array(arguments.length - 2);
          while (G__12408__i < G__12408__a.length) {
            G__12408__a[G__12408__i] = arguments[G__12408__i + 2];
            ++G__12408__i;
          }
          G__12407 = new cljs.core.IndexedSeq(G__12408__a, 0);
        }
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12407);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__12409__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add, x + y, more);
    };
    var G__12409 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12410__i = 0, G__12410__a = new Array(arguments.length - 2);
        while (G__12410__i < G__12410__a.length) {
          G__12410__a[G__12410__i] = arguments[G__12410__i + 2];
          ++G__12410__i;
        }
        more = new cljs.core.IndexedSeq(G__12410__a, 0);
      }
      return G__12409__delegate.call(this, x, y, more);
    };
    G__12409.cljs$lang$maxFixedArity = 2;
    G__12409.cljs$lang$applyTo = function(arglist__12411) {
      var x = cljs.core.first(arglist__12411);
      arglist__12411 = cljs.core.next(arglist__12411);
      var y = cljs.core.first(arglist__12411);
      var more = cljs.core.rest(arglist__12411);
      return G__12409__delegate(x, y, more);
    };
    G__12409.cljs$core$IFn$_invoke$arity$variadic = G__12409__delegate;
    return G__12409;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        var G__12412 = null;
        if (arguments.length > 2) {
          var G__12413__i = 0, G__12413__a = new Array(arguments.length - 2);
          while (G__12413__i < G__12413__a.length) {
            G__12413__a[G__12413__i] = arguments[G__12413__i + 2];
            ++G__12413__i;
          }
          G__12412 = new cljs.core.IndexedSeq(G__12413__a, 0);
        }
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12412);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__12414__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add_int, x + y, more);
    };
    var G__12414 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12415__i = 0, G__12415__a = new Array(arguments.length - 2);
        while (G__12415__i < G__12415__a.length) {
          G__12415__a[G__12415__i] = arguments[G__12415__i + 2];
          ++G__12415__i;
        }
        more = new cljs.core.IndexedSeq(G__12415__a, 0);
      }
      return G__12414__delegate.call(this, x, y, more);
    };
    G__12414.cljs$lang$maxFixedArity = 2;
    G__12414.cljs$lang$applyTo = function(arglist__12416) {
      var x = cljs.core.first(arglist__12416);
      arglist__12416 = cljs.core.next(arglist__12416);
      var y = cljs.core.first(arglist__12416);
      var more = cljs.core.rest(arglist__12416);
      return G__12414__delegate(x, y, more);
    };
    G__12414.cljs$core$IFn$_invoke$arity$variadic = G__12414__delegate;
    return G__12414;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        var G__12417 = null;
        if (arguments.length > 2) {
          var G__12418__i = 0, G__12418__a = new Array(arguments.length - 2);
          while (G__12418__i < G__12418__a.length) {
            G__12418__a[G__12418__i] = arguments[G__12418__i + 2];
            ++G__12418__i;
          }
          G__12417 = new cljs.core.IndexedSeq(G__12418__a, 0);
        }
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12417);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__12423__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_divide_int, unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__12423 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12424__i = 0, G__12424__a = new Array(arguments.length - 2);
        while (G__12424__i < G__12424__a.length) {
          G__12424__a[G__12424__i] = arguments[G__12424__i + 2];
          ++G__12424__i;
        }
        more = new cljs.core.IndexedSeq(G__12424__a, 0);
      }
      return G__12423__delegate.call(this, x, y, more);
    };
    G__12423.cljs$lang$maxFixedArity = 2;
    G__12423.cljs$lang$applyTo = function(arglist__12425) {
      var x = cljs.core.first(arglist__12425);
      arglist__12425 = cljs.core.next(arglist__12425);
      var y = cljs.core.first(arglist__12425);
      var more = cljs.core.rest(arglist__12425);
      return G__12423__delegate(x, y, more);
    };
    G__12423.cljs$core$IFn$_invoke$arity$variadic = G__12423__delegate;
    return G__12423;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        var G__12426 = null;
        if (arguments.length > 2) {
          var G__12427__i = 0, G__12427__a = new Array(arguments.length - 2);
          while (G__12427__i < G__12427__a.length) {
            G__12427__a[G__12427__i] = arguments[G__12427__i + 2];
            ++G__12427__i;
          }
          G__12426 = new cljs.core.IndexedSeq(G__12427__a, 0);
        }
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12426);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__12428__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply, x * y, more);
    };
    var G__12428 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12429__i = 0, G__12429__a = new Array(arguments.length - 2);
        while (G__12429__i < G__12429__a.length) {
          G__12429__a[G__12429__i] = arguments[G__12429__i + 2];
          ++G__12429__i;
        }
        more = new cljs.core.IndexedSeq(G__12429__a, 0);
      }
      return G__12428__delegate.call(this, x, y, more);
    };
    G__12428.cljs$lang$maxFixedArity = 2;
    G__12428.cljs$lang$applyTo = function(arglist__12430) {
      var x = cljs.core.first(arglist__12430);
      arglist__12430 = cljs.core.next(arglist__12430);
      var y = cljs.core.first(arglist__12430);
      var more = cljs.core.rest(arglist__12430);
      return G__12428__delegate(x, y, more);
    };
    G__12428.cljs$core$IFn$_invoke$arity$variadic = G__12428__delegate;
    return G__12428;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        var G__12431 = null;
        if (arguments.length > 2) {
          var G__12432__i = 0, G__12432__a = new Array(arguments.length - 2);
          while (G__12432__i < G__12432__a.length) {
            G__12432__a[G__12432__i] = arguments[G__12432__i + 2];
            ++G__12432__i;
          }
          G__12431 = new cljs.core.IndexedSeq(G__12432__a, 0);
        }
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12431);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__12433__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply_int, x * y, more);
    };
    var G__12433 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12434__i = 0, G__12434__a = new Array(arguments.length - 2);
        while (G__12434__i < G__12434__a.length) {
          G__12434__a[G__12434__i] = arguments[G__12434__i + 2];
          ++G__12434__i;
        }
        more = new cljs.core.IndexedSeq(G__12434__a, 0);
      }
      return G__12433__delegate.call(this, x, y, more);
    };
    G__12433.cljs$lang$maxFixedArity = 2;
    G__12433.cljs$lang$applyTo = function(arglist__12435) {
      var x = cljs.core.first(arglist__12435);
      arglist__12435 = cljs.core.next(arglist__12435);
      var y = cljs.core.first(arglist__12435);
      var more = cljs.core.rest(arglist__12435);
      return G__12433__delegate(x, y, more);
    };
    G__12433.cljs$core$IFn$_invoke$arity$variadic = G__12433__delegate;
    return G__12433;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__12436 = null;
        if (arguments.length > 2) {
          var G__12437__i = 0, G__12437__a = new Array(arguments.length - 2);
          while (G__12437__i < G__12437__a.length) {
            G__12437__a[G__12437__i] = arguments[G__12437__i + 2];
            ++G__12437__i;
          }
          G__12436 = new cljs.core.IndexedSeq(G__12437__a, 0);
        }
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12436);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  var G__12440 = x;
  var G__12441 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__12440, G__12441) : cljs.core.mod.call(null, G__12440, G__12441);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__12442__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract, x - y, more);
    };
    var G__12442 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12443__i = 0, G__12443__a = new Array(arguments.length - 2);
        while (G__12443__i < G__12443__a.length) {
          G__12443__a[G__12443__i] = arguments[G__12443__i + 2];
          ++G__12443__i;
        }
        more = new cljs.core.IndexedSeq(G__12443__a, 0);
      }
      return G__12442__delegate.call(this, x, y, more);
    };
    G__12442.cljs$lang$maxFixedArity = 2;
    G__12442.cljs$lang$applyTo = function(arglist__12444) {
      var x = cljs.core.first(arglist__12444);
      arglist__12444 = cljs.core.next(arglist__12444);
      var y = cljs.core.first(arglist__12444);
      var more = cljs.core.rest(arglist__12444);
      return G__12442__delegate(x, y, more);
    };
    G__12442.cljs$core$IFn$_invoke$arity$variadic = G__12442__delegate;
    return G__12442;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        var G__12445 = null;
        if (arguments.length > 2) {
          var G__12446__i = 0, G__12446__a = new Array(arguments.length - 2);
          while (G__12446__i < G__12446__a.length) {
            G__12446__a[G__12446__i] = arguments[G__12446__i + 2];
            ++G__12446__i;
          }
          G__12445 = new cljs.core.IndexedSeq(G__12446__a, 0);
        }
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12445);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__12447__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract_int, x - y, more);
    };
    var G__12447 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12448__i = 0, G__12448__a = new Array(arguments.length - 2);
        while (G__12448__i < G__12448__a.length) {
          G__12448__a[G__12448__i] = arguments[G__12448__i + 2];
          ++G__12448__i;
        }
        more = new cljs.core.IndexedSeq(G__12448__a, 0);
      }
      return G__12447__delegate.call(this, x, y, more);
    };
    G__12447.cljs$lang$maxFixedArity = 2;
    G__12447.cljs$lang$applyTo = function(arglist__12449) {
      var x = cljs.core.first(arglist__12449);
      arglist__12449 = cljs.core.next(arglist__12449);
      var y = cljs.core.first(arglist__12449);
      var more = cljs.core.rest(arglist__12449);
      return G__12447__delegate(x, y, more);
    };
    G__12447.cljs$core$IFn$_invoke$arity$variadic = G__12447__delegate;
    return G__12447;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__12450 = null;
        if (arguments.length > 2) {
          var G__12451__i = 0, G__12451__a = new Array(arguments.length - 2);
          while (G__12451__i < G__12451__a.length) {
            G__12451__a[G__12451__i] = arguments[G__12451__i + 2];
            ++G__12451__i;
          }
          G__12450 = new cljs.core.IndexedSeq(G__12451__a, 0);
        }
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12450);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    var G__12454 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__12454) : Math.floor.call(null, G__12454);
  } else {
    var G__12455 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__12455) : Math.ceil.call(null, G__12455);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var bit_xor = null;
  var bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var bit_xor__3 = function() {
    var G__12456__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_xor, x ^ y, more);
    };
    var G__12456 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12457__i = 0, G__12457__a = new Array(arguments.length - 2);
        while (G__12457__i < G__12457__a.length) {
          G__12457__a[G__12457__i] = arguments[G__12457__i + 2];
          ++G__12457__i;
        }
        more = new cljs.core.IndexedSeq(G__12457__a, 0);
      }
      return G__12456__delegate.call(this, x, y, more);
    };
    G__12456.cljs$lang$maxFixedArity = 2;
    G__12456.cljs$lang$applyTo = function(arglist__12458) {
      var x = cljs.core.first(arglist__12458);
      arglist__12458 = cljs.core.next(arglist__12458);
      var y = cljs.core.first(arglist__12458);
      var more = cljs.core.rest(arglist__12458);
      return G__12456__delegate(x, y, more);
    };
    G__12456.cljs$core$IFn$_invoke$arity$variadic = G__12456__delegate;
    return G__12456;
  }();
  bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_xor__2.call(this, x, y);
      default:
        var G__12459 = null;
        if (arguments.length > 2) {
          var G__12460__i = 0, G__12460__a = new Array(arguments.length - 2);
          while (G__12460__i < G__12460__a.length) {
            G__12460__a[G__12460__i] = arguments[G__12460__i + 2];
            ++G__12460__i;
          }
          G__12459 = new cljs.core.IndexedSeq(G__12460__a, 0);
        }
        return bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12459);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_xor.cljs$lang$maxFixedArity = 2;
  bit_xor.cljs$lang$applyTo = bit_xor__3.cljs$lang$applyTo;
  bit_xor.cljs$core$IFn$_invoke$arity$2 = bit_xor__2;
  bit_xor.cljs$core$IFn$_invoke$arity$variadic = bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_xor;
}();
cljs.core.bit_and = function() {
  var bit_and = null;
  var bit_and__2 = function(x, y) {
    return x & y;
  };
  var bit_and__3 = function() {
    var G__12461__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and, x & y, more);
    };
    var G__12461 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12462__i = 0, G__12462__a = new Array(arguments.length - 2);
        while (G__12462__i < G__12462__a.length) {
          G__12462__a[G__12462__i] = arguments[G__12462__i + 2];
          ++G__12462__i;
        }
        more = new cljs.core.IndexedSeq(G__12462__a, 0);
      }
      return G__12461__delegate.call(this, x, y, more);
    };
    G__12461.cljs$lang$maxFixedArity = 2;
    G__12461.cljs$lang$applyTo = function(arglist__12463) {
      var x = cljs.core.first(arglist__12463);
      arglist__12463 = cljs.core.next(arglist__12463);
      var y = cljs.core.first(arglist__12463);
      var more = cljs.core.rest(arglist__12463);
      return G__12461__delegate(x, y, more);
    };
    G__12461.cljs$core$IFn$_invoke$arity$variadic = G__12461__delegate;
    return G__12461;
  }();
  bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and__2.call(this, x, y);
      default:
        var G__12464 = null;
        if (arguments.length > 2) {
          var G__12465__i = 0, G__12465__a = new Array(arguments.length - 2);
          while (G__12465__i < G__12465__a.length) {
            G__12465__a[G__12465__i] = arguments[G__12465__i + 2];
            ++G__12465__i;
          }
          G__12464 = new cljs.core.IndexedSeq(G__12465__a, 0);
        }
        return bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12464);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and.cljs$lang$maxFixedArity = 2;
  bit_and.cljs$lang$applyTo = bit_and__3.cljs$lang$applyTo;
  bit_and.cljs$core$IFn$_invoke$arity$2 = bit_and__2;
  bit_and.cljs$core$IFn$_invoke$arity$variadic = bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and;
}();
cljs.core.bit_or = function() {
  var bit_or = null;
  var bit_or__2 = function(x, y) {
    return x | y;
  };
  var bit_or__3 = function() {
    var G__12466__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_or, x | y, more);
    };
    var G__12466 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12467__i = 0, G__12467__a = new Array(arguments.length - 2);
        while (G__12467__i < G__12467__a.length) {
          G__12467__a[G__12467__i] = arguments[G__12467__i + 2];
          ++G__12467__i;
        }
        more = new cljs.core.IndexedSeq(G__12467__a, 0);
      }
      return G__12466__delegate.call(this, x, y, more);
    };
    G__12466.cljs$lang$maxFixedArity = 2;
    G__12466.cljs$lang$applyTo = function(arglist__12468) {
      var x = cljs.core.first(arglist__12468);
      arglist__12468 = cljs.core.next(arglist__12468);
      var y = cljs.core.first(arglist__12468);
      var more = cljs.core.rest(arglist__12468);
      return G__12466__delegate(x, y, more);
    };
    G__12466.cljs$core$IFn$_invoke$arity$variadic = G__12466__delegate;
    return G__12466;
  }();
  bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_or__2.call(this, x, y);
      default:
        var G__12469 = null;
        if (arguments.length > 2) {
          var G__12470__i = 0, G__12470__a = new Array(arguments.length - 2);
          while (G__12470__i < G__12470__a.length) {
            G__12470__a[G__12470__i] = arguments[G__12470__i + 2];
            ++G__12470__i;
          }
          G__12469 = new cljs.core.IndexedSeq(G__12470__a, 0);
        }
        return bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12469);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_or.cljs$lang$maxFixedArity = 2;
  bit_or.cljs$lang$applyTo = bit_or__3.cljs$lang$applyTo;
  bit_or.cljs$core$IFn$_invoke$arity$2 = bit_or__2;
  bit_or.cljs$core$IFn$_invoke$arity$variadic = bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_or;
}();
cljs.core.bit_and_not = function() {
  var bit_and_not = null;
  var bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var bit_and_not__3 = function() {
    var G__12471__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and_not, x & ~y, more);
    };
    var G__12471 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12472__i = 0, G__12472__a = new Array(arguments.length - 2);
        while (G__12472__i < G__12472__a.length) {
          G__12472__a[G__12472__i] = arguments[G__12472__i + 2];
          ++G__12472__i;
        }
        more = new cljs.core.IndexedSeq(G__12472__a, 0);
      }
      return G__12471__delegate.call(this, x, y, more);
    };
    G__12471.cljs$lang$maxFixedArity = 2;
    G__12471.cljs$lang$applyTo = function(arglist__12473) {
      var x = cljs.core.first(arglist__12473);
      arglist__12473 = cljs.core.next(arglist__12473);
      var y = cljs.core.first(arglist__12473);
      var more = cljs.core.rest(arglist__12473);
      return G__12471__delegate(x, y, more);
    };
    G__12471.cljs$core$IFn$_invoke$arity$variadic = G__12471__delegate;
    return G__12471;
  }();
  bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and_not__2.call(this, x, y);
      default:
        var G__12474 = null;
        if (arguments.length > 2) {
          var G__12475__i = 0, G__12475__a = new Array(arguments.length - 2);
          while (G__12475__i < G__12475__a.length) {
            G__12475__a[G__12475__i] = arguments[G__12475__i + 2];
            ++G__12475__i;
          }
          G__12474 = new cljs.core.IndexedSeq(G__12475__a, 0);
        }
        return bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12474);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and_not.cljs$lang$maxFixedArity = 2;
  bit_and_not.cljs$lang$applyTo = bit_and_not__3.cljs$lang$applyTo;
  bit_and_not.cljs$core$IFn$_invoke$arity$2 = bit_and_not__2;
  bit_and_not.cljs$core$IFn$_invoke$arity$variadic = bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and_not;
}();
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__12480__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__12481 = y;
            var G__12482 = cljs.core.first(more);
            var G__12483 = cljs.core.next(more);
            x = G__12481;
            y = G__12482;
            more = G__12483;
            continue;
          } else {
            return _EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__12480 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12484__i = 0, G__12484__a = new Array(arguments.length - 2);
        while (G__12484__i < G__12484__a.length) {
          G__12484__a[G__12484__i] = arguments[G__12484__i + 2];
          ++G__12484__i;
        }
        more = new cljs.core.IndexedSeq(G__12484__a, 0);
      }
      return G__12480__delegate.call(this, x, y, more);
    };
    G__12480.cljs$lang$maxFixedArity = 2;
    G__12480.cljs$lang$applyTo = function(arglist__12485) {
      var x = cljs.core.first(arglist__12485);
      arglist__12485 = cljs.core.next(arglist__12485);
      var y = cljs.core.first(arglist__12485);
      var more = cljs.core.rest(arglist__12485);
      return G__12480__delegate(x, y, more);
    };
    G__12480.cljs$core$IFn$_invoke$arity$variadic = G__12480__delegate;
    return G__12480;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        var G__12486 = null;
        if (arguments.length > 2) {
          var G__12487__i = 0, G__12487__a = new Array(arguments.length - 2);
          while (G__12487__i < G__12487__a.length) {
            G__12487__a[G__12487__i] = arguments[G__12487__i + 2];
            ++G__12487__i;
          }
          G__12486 = new cljs.core.IndexedSeq(G__12487__a, 0);
        }
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12486);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__12488 = n__$1 - 1;
      var G__12489 = cljs.core.next(xs);
      n__$1 = G__12488;
      xs = G__12489;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__12493 = x;
      return goog.string.buildString(G__12493);
    }
  };
  var str__2 = function() {
    var G__12494__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__12495 = sb.append(str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__12496 = cljs.core.next(more);
          sb = G__12495;
          more = G__12496;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__12494 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__12497__i = 0, G__12497__a = new Array(arguments.length - 1);
        while (G__12497__i < G__12497__a.length) {
          G__12497__a[G__12497__i] = arguments[G__12497__i + 1];
          ++G__12497__i;
        }
        ys = new cljs.core.IndexedSeq(G__12497__a, 0);
      }
      return G__12494__delegate.call(this, x, ys);
    };
    G__12494.cljs$lang$maxFixedArity = 1;
    G__12494.cljs$lang$applyTo = function(arglist__12498) {
      var x = cljs.core.first(arglist__12498);
      var ys = cljs.core.rest(arglist__12498);
      return G__12494__delegate(x, ys);
    };
    G__12494.cljs$core$IFn$_invoke$arity$variadic = G__12494__delegate;
    return G__12494;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        var G__12499 = null;
        if (arguments.length > 1) {
          var G__12500__i = 0, G__12500__a = new Array(arguments.length - 1);
          while (G__12500__i < G__12500__a.length) {
            G__12500__a[G__12500__i] = arguments[G__12500__i + 1];
            ++G__12500__i;
          }
          G__12499 = new cljs.core.IndexedSeq(G__12500__a, 0);
        }
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__12499);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__12501 = cljs.core.next(xs);
            var G__12502 = cljs.core.next(ys);
            xs = G__12501;
            ys = G__12502;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__12503 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__12504 = cljs.core.next(s);
        res = G__12503;
        s = G__12504;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__12509 = (h + (cljs.core.hash(function() {
        var G__12507 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__12507) : cljs.core.key.call(null, G__12507);
      }()) ^ cljs.core.hash(function() {
        var G__12508 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__12508) : cljs.core.val.call(null, G__12508);
      }()))) % 4503599627370496;
      var G__12510 = cljs.core.next(s);
      h = G__12509;
      s = G__12510;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__12511 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__12512 = cljs.core.next(s__$1);
      h = G__12511;
      s__$1 = G__12512;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__12523_12533 = cljs.core.seq(fn_map);
  var chunk__12524_12534 = null;
  var count__12525_12535 = 0;
  var i__12526_12536 = 0;
  while (true) {
    if (i__12526_12536 < count__12525_12535) {
      var vec__12527_12537 = chunk__12524_12534.cljs$core$IIndexed$_nth$arity$2(null, i__12526_12536);
      var key_name_12538 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12527_12537, 0, null);
      var f_12539 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12527_12537, 1, null);
      var str_name_12540 = function() {
        var G__12528 = key_name_12538;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__12528) : cljs.core.name.call(null, G__12528);
      }();
      obj[str_name_12540] = f_12539;
      var G__12541 = seq__12523_12533;
      var G__12542 = chunk__12524_12534;
      var G__12543 = count__12525_12535;
      var G__12544 = i__12526_12536 + 1;
      seq__12523_12533 = G__12541;
      chunk__12524_12534 = G__12542;
      count__12525_12535 = G__12543;
      i__12526_12536 = G__12544;
      continue;
    } else {
      var temp__4126__auto___12545 = cljs.core.seq(seq__12523_12533);
      if (temp__4126__auto___12545) {
        var seq__12523_12546__$1 = temp__4126__auto___12545;
        if (cljs.core.chunked_seq_QMARK_(seq__12523_12546__$1)) {
          var c__5012__auto___12547 = function() {
            var G__12529 = seq__12523_12546__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__12529) : cljs.core.chunk_first.call(null, G__12529);
          }();
          var G__12548 = function() {
            var G__12530 = seq__12523_12546__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__12530) : cljs.core.chunk_rest.call(null, G__12530);
          }();
          var G__12549 = c__5012__auto___12547;
          var G__12550 = cljs.core.count(c__5012__auto___12547);
          var G__12551 = 0;
          seq__12523_12533 = G__12548;
          chunk__12524_12534 = G__12549;
          count__12525_12535 = G__12550;
          i__12526_12536 = G__12551;
          continue;
        } else {
          var vec__12531_12552 = cljs.core.first(seq__12523_12546__$1);
          var key_name_12553 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12531_12552, 0, null);
          var f_12554 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12531_12552, 1, null);
          var str_name_12555 = function() {
            var G__12532 = key_name_12553;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__12532) : cljs.core.name.call(null, G__12532);
          }();
          obj[str_name_12555] = f_12554;
          var G__12556 = cljs.core.next(seq__12523_12546__$1);
          var G__12557 = null;
          var G__12558 = 0;
          var G__12559 = 0;
          seq__12523_12533 = G__12556;
          chunk__12524_12534 = G__12557;
          count__12525_12535 = G__12558;
          i__12526_12536 = G__12559;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__12561 = coll;
  if (G__12561) {
    var bit__4906__auto__ = G__12561.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4906__auto__ || G__12561.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__12561.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__12561);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__12561);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__12562 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__12562;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__12563 = i - 1;
        var G__12564 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__12563;
        r = G__12564;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__12565__i = 0, G__12565__a = new Array(arguments.length - 0);
      while (G__12565__i < G__12565__a.length) {
        G__12565__a[G__12565__i] = arguments[G__12565__i + 0];
        ++G__12565__i;
      }
      xs = new cljs.core.IndexedSeq(G__12565__a, 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__12566) {
    var xs = cljs.core.seq(arglist__12566);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__4225__auto__ = coll == null;
    if (or__4225__auto__) {
      return or__4225__auto__;
    } else {
      var G__12570 = coll;
      if (G__12570) {
        var bit__4899__auto__ = G__12570.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4899__auto__ || G__12570.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__12572 = x;
  if (G__12572) {
    var bit__4906__auto__ = G__12572.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4906__auto__ || G__12572.cljs$core$IList$) {
      return true;
    } else {
      if (!G__12572.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__12572);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__12572);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = cljs.core.not(a.ns);
      if (and__4213__auto__) {
        return b.ns;
      } else {
        return and__4213__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__12579 = a.ns;
            var G__12580 = b.ns;
            return goog.array.defaultCompare(G__12579, G__12580);
          }();
          if (0 === nsc) {
            var G__12581 = a.name;
            var G__12582 = b.name;
            return goog.array.defaultCompare(G__12581, G__12582);
          } else {
            return nsc;
          }
        }
      } else {
        var G__12583 = a.name;
        var G__12584 = b.name;
        return goog.array.defaultCompare(G__12583, G__12584);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4646__auto__ = self__._hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__12586 = null;
  var G__12586__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__12586__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__12586 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12586__2.call(this, self__, coll);
      case 3:
        return G__12586__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12586.cljs$core$IFn$_invoke$arity$2 = G__12586__2;
  G__12586.cljs$core$IFn$_invoke$arity$3 = G__12586__3;
  return G__12586;
}();
cljs.core.Keyword.prototype.apply = function(self__, args12585) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12585)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__12588 = x;
    if (G__12588) {
      var bit__4899__auto__ = G__12588.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4899__auto__ || G__12588.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__12590 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__12590) : cljs.core.name.call(null, G__12590);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__12591 = ls.sval();
        ls = G__12591;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__12593 = s;
    if (G__12593) {
      var bit__4899__auto__ = G__12593.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4899__auto__ || G__12593.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__12594 = cljs.core.next(s__$1);
      s__$1 = G__12594;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_12595 = 0;
  var xs_12596 = cljs.core.seq(coll);
  while (true) {
    if (xs_12596) {
      ret[i_12595] = cljs.core.to_array(cljs.core.first(xs_12596));
      var G__12597 = i_12595 + 1;
      var G__12598 = cljs.core.next(xs_12596);
      i_12595 = G__12597;
      xs_12596 = G__12598;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__12601 = i + 1;
          var G__12602 = cljs.core.next(s__$1);
          i = G__12601;
          s__$1 = G__12602;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5112__auto___12603 = size;
      var i_12604 = 0;
      while (true) {
        if (i_12604 < n__5112__auto___12603) {
          a[i_12604] = init_val_or_seq;
          var G__12605 = i_12604 + 1;
          i_12604 = G__12605;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__12608 = i + 1;
          var G__12609 = cljs.core.next(s__$1);
          i = G__12608;
          s__$1 = G__12609;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5112__auto___12610 = size;
      var i_12611 = 0;
      while (true) {
        if (i_12611 < n__5112__auto___12610) {
          a[i_12611] = init_val_or_seq;
          var G__12612 = i_12611 + 1;
          i_12611 = G__12612;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__12615 = i + 1;
          var G__12616 = cljs.core.next(s__$1);
          i = G__12615;
          s__$1 = G__12616;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5112__auto___12617 = size;
      var i_12618 = 0;
      while (true) {
        if (i_12618 < n__5112__auto___12617) {
          a[i_12618] = init_val_or_seq;
          var G__12619 = i_12618 + 1;
          i_12618 = G__12619;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__12622 = i + 1;
          var G__12623 = cljs.core.next(s__$1);
          i = G__12622;
          s__$1 = G__12623;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__5112__auto___12624 = size;
      var i_12625 = 0;
      while (true) {
        if (i_12625 < n__5112__auto___12624) {
          a[i_12625] = init_val_or_seq;
          var G__12626 = i_12625 + 1;
          i_12625 = G__12626;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__12627 = cljs.core.next(s__$1);
        var G__12628 = i - 1;
        var G__12629 = sum + 1;
        s__$1 = G__12627;
        i = G__12628;
        sum = G__12629;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__12649__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__12649 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__12650__i = 0, G__12650__a = new Array(arguments.length - 2);
        while (G__12650__i < G__12650__a.length) {
          G__12650__a[G__12650__i] = arguments[G__12650__i + 2];
          ++G__12650__i;
        }
        zs = new cljs.core.IndexedSeq(G__12650__a, 0);
      }
      return G__12649__delegate.call(this, x, y, zs);
    };
    G__12649.cljs$lang$maxFixedArity = 2;
    G__12649.cljs$lang$applyTo = function(arglist__12651) {
      var x = cljs.core.first(arglist__12651);
      arglist__12651 = cljs.core.next(arglist__12651);
      var y = cljs.core.first(arglist__12651);
      var zs = cljs.core.rest(arglist__12651);
      return G__12649__delegate(x, y, zs);
    };
    G__12649.cljs$core$IFn$_invoke$arity$variadic = G__12649__delegate;
    return G__12649;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        var G__12652 = null;
        if (arguments.length > 2) {
          var G__12653__i = 0, G__12653__a = new Array(arguments.length - 2);
          while (G__12653__i < G__12653__a.length) {
            G__12653__a[G__12653__i] = arguments[G__12653__i + 2];
            ++G__12653__i;
          }
          G__12652 = new cljs.core.IndexedSeq(G__12653__a, 0);
        }
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12652);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var list_STAR___5 = function() {
    var G__12654__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__12654 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__12655__i = 0, G__12655__a = new Array(arguments.length - 4);
        while (G__12655__i < G__12655__a.length) {
          G__12655__a[G__12655__i] = arguments[G__12655__i + 4];
          ++G__12655__i;
        }
        more = new cljs.core.IndexedSeq(G__12655__a, 0);
      }
      return G__12654__delegate.call(this, a, b, c, d, more);
    };
    G__12654.cljs$lang$maxFixedArity = 4;
    G__12654.cljs$lang$applyTo = function(arglist__12656) {
      var a = cljs.core.first(arglist__12656);
      arglist__12656 = cljs.core.next(arglist__12656);
      var b = cljs.core.first(arglist__12656);
      arglist__12656 = cljs.core.next(arglist__12656);
      var c = cljs.core.first(arglist__12656);
      arglist__12656 = cljs.core.next(arglist__12656);
      var d = cljs.core.first(arglist__12656);
      var more = cljs.core.rest(arglist__12656);
      return G__12654__delegate(a, b, c, d, more);
    };
    G__12654.cljs$core$IFn$_invoke$arity$variadic = G__12654__delegate;
    return G__12654;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        var G__12657 = null;
        if (arguments.length > 4) {
          var G__12658__i = 0, G__12658__a = new Array(arguments.length - 4);
          while (G__12658__i < G__12658__a.length) {
            G__12658__a[G__12658__i] = arguments[G__12658__i + 4];
            ++G__12658__i;
          }
          G__12657 = new cljs.core.IndexedSeq(G__12658__a, 0);
        }
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__12657);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__12659__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__12660 = ntcoll;
          var G__12661 = cljs.core.first(vals);
          var G__12662 = cljs.core.next(vals);
          tcoll = G__12660;
          val = G__12661;
          vals = G__12662;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__12659 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__12663__i = 0, G__12663__a = new Array(arguments.length - 2);
        while (G__12663__i < G__12663__a.length) {
          G__12663__a[G__12663__i] = arguments[G__12663__i + 2];
          ++G__12663__i;
        }
        vals = new cljs.core.IndexedSeq(G__12663__a, 0);
      }
      return G__12659__delegate.call(this, tcoll, val, vals);
    };
    G__12659.cljs$lang$maxFixedArity = 2;
    G__12659.cljs$lang$applyTo = function(arglist__12664) {
      var tcoll = cljs.core.first(arglist__12664);
      arglist__12664 = cljs.core.next(arglist__12664);
      var val = cljs.core.first(arglist__12664);
      var vals = cljs.core.rest(arglist__12664);
      return G__12659__delegate(tcoll, val, vals);
    };
    G__12659.cljs$core$IFn$_invoke$arity$variadic = G__12659__delegate;
    return G__12659;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        var G__12665 = null;
        if (arguments.length > 2) {
          var G__12666__i = 0, G__12666__a = new Array(arguments.length - 2);
          while (G__12666__i < G__12666__a.length) {
            G__12666__a[G__12666__i] = arguments[G__12666__i + 2];
            ++G__12666__i;
          }
          G__12665 = new cljs.core.IndexedSeq(G__12666__a, 0);
        }
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__12665);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__12667__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__12668 = ntcoll;
          var G__12669 = cljs.core.first(kvs);
          var G__12670 = cljs.core.second(kvs);
          var G__12671 = cljs.core.nnext(kvs);
          tcoll = G__12668;
          key = G__12669;
          val = G__12670;
          kvs = G__12671;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__12667 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__12672__i = 0, G__12672__a = new Array(arguments.length - 3);
        while (G__12672__i < G__12672__a.length) {
          G__12672__a[G__12672__i] = arguments[G__12672__i + 3];
          ++G__12672__i;
        }
        kvs = new cljs.core.IndexedSeq(G__12672__a, 0);
      }
      return G__12667__delegate.call(this, tcoll, key, val, kvs);
    };
    G__12667.cljs$lang$maxFixedArity = 3;
    G__12667.cljs$lang$applyTo = function(arglist__12673) {
      var tcoll = cljs.core.first(arglist__12673);
      arglist__12673 = cljs.core.next(arglist__12673);
      var key = cljs.core.first(arglist__12673);
      arglist__12673 = cljs.core.next(arglist__12673);
      var val = cljs.core.first(arglist__12673);
      var kvs = cljs.core.rest(arglist__12673);
      return G__12667__delegate(tcoll, key, val, kvs);
    };
    G__12667.cljs$core$IFn$_invoke$arity$variadic = G__12667__delegate;
    return G__12667;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__12674 = null;
        if (arguments.length > 3) {
          var G__12675__i = 0, G__12675__a = new Array(arguments.length - 3);
          while (G__12675__i < G__12675__a.length) {
            G__12675__a[G__12675__i] = arguments[G__12675__i + 3];
            ++G__12675__i;
          }
          G__12674 = new cljs.core.IndexedSeq(G__12675__a, 0);
        }
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__12674);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__12676__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__12677 = ntcoll;
          var G__12678 = cljs.core.first(ks);
          var G__12679 = cljs.core.next(ks);
          tcoll = G__12677;
          key = G__12678;
          ks = G__12679;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__12676 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__12680__i = 0, G__12680__a = new Array(arguments.length - 2);
        while (G__12680__i < G__12680__a.length) {
          G__12680__a[G__12680__i] = arguments[G__12680__i + 2];
          ++G__12680__i;
        }
        ks = new cljs.core.IndexedSeq(G__12680__a, 0);
      }
      return G__12676__delegate.call(this, tcoll, key, ks);
    };
    G__12676.cljs$lang$maxFixedArity = 2;
    G__12676.cljs$lang$applyTo = function(arglist__12681) {
      var tcoll = cljs.core.first(arglist__12681);
      arglist__12681 = cljs.core.next(arglist__12681);
      var key = cljs.core.first(arglist__12681);
      var ks = cljs.core.rest(arglist__12681);
      return G__12676__delegate(tcoll, key, ks);
    };
    G__12676.cljs$core$IFn$_invoke$arity$variadic = G__12676__delegate;
    return G__12676;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__12682 = null;
        if (arguments.length > 2) {
          var G__12683__i = 0, G__12683__a = new Array(arguments.length - 2);
          while (G__12683__i < G__12683__a.length) {
            G__12683__a[G__12683__i] = arguments[G__12683__i + 2];
            ++G__12683__i;
          }
          G__12682 = new cljs.core.IndexedSeq(G__12683__a, 0);
        }
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__12682);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__12684__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__12685 = ntcoll;
          var G__12686 = cljs.core.first(vals);
          var G__12687 = cljs.core.next(vals);
          tcoll = G__12685;
          val = G__12686;
          vals = G__12687;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__12684 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__12688__i = 0, G__12688__a = new Array(arguments.length - 2);
        while (G__12688__i < G__12688__a.length) {
          G__12688__a[G__12688__i] = arguments[G__12688__i + 2];
          ++G__12688__i;
        }
        vals = new cljs.core.IndexedSeq(G__12688__a, 0);
      }
      return G__12684__delegate.call(this, tcoll, val, vals);
    };
    G__12684.cljs$lang$maxFixedArity = 2;
    G__12684.cljs$lang$applyTo = function(arglist__12689) {
      var tcoll = cljs.core.first(arglist__12689);
      arglist__12689 = cljs.core.next(arglist__12689);
      var val = cljs.core.first(arglist__12689);
      var vals = cljs.core.rest(arglist__12689);
      return G__12684__delegate(tcoll, val, vals);
    };
    G__12684.cljs$core$IFn$_invoke$arity$variadic = G__12684__delegate;
    return G__12684;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        var G__12690 = null;
        if (arguments.length > 2) {
          var G__12691__i = 0, G__12691__a = new Array(arguments.length - 2);
          while (G__12691__i < G__12691__a.length) {
            G__12691__a[G__12691__i] = arguments[G__12691__i + 2];
            ++G__12691__i;
          }
          G__12690 = new cljs.core.IndexedSeq(G__12691__a, 0);
        }
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__12690);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5156 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5156);
      } else {
        var G__12902 = a5156;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__12902) : f.call(null, G__12902);
      }
    } else {
      var b5157 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5156, b5157);
        } else {
          var G__12903 = a5156;
          var G__12904 = b5157;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12903, G__12904) : f.call(null, G__12903, G__12904);
        }
      } else {
        var c5158 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5156, b5157, c5158);
          } else {
            var G__12905 = a5156;
            var G__12906 = b5157;
            var G__12907 = c5158;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__12905, G__12906, G__12907) : f.call(null, G__12905, G__12906, G__12907);
          }
        } else {
          var d5159 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5156, b5157, c5158, d5159);
            } else {
              var G__12908 = a5156;
              var G__12909 = b5157;
              var G__12910 = c5158;
              var G__12911 = d5159;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__12908, G__12909, G__12910, G__12911) : f.call(null, G__12908, G__12909, G__12910, G__12911);
            }
          } else {
            var e5160 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5156, b5157, c5158, d5159, e5160);
              } else {
                var G__12912 = a5156;
                var G__12913 = b5157;
                var G__12914 = c5158;
                var G__12915 = d5159;
                var G__12916 = e5160;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__12912, G__12913, G__12914, G__12915, G__12916) : f.call(null, G__12912, G__12913, G__12914, G__12915, G__12916);
              }
            } else {
              var f5161 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5156, b5157, c5158, d5159, e5160, f5161);
                } else {
                  var G__12917 = a5156;
                  var G__12918 = b5157;
                  var G__12919 = c5158;
                  var G__12920 = d5159;
                  var G__12921 = e5160;
                  var G__12922 = f5161;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__12917, G__12918, G__12919, G__12920, G__12921, G__12922) : f.call(null, G__12917, G__12918, G__12919, G__12920, G__12921, G__12922);
                }
              } else {
                var g5162 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5156, b5157, c5158, d5159, e5160, f5161, g5162);
                  } else {
                    var G__12923 = a5156;
                    var G__12924 = b5157;
                    var G__12925 = c5158;
                    var G__12926 = d5159;
                    var G__12927 = e5160;
                    var G__12928 = f5161;
                    var G__12929 = g5162;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__12923, G__12924, G__12925, G__12926, G__12927, G__12928, G__12929) : f.call(null, G__12923, G__12924, G__12925, G__12926, G__12927, G__12928, G__12929);
                  }
                } else {
                  var h5163 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163);
                    } else {
                      var G__12930 = a5156;
                      var G__12931 = b5157;
                      var G__12932 = c5158;
                      var G__12933 = d5159;
                      var G__12934 = e5160;
                      var G__12935 = f5161;
                      var G__12936 = g5162;
                      var G__12937 = h5163;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__12930, G__12931, G__12932, G__12933, G__12934, G__12935, G__12936, G__12937) : f.call(null, G__12930, G__12931, G__12932, G__12933, G__12934, G__12935, G__12936, G__12937);
                    }
                  } else {
                    var i5164 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164);
                      } else {
                        var G__12938 = a5156;
                        var G__12939 = b5157;
                        var G__12940 = c5158;
                        var G__12941 = d5159;
                        var G__12942 = e5160;
                        var G__12943 = f5161;
                        var G__12944 = g5162;
                        var G__12945 = h5163;
                        var G__12946 = i5164;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__12938, G__12939, G__12940, G__12941, G__12942, G__12943, G__12944, G__12945, G__12946) : f.call(null, G__12938, G__12939, G__12940, G__12941, G__12942, G__12943, G__12944, G__12945, G__12946);
                      }
                    } else {
                      var j5165 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165);
                        } else {
                          var G__12947 = a5156;
                          var G__12948 = b5157;
                          var G__12949 = c5158;
                          var G__12950 = d5159;
                          var G__12951 = e5160;
                          var G__12952 = f5161;
                          var G__12953 = g5162;
                          var G__12954 = h5163;
                          var G__12955 = i5164;
                          var G__12956 = j5165;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__12947, G__12948, G__12949, G__12950, G__12951, G__12952, G__12953, G__12954, G__12955, G__12956) : f.call(null, G__12947, G__12948, G__12949, G__12950, G__12951, G__12952, G__12953, G__12954, G__12955, G__12956);
                        }
                      } else {
                        var k5166 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166);
                          } else {
                            var G__12957 = a5156;
                            var G__12958 = b5157;
                            var G__12959 = c5158;
                            var G__12960 = d5159;
                            var G__12961 = e5160;
                            var G__12962 = f5161;
                            var G__12963 = g5162;
                            var G__12964 = h5163;
                            var G__12965 = i5164;
                            var G__12966 = j5165;
                            var G__12967 = k5166;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__12957, G__12958, G__12959, G__12960, G__12961, G__12962, G__12963, G__12964, G__12965, G__12966, G__12967) : f.call(null, G__12957, G__12958, G__12959, G__12960, G__12961, G__12962, G__12963, G__12964, G__12965, G__12966, G__12967);
                          }
                        } else {
                          var l5167 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167);
                            } else {
                              var G__12968 = a5156;
                              var G__12969 = b5157;
                              var G__12970 = c5158;
                              var G__12971 = d5159;
                              var G__12972 = e5160;
                              var G__12973 = f5161;
                              var G__12974 = g5162;
                              var G__12975 = h5163;
                              var G__12976 = i5164;
                              var G__12977 = j5165;
                              var G__12978 = k5166;
                              var G__12979 = l5167;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__12968, G__12969, G__12970, G__12971, G__12972, G__12973, G__12974, G__12975, G__12976, G__12977, G__12978, G__12979) : f.call(null, G__12968, G__12969, G__12970, G__12971, G__12972, G__12973, G__12974, G__12975, G__12976, G__12977, G__12978, G__12979);
                            }
                          } else {
                            var m5168 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168);
                              } else {
                                var G__12980 = a5156;
                                var G__12981 = b5157;
                                var G__12982 = c5158;
                                var G__12983 = d5159;
                                var G__12984 = e5160;
                                var G__12985 = f5161;
                                var G__12986 = g5162;
                                var G__12987 = h5163;
                                var G__12988 = i5164;
                                var G__12989 = j5165;
                                var G__12990 = k5166;
                                var G__12991 = l5167;
                                var G__12992 = m5168;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__12980, G__12981, G__12982, G__12983, G__12984, G__12985, G__12986, G__12987, G__12988, G__12989, G__12990, G__12991, G__12992) : f.call(null, G__12980, G__12981, G__12982, G__12983, G__12984, G__12985, G__12986, G__12987, G__12988, G__12989, G__12990, G__12991, G__12992);
                              }
                            } else {
                              var n5169 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169);
                                } else {
                                  var G__12993 = a5156;
                                  var G__12994 = b5157;
                                  var G__12995 = c5158;
                                  var G__12996 = d5159;
                                  var G__12997 = e5160;
                                  var G__12998 = f5161;
                                  var G__12999 = g5162;
                                  var G__13000 = h5163;
                                  var G__13001 = i5164;
                                  var G__13002 = j5165;
                                  var G__13003 = k5166;
                                  var G__13004 = l5167;
                                  var G__13005 = m5168;
                                  var G__13006 = n5169;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__12993, G__12994, G__12995, G__12996, G__12997, G__12998, G__12999, G__13000, G__13001, G__13002, G__13003, G__13004, G__13005, G__13006) : f.call(null, G__12993, G__12994, G__12995, G__12996, G__12997, G__12998, G__12999, G__13000, G__13001, G__13002, G__13003, G__13004, G__13005, G__13006);
                                }
                              } else {
                                var o5170 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169, o5170);
                                  } else {
                                    var G__13007 = a5156;
                                    var G__13008 = b5157;
                                    var G__13009 = c5158;
                                    var G__13010 = d5159;
                                    var G__13011 = e5160;
                                    var G__13012 = f5161;
                                    var G__13013 = g5162;
                                    var G__13014 = h5163;
                                    var G__13015 = i5164;
                                    var G__13016 = j5165;
                                    var G__13017 = k5166;
                                    var G__13018 = l5167;
                                    var G__13019 = m5168;
                                    var G__13020 = n5169;
                                    var G__13021 = o5170;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__13007, G__13008, G__13009, G__13010, G__13011, G__13012, G__13013, G__13014, G__13015, G__13016, G__13017, G__13018, G__13019, G__13020, G__13021) : f.call(null, G__13007, G__13008, G__13009, G__13010, G__13011, G__13012, G__13013, G__13014, G__13015, G__13016, G__13017, G__13018, G__13019, G__13020, G__13021);
                                  }
                                } else {
                                  var p5171 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169, o5170, p5171);
                                    } else {
                                      var G__13022 = a5156;
                                      var G__13023 = b5157;
                                      var G__13024 = c5158;
                                      var G__13025 = d5159;
                                      var G__13026 = e5160;
                                      var G__13027 = f5161;
                                      var G__13028 = g5162;
                                      var G__13029 = h5163;
                                      var G__13030 = i5164;
                                      var G__13031 = j5165;
                                      var G__13032 = k5166;
                                      var G__13033 = l5167;
                                      var G__13034 = m5168;
                                      var G__13035 = n5169;
                                      var G__13036 = o5170;
                                      var G__13037 = p5171;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__13022, G__13023, G__13024, G__13025, G__13026, G__13027, G__13028, G__13029, G__13030, G__13031, G__13032, G__13033, G__13034, G__13035, G__13036, G__13037) : f.call(null, G__13022, G__13023, G__13024, G__13025, G__13026, G__13027, G__13028, G__13029, G__13030, G__13031, G__13032, G__13033, G__13034, G__13035, G__13036, G__13037);
                                    }
                                  } else {
                                    var q5172 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169, o5170, p5171, q5172);
                                      } else {
                                        var G__13038 = a5156;
                                        var G__13039 = b5157;
                                        var G__13040 = c5158;
                                        var G__13041 = d5159;
                                        var G__13042 = e5160;
                                        var G__13043 = f5161;
                                        var G__13044 = g5162;
                                        var G__13045 = h5163;
                                        var G__13046 = i5164;
                                        var G__13047 = j5165;
                                        var G__13048 = k5166;
                                        var G__13049 = l5167;
                                        var G__13050 = m5168;
                                        var G__13051 = n5169;
                                        var G__13052 = o5170;
                                        var G__13053 = p5171;
                                        var G__13054 = q5172;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__13038, G__13039, G__13040, G__13041, G__13042, G__13043, G__13044, G__13045, G__13046, G__13047, G__13048, G__13049, G__13050, G__13051, G__13052, G__13053, G__13054) : f.call(null, G__13038, G__13039, G__13040, G__13041, G__13042, G__13043, G__13044, G__13045, G__13046, G__13047, G__13048, G__13049, G__13050, G__13051, G__13052, G__13053, G__13054);
                                      }
                                    } else {
                                      var r5173 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169, o5170, p5171, q5172, r5173);
                                        } else {
                                          var G__13055 = a5156;
                                          var G__13056 = b5157;
                                          var G__13057 = c5158;
                                          var G__13058 = d5159;
                                          var G__13059 = e5160;
                                          var G__13060 = f5161;
                                          var G__13061 = g5162;
                                          var G__13062 = h5163;
                                          var G__13063 = i5164;
                                          var G__13064 = j5165;
                                          var G__13065 = k5166;
                                          var G__13066 = l5167;
                                          var G__13067 = m5168;
                                          var G__13068 = n5169;
                                          var G__13069 = o5170;
                                          var G__13070 = p5171;
                                          var G__13071 = q5172;
                                          var G__13072 = r5173;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__13055, G__13056, G__13057, G__13058, G__13059, G__13060, G__13061, G__13062, G__13063, G__13064, G__13065, G__13066, G__13067, G__13068, G__13069, G__13070, G__13071, G__13072) : f.call(null, G__13055, G__13056, G__13057, G__13058, G__13059, G__13060, G__13061, G__13062, G__13063, G__13064, G__13065, G__13066, G__13067, G__13068, G__13069, G__13070, G__13071, G__13072);
                                        }
                                      } else {
                                        var s5174 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169, o5170, p5171, q5172, r5173, s5174);
                                          } else {
                                            var G__13073 = a5156;
                                            var G__13074 = b5157;
                                            var G__13075 = c5158;
                                            var G__13076 = d5159;
                                            var G__13077 = e5160;
                                            var G__13078 = f5161;
                                            var G__13079 = g5162;
                                            var G__13080 = h5163;
                                            var G__13081 = i5164;
                                            var G__13082 = j5165;
                                            var G__13083 = k5166;
                                            var G__13084 = l5167;
                                            var G__13085 = m5168;
                                            var G__13086 = n5169;
                                            var G__13087 = o5170;
                                            var G__13088 = p5171;
                                            var G__13089 = q5172;
                                            var G__13090 = r5173;
                                            var G__13091 = s5174;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__13073, G__13074, G__13075, G__13076, G__13077, G__13078, G__13079, G__13080, G__13081, G__13082, G__13083, G__13084, G__13085, G__13086, G__13087, G__13088, G__13089, G__13090, G__13091) : f.call(null, G__13073, G__13074, G__13075, G__13076, G__13077, G__13078, G__13079, G__13080, G__13081, G__13082, G__13083, G__13084, G__13085, G__13086, G__13087, G__13088, G__13089, G__13090, 
                                            G__13091);
                                          }
                                        } else {
                                          var t5175 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5156, b5157, c5158, d5159, e5160, f5161, g5162, h5163, i5164, j5165, k5166, l5167, m5168, n5169, o5170, p5171, q5172, r5173, s5174, t5175);
                                            } else {
                                              var G__13092 = a5156;
                                              var G__13093 = b5157;
                                              var G__13094 = c5158;
                                              var G__13095 = d5159;
                                              var G__13096 = e5160;
                                              var G__13097 = f5161;
                                              var G__13098 = g5162;
                                              var G__13099 = h5163;
                                              var G__13100 = i5164;
                                              var G__13101 = j5165;
                                              var G__13102 = k5166;
                                              var G__13103 = l5167;
                                              var G__13104 = m5168;
                                              var G__13105 = n5169;
                                              var G__13106 = o5170;
                                              var G__13107 = p5171;
                                              var G__13108 = q5172;
                                              var G__13109 = r5173;
                                              var G__13110 = s5174;
                                              var G__13111 = t5175;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__13092, G__13093, G__13094, G__13095, G__13096, G__13097, G__13098, G__13099, G__13100, G__13101, G__13102, G__13103, G__13104, G__13105, G__13106, G__13107, G__13108, G__13109, G__13110, G__13111) : f.call(null, G__13092, G__13093, G__13094, G__13095, G__13096, G__13097, G__13098, G__13099, G__13100, G__13101, G__13102, G__13103, G__13104, G__13105, G__13106, G__13107, G__13108, 
                                              G__13109, G__13110, G__13111);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__6 = function() {
    var G__13112__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__13112 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__13113__i = 0, G__13113__a = new Array(arguments.length - 5);
        while (G__13113__i < G__13113__a.length) {
          G__13113__a[G__13113__i] = arguments[G__13113__i + 5];
          ++G__13113__i;
        }
        args = new cljs.core.IndexedSeq(G__13113__a, 0);
      }
      return G__13112__delegate.call(this, f, a, b, c, d, args);
    };
    G__13112.cljs$lang$maxFixedArity = 5;
    G__13112.cljs$lang$applyTo = function(arglist__13114) {
      var f = cljs.core.first(arglist__13114);
      arglist__13114 = cljs.core.next(arglist__13114);
      var a = cljs.core.first(arglist__13114);
      arglist__13114 = cljs.core.next(arglist__13114);
      var b = cljs.core.first(arglist__13114);
      arglist__13114 = cljs.core.next(arglist__13114);
      var c = cljs.core.first(arglist__13114);
      arglist__13114 = cljs.core.next(arglist__13114);
      var d = cljs.core.first(arglist__13114);
      var args = cljs.core.rest(arglist__13114);
      return G__13112__delegate(f, a, b, c, d, args);
    };
    G__13112.cljs$core$IFn$_invoke$arity$variadic = G__13112__delegate;
    return G__13112;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        var G__13115 = null;
        if (arguments.length > 5) {
          var G__13116__i = 0, G__13116__a = new Array(arguments.length - 5);
          while (G__13116__i < G__13116__a.length) {
            G__13116__a[G__13116__i] = arguments[G__13116__i + 5];
            ++G__13116__i;
          }
          G__13115 = new cljs.core.IndexedSeq(G__13116__a, 0);
        }
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__13115);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__13132 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13132) : f.call(null, G__13132);
    }());
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__13133 = cljs.core.meta(obj);
      var G__13134 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13133, G__13134) : f.call(null, G__13133, G__13134);
    }());
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__13135 = cljs.core.meta(obj);
      var G__13136 = a;
      var G__13137 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13135, G__13136, G__13137) : f.call(null, G__13135, G__13136, G__13137);
    }());
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__13138 = cljs.core.meta(obj);
      var G__13139 = a;
      var G__13140 = b;
      var G__13141 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13138, G__13139, G__13140, G__13141) : f.call(null, G__13138, G__13139, G__13140, G__13141);
    }());
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__13142 = cljs.core.meta(obj);
      var G__13143 = a;
      var G__13144 = b;
      var G__13145 = c;
      var G__13146 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__13142, G__13143, G__13144, G__13145, G__13146) : f.call(null, G__13142, G__13143, G__13144, G__13145, G__13146);
    }());
  };
  var vary_meta__7 = function() {
    var G__13147__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__13147 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__13148__i = 0, G__13148__a = new Array(arguments.length - 6);
        while (G__13148__i < G__13148__a.length) {
          G__13148__a[G__13148__i] = arguments[G__13148__i + 6];
          ++G__13148__i;
        }
        args = new cljs.core.IndexedSeq(G__13148__a, 0);
      }
      return G__13147__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__13147.cljs$lang$maxFixedArity = 6;
    G__13147.cljs$lang$applyTo = function(arglist__13149) {
      var obj = cljs.core.first(arglist__13149);
      arglist__13149 = cljs.core.next(arglist__13149);
      var f = cljs.core.first(arglist__13149);
      arglist__13149 = cljs.core.next(arglist__13149);
      var a = cljs.core.first(arglist__13149);
      arglist__13149 = cljs.core.next(arglist__13149);
      var b = cljs.core.first(arglist__13149);
      arglist__13149 = cljs.core.next(arglist__13149);
      var c = cljs.core.first(arglist__13149);
      arglist__13149 = cljs.core.next(arglist__13149);
      var d = cljs.core.first(arglist__13149);
      var args = cljs.core.rest(arglist__13149);
      return G__13147__delegate(obj, f, a, b, c, d, args);
    };
    G__13147.cljs$core$IFn$_invoke$arity$variadic = G__13147__delegate;
    return G__13147;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__13150 = null;
        if (arguments.length > 6) {
          var G__13151__i = 0, G__13151__a = new Array(arguments.length - 6);
          while (G__13151__i < G__13151__a.length) {
            G__13151__a[G__13151__i] = arguments[G__13151__i + 6];
            ++G__13151__i;
          }
          G__13150 = new cljs.core.IndexedSeq(G__13151__a, 0);
        }
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__13150);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var not_EQ___3 = function() {
    var G__13152__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__13152 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13153__i = 0, G__13153__a = new Array(arguments.length - 2);
        while (G__13153__i < G__13153__a.length) {
          G__13153__a[G__13153__i] = arguments[G__13153__i + 2];
          ++G__13153__i;
        }
        more = new cljs.core.IndexedSeq(G__13153__a, 0);
      }
      return G__13152__delegate.call(this, x, y, more);
    };
    G__13152.cljs$lang$maxFixedArity = 2;
    G__13152.cljs$lang$applyTo = function(arglist__13154) {
      var x = cljs.core.first(arglist__13154);
      arglist__13154 = cljs.core.next(arglist__13154);
      var y = cljs.core.first(arglist__13154);
      var more = cljs.core.rest(arglist__13154);
      return G__13152__delegate(x, y, more);
    };
    G__13152.cljs$core$IFn$_invoke$arity$variadic = G__13152__delegate;
    return G__13152;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        var G__13155 = null;
        if (arguments.length > 2) {
          var G__13156__i = 0, G__13156__a = new Array(arguments.length - 2);
          while (G__13156__i < G__13156__a.length) {
            G__13156__a[G__13156__i] = arguments[G__13156__i + 2];
            ++G__13156__i;
          }
          G__13155 = new cljs.core.IndexedSeq(G__13156__a, 0);
        }
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13155);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t13160 !== "undefined") {
  } else {
    cljs.core.t13160 = function(nil_iter, meta13161) {
      this.nil_iter = nil_iter;
      this.meta13161 = meta13161;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t13160.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t13160.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t13160.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t13160.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13162) {
      var self__ = this;
      var _13162__$1 = this;
      return self__.meta13161;
    };
    cljs.core.t13160.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13162, meta13161__$1) {
      var self__ = this;
      var _13162__$1 = this;
      return new cljs.core.t13160(self__.nil_iter, meta13161__$1);
    };
    cljs.core.t13160.cljs$lang$type = true;
    cljs.core.t13160.cljs$lang$ctorStr = "cljs.core/t13160";
    cljs.core.t13160.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write(writer__4813__auto__, "cljs.core/t13160");
    };
    cljs.core.__GT_t13160 = function __GT_t13160(nil_iter__$1, meta13161) {
      return new cljs.core.t13160(nil_iter__$1, meta13161);
    };
  }
  return new cljs.core.t13160(nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = !(lt.stepper == null);
      if (and__4213__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4213__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__13163 = lt;
        var G__13164 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__13163, G__13164) : self__.xform.call(null, G__13163, G__13164);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__13165 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__13165) : self__.xform.call(null, G__13165);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__13167 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__13167) : xform.call(null, G__13167);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__13169 = cljs.core.next(iters__$1);
        iters__$1 = G__13169;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5112__auto___13170 = self__.iters.length;
  var i_13171 = 0;
  while (true) {
    if (i_13171 < n__5112__auto___13170) {
      self__.nexts[i_13171] = self__.iters[i_13171].next();
      var G__13172 = i_13171 + 1;
      i_13171 = G__13172;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = !(lt.stepper == null);
      if (and__4213__auto__) {
        return this$.hasNext();
      } else {
        return and__4213__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__13168 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__13168) : self__.xform.call(null, G__13168);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__13177 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__13177) : xform.call(null, G__13177);
    }(), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__13178_13182 = cljs.core.seq(colls);
  var chunk__13179_13183 = null;
  var count__13180_13184 = 0;
  var i__13181_13185 = 0;
  while (true) {
    if (i__13181_13185 < count__13180_13184) {
      var coll_13186 = chunk__13179_13183.cljs$core$IIndexed$_nth$arity$2(null, i__13181_13185);
      iters.push(cljs.core.iter(coll_13186));
      var G__13187 = seq__13178_13182;
      var G__13188 = chunk__13179_13183;
      var G__13189 = count__13180_13184;
      var G__13190 = i__13181_13185 + 1;
      seq__13178_13182 = G__13187;
      chunk__13179_13183 = G__13188;
      count__13180_13184 = G__13189;
      i__13181_13185 = G__13190;
      continue;
    } else {
      var temp__4126__auto___13191 = cljs.core.seq(seq__13178_13182);
      if (temp__4126__auto___13191) {
        var seq__13178_13192__$1 = temp__4126__auto___13191;
        if (cljs.core.chunked_seq_QMARK_(seq__13178_13192__$1)) {
          var c__5012__auto___13193 = cljs.core.chunk_first(seq__13178_13192__$1);
          var G__13194 = cljs.core.chunk_rest(seq__13178_13192__$1);
          var G__13195 = c__5012__auto___13193;
          var G__13196 = cljs.core.count(c__5012__auto___13193);
          var G__13197 = 0;
          seq__13178_13182 = G__13194;
          chunk__13179_13183 = G__13195;
          count__13180_13184 = G__13196;
          i__13181_13185 = G__13197;
          continue;
        } else {
          var coll_13198 = cljs.core.first(seq__13178_13192__$1);
          iters.push(cljs.core.iter(coll_13198));
          var G__13199 = cljs.core.next(seq__13178_13192__$1);
          var G__13200 = null;
          var G__13201 = 0;
          var G__13202 = 0;
          seq__13178_13182 = G__13199;
          chunk__13179_13183 = G__13200;
          count__13180_13184 = G__13201;
          i__13181_13185 = G__13202;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__4225__auto__ = cljs.core.seq(coll);
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__13203__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__13203 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__13204__i = 0, G__13204__a = new Array(arguments.length - 2);
        while (G__13204__i < G__13204__a.length) {
          G__13204__a[G__13204__i] = arguments[G__13204__i + 2];
          ++G__13204__i;
        }
        colls = new cljs.core.IndexedSeq(G__13204__a, 0);
      }
      return G__13203__delegate.call(this, xform, coll, colls);
    };
    G__13203.cljs$lang$maxFixedArity = 2;
    G__13203.cljs$lang$applyTo = function(arglist__13205) {
      var xform = cljs.core.first(arglist__13205);
      arglist__13205 = cljs.core.next(arglist__13205);
      var coll = cljs.core.first(arglist__13205);
      var colls = cljs.core.rest(arglist__13205);
      return G__13203__delegate(xform, coll, colls);
    };
    G__13203.cljs$core$IFn$_invoke$arity$variadic = G__13203__delegate;
    return G__13203;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        var G__13206 = null;
        if (arguments.length > 2) {
          var G__13207__i = 0, G__13207__a = new Array(arguments.length - 2);
          while (G__13207__i < G__13207__a.length) {
            G__13207__a[G__13207__i] = arguments[G__13207__i + 2];
            ++G__13207__i;
          }
          G__13206 = new cljs.core.IndexedSeq(G__13207__a, 0);
        }
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__13206);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__13209 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__13209) : pred.call(null, G__13209);
      }())) {
        var G__13210 = pred;
        var G__13211 = cljs.core.next(coll);
        pred = G__13210;
        coll = G__13211;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4225__auto__ = function() {
        var G__13215 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__13215) : pred.call(null, G__13215);
      }();
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        var G__13216 = pred;
        var G__13217 = cljs.core.next(coll);
        pred = G__13216;
        coll = G__13217;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__13224 = null;
    var G__13224__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__13224__1 = function(x) {
      return cljs.core.not(function() {
        var G__13221 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13221) : f.call(null, G__13221);
      }());
    };
    var G__13224__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__13222 = x;
        var G__13223 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13222, G__13223) : f.call(null, G__13222, G__13223);
      }());
    };
    var G__13224__3 = function() {
      var G__13225__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__13225 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__13226__i = 0, G__13226__a = new Array(arguments.length - 2);
          while (G__13226__i < G__13226__a.length) {
            G__13226__a[G__13226__i] = arguments[G__13226__i + 2];
            ++G__13226__i;
          }
          zs = new cljs.core.IndexedSeq(G__13226__a, 0);
        }
        return G__13225__delegate.call(this, x, y, zs);
      };
      G__13225.cljs$lang$maxFixedArity = 2;
      G__13225.cljs$lang$applyTo = function(arglist__13227) {
        var x = cljs.core.first(arglist__13227);
        arglist__13227 = cljs.core.next(arglist__13227);
        var y = cljs.core.first(arglist__13227);
        var zs = cljs.core.rest(arglist__13227);
        return G__13225__delegate(x, y, zs);
      };
      G__13225.cljs$core$IFn$_invoke$arity$variadic = G__13225__delegate;
      return G__13225;
    }();
    G__13224 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__13224__0.call(this);
        case 1:
          return G__13224__1.call(this, x);
        case 2:
          return G__13224__2.call(this, x, y);
        default:
          var G__13228 = null;
          if (arguments.length > 2) {
            var G__13229__i = 0, G__13229__a = new Array(arguments.length - 2);
            while (G__13229__i < G__13229__a.length) {
              G__13229__a[G__13229__i] = arguments[G__13229__i + 2];
              ++G__13229__i;
            }
            G__13228 = new cljs.core.IndexedSeq(G__13229__a, 0);
          }
          return G__13224__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13228);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__13224.cljs$lang$maxFixedArity = 2;
    G__13224.cljs$lang$applyTo = G__13224__3.cljs$lang$applyTo;
    G__13224.cljs$core$IFn$_invoke$arity$0 = G__13224__0;
    G__13224.cljs$core$IFn$_invoke$arity$1 = G__13224__1;
    G__13224.cljs$core$IFn$_invoke$arity$2 = G__13224__2;
    G__13224.cljs$core$IFn$_invoke$arity$variadic = G__13224__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__13224;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__13230__delegate = function(args) {
      return x;
    };
    var G__13230 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__13231__i = 0, G__13231__a = new Array(arguments.length - 0);
        while (G__13231__i < G__13231__a.length) {
          G__13231__a[G__13231__i] = arguments[G__13231__i + 0];
          ++G__13231__i;
        }
        args = new cljs.core.IndexedSeq(G__13231__a, 0);
      }
      return G__13230__delegate.call(this, args);
    };
    G__13230.cljs$lang$maxFixedArity = 0;
    G__13230.cljs$lang$applyTo = function(arglist__13232) {
      var args = cljs.core.seq(arglist__13232);
      return G__13230__delegate(args);
    };
    G__13230.cljs$core$IFn$_invoke$arity$variadic = G__13230__delegate;
    return G__13230;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__13287 = null;
      var G__13287__0 = function() {
        var G__13260 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13260) : f.call(null, G__13260);
      };
      var G__13287__1 = function(x) {
        var G__13261 = function() {
          var G__13262 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__13262) : g.call(null, G__13262);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13261) : f.call(null, G__13261);
      };
      var G__13287__2 = function(x, y) {
        var G__13263 = function() {
          var G__13264 = x;
          var G__13265 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__13264, G__13265) : g.call(null, G__13264, G__13265);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13263) : f.call(null, G__13263);
      };
      var G__13287__3 = function(x, y, z) {
        var G__13266 = function() {
          var G__13267 = x;
          var G__13268 = y;
          var G__13269 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__13267, G__13268, G__13269) : g.call(null, G__13267, G__13268, G__13269);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13266) : f.call(null, G__13266);
      };
      var G__13287__4 = function() {
        var G__13288__delegate = function(x, y, z, args) {
          var G__13270 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13270) : f.call(null, G__13270);
        };
        var G__13288 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__13289__i = 0, G__13289__a = new Array(arguments.length - 3);
            while (G__13289__i < G__13289__a.length) {
              G__13289__a[G__13289__i] = arguments[G__13289__i + 3];
              ++G__13289__i;
            }
            args = new cljs.core.IndexedSeq(G__13289__a, 0);
          }
          return G__13288__delegate.call(this, x, y, z, args);
        };
        G__13288.cljs$lang$maxFixedArity = 3;
        G__13288.cljs$lang$applyTo = function(arglist__13290) {
          var x = cljs.core.first(arglist__13290);
          arglist__13290 = cljs.core.next(arglist__13290);
          var y = cljs.core.first(arglist__13290);
          arglist__13290 = cljs.core.next(arglist__13290);
          var z = cljs.core.first(arglist__13290);
          var args = cljs.core.rest(arglist__13290);
          return G__13288__delegate(x, y, z, args);
        };
        G__13288.cljs$core$IFn$_invoke$arity$variadic = G__13288__delegate;
        return G__13288;
      }();
      G__13287 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13287__0.call(this);
          case 1:
            return G__13287__1.call(this, x);
          case 2:
            return G__13287__2.call(this, x, y);
          case 3:
            return G__13287__3.call(this, x, y, z);
          default:
            var G__13291 = null;
            if (arguments.length > 3) {
              var G__13292__i = 0, G__13292__a = new Array(arguments.length - 3);
              while (G__13292__i < G__13292__a.length) {
                G__13292__a[G__13292__i] = arguments[G__13292__i + 3];
                ++G__13292__i;
              }
              G__13291 = new cljs.core.IndexedSeq(G__13292__a, 0);
            }
            return G__13287__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__13291);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13287.cljs$lang$maxFixedArity = 3;
      G__13287.cljs$lang$applyTo = G__13287__4.cljs$lang$applyTo;
      G__13287.cljs$core$IFn$_invoke$arity$0 = G__13287__0;
      G__13287.cljs$core$IFn$_invoke$arity$1 = G__13287__1;
      G__13287.cljs$core$IFn$_invoke$arity$2 = G__13287__2;
      G__13287.cljs$core$IFn$_invoke$arity$3 = G__13287__3;
      G__13287.cljs$core$IFn$_invoke$arity$variadic = G__13287__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13287;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__13293 = null;
      var G__13293__0 = function() {
        var G__13271 = function() {
          var G__13272 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__13272) : g.call(null, G__13272);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13271) : f.call(null, G__13271);
      };
      var G__13293__1 = function(x) {
        var G__13273 = function() {
          var G__13274 = function() {
            var G__13275 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__13275) : h.call(null, G__13275);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__13274) : g.call(null, G__13274);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13273) : f.call(null, G__13273);
      };
      var G__13293__2 = function(x, y) {
        var G__13276 = function() {
          var G__13277 = function() {
            var G__13278 = x;
            var G__13279 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__13278, G__13279) : h.call(null, G__13278, G__13279);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__13277) : g.call(null, G__13277);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13276) : f.call(null, G__13276);
      };
      var G__13293__3 = function(x, y, z) {
        var G__13280 = function() {
          var G__13281 = function() {
            var G__13282 = x;
            var G__13283 = y;
            var G__13284 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__13282, G__13283, G__13284) : h.call(null, G__13282, G__13283, G__13284);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__13281) : g.call(null, G__13281);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13280) : f.call(null, G__13280);
      };
      var G__13293__4 = function() {
        var G__13294__delegate = function(x, y, z, args) {
          var G__13285 = function() {
            var G__13286 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__13286) : g.call(null, G__13286);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13285) : f.call(null, G__13285);
        };
        var G__13294 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__13295__i = 0, G__13295__a = new Array(arguments.length - 3);
            while (G__13295__i < G__13295__a.length) {
              G__13295__a[G__13295__i] = arguments[G__13295__i + 3];
              ++G__13295__i;
            }
            args = new cljs.core.IndexedSeq(G__13295__a, 0);
          }
          return G__13294__delegate.call(this, x, y, z, args);
        };
        G__13294.cljs$lang$maxFixedArity = 3;
        G__13294.cljs$lang$applyTo = function(arglist__13296) {
          var x = cljs.core.first(arglist__13296);
          arglist__13296 = cljs.core.next(arglist__13296);
          var y = cljs.core.first(arglist__13296);
          arglist__13296 = cljs.core.next(arglist__13296);
          var z = cljs.core.first(arglist__13296);
          var args = cljs.core.rest(arglist__13296);
          return G__13294__delegate(x, y, z, args);
        };
        G__13294.cljs$core$IFn$_invoke$arity$variadic = G__13294__delegate;
        return G__13294;
      }();
      G__13293 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13293__0.call(this);
          case 1:
            return G__13293__1.call(this, x);
          case 2:
            return G__13293__2.call(this, x, y);
          case 3:
            return G__13293__3.call(this, x, y, z);
          default:
            var G__13297 = null;
            if (arguments.length > 3) {
              var G__13298__i = 0, G__13298__a = new Array(arguments.length - 3);
              while (G__13298__i < G__13298__a.length) {
                G__13298__a[G__13298__i] = arguments[G__13298__i + 3];
                ++G__13298__i;
              }
              G__13297 = new cljs.core.IndexedSeq(G__13298__a, 0);
            }
            return G__13293__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__13297);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13293.cljs$lang$maxFixedArity = 3;
      G__13293.cljs$lang$applyTo = G__13293__4.cljs$lang$applyTo;
      G__13293.cljs$core$IFn$_invoke$arity$0 = G__13293__0;
      G__13293.cljs$core$IFn$_invoke$arity$1 = G__13293__1;
      G__13293.cljs$core$IFn$_invoke$arity$2 = G__13293__2;
      G__13293.cljs$core$IFn$_invoke$arity$3 = G__13293__3;
      G__13293.cljs$core$IFn$_invoke$arity$variadic = G__13293__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13293;
    }();
  };
  var comp__4 = function() {
    var G__13299__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__13300__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__13301 = cljs.core.first(fs__$2).call(null, ret);
                var G__13302 = cljs.core.next(fs__$2);
                ret = G__13301;
                fs__$2 = G__13302;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__13300 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__13303__i = 0, G__13303__a = new Array(arguments.length - 0);
              while (G__13303__i < G__13303__a.length) {
                G__13303__a[G__13303__i] = arguments[G__13303__i + 0];
                ++G__13303__i;
              }
              args = new cljs.core.IndexedSeq(G__13303__a, 0);
            }
            return G__13300__delegate.call(this, args);
          };
          G__13300.cljs$lang$maxFixedArity = 0;
          G__13300.cljs$lang$applyTo = function(arglist__13304) {
            var args = cljs.core.seq(arglist__13304);
            return G__13300__delegate(args);
          };
          G__13300.cljs$core$IFn$_invoke$arity$variadic = G__13300__delegate;
          return G__13300;
        }();
      }(fs__$1);
    };
    var G__13299 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__13305__i = 0, G__13305__a = new Array(arguments.length - 3);
        while (G__13305__i < G__13305__a.length) {
          G__13305__a[G__13305__i] = arguments[G__13305__i + 3];
          ++G__13305__i;
        }
        fs = new cljs.core.IndexedSeq(G__13305__a, 0);
      }
      return G__13299__delegate.call(this, f1, f2, f3, fs);
    };
    G__13299.cljs$lang$maxFixedArity = 3;
    G__13299.cljs$lang$applyTo = function(arglist__13306) {
      var f1 = cljs.core.first(arglist__13306);
      arglist__13306 = cljs.core.next(arglist__13306);
      var f2 = cljs.core.first(arglist__13306);
      arglist__13306 = cljs.core.next(arglist__13306);
      var f3 = cljs.core.first(arglist__13306);
      var fs = cljs.core.rest(arglist__13306);
      return G__13299__delegate(f1, f2, f3, fs);
    };
    G__13299.cljs$core$IFn$_invoke$arity$variadic = G__13299__delegate;
    return G__13299;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        var G__13307 = null;
        if (arguments.length > 3) {
          var G__13308__i = 0, G__13308__a = new Array(arguments.length - 3);
          while (G__13308__i < G__13308__a.length) {
            G__13308__a[G__13308__i] = arguments[G__13308__i + 3];
            ++G__13308__i;
          }
          G__13307 = new cljs.core.IndexedSeq(G__13308__a, 0);
        }
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__13307);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__13393 = null;
      var G__13393__0 = function() {
        var G__13351 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13351) : f.call(null, G__13351);
      };
      var G__13393__1 = function(x) {
        var G__13352 = arg1;
        var G__13353 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13352, G__13353) : f.call(null, G__13352, G__13353);
      };
      var G__13393__2 = function(x, y) {
        var G__13354 = arg1;
        var G__13355 = x;
        var G__13356 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13354, G__13355, G__13356) : f.call(null, G__13354, G__13355, G__13356);
      };
      var G__13393__3 = function(x, y, z) {
        var G__13357 = arg1;
        var G__13358 = x;
        var G__13359 = y;
        var G__13360 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13357, G__13358, G__13359, G__13360) : f.call(null, G__13357, G__13358, G__13359, G__13360);
      };
      var G__13393__4 = function() {
        var G__13394__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__13394 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__13395__i = 0, G__13395__a = new Array(arguments.length - 3);
            while (G__13395__i < G__13395__a.length) {
              G__13395__a[G__13395__i] = arguments[G__13395__i + 3];
              ++G__13395__i;
            }
            args = new cljs.core.IndexedSeq(G__13395__a, 0);
          }
          return G__13394__delegate.call(this, x, y, z, args);
        };
        G__13394.cljs$lang$maxFixedArity = 3;
        G__13394.cljs$lang$applyTo = function(arglist__13396) {
          var x = cljs.core.first(arglist__13396);
          arglist__13396 = cljs.core.next(arglist__13396);
          var y = cljs.core.first(arglist__13396);
          arglist__13396 = cljs.core.next(arglist__13396);
          var z = cljs.core.first(arglist__13396);
          var args = cljs.core.rest(arglist__13396);
          return G__13394__delegate(x, y, z, args);
        };
        G__13394.cljs$core$IFn$_invoke$arity$variadic = G__13394__delegate;
        return G__13394;
      }();
      G__13393 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13393__0.call(this);
          case 1:
            return G__13393__1.call(this, x);
          case 2:
            return G__13393__2.call(this, x, y);
          case 3:
            return G__13393__3.call(this, x, y, z);
          default:
            var G__13397 = null;
            if (arguments.length > 3) {
              var G__13398__i = 0, G__13398__a = new Array(arguments.length - 3);
              while (G__13398__i < G__13398__a.length) {
                G__13398__a[G__13398__i] = arguments[G__13398__i + 3];
                ++G__13398__i;
              }
              G__13397 = new cljs.core.IndexedSeq(G__13398__a, 0);
            }
            return G__13393__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__13397);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13393.cljs$lang$maxFixedArity = 3;
      G__13393.cljs$lang$applyTo = G__13393__4.cljs$lang$applyTo;
      G__13393.cljs$core$IFn$_invoke$arity$0 = G__13393__0;
      G__13393.cljs$core$IFn$_invoke$arity$1 = G__13393__1;
      G__13393.cljs$core$IFn$_invoke$arity$2 = G__13393__2;
      G__13393.cljs$core$IFn$_invoke$arity$3 = G__13393__3;
      G__13393.cljs$core$IFn$_invoke$arity$variadic = G__13393__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13393;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__13399 = null;
      var G__13399__0 = function() {
        var G__13361 = arg1;
        var G__13362 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13361, G__13362) : f.call(null, G__13361, G__13362);
      };
      var G__13399__1 = function(x) {
        var G__13363 = arg1;
        var G__13364 = arg2;
        var G__13365 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13363, G__13364, G__13365) : f.call(null, G__13363, G__13364, G__13365);
      };
      var G__13399__2 = function(x, y) {
        var G__13366 = arg1;
        var G__13367 = arg2;
        var G__13368 = x;
        var G__13369 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13366, G__13367, G__13368, G__13369) : f.call(null, G__13366, G__13367, G__13368, G__13369);
      };
      var G__13399__3 = function(x, y, z) {
        var G__13370 = arg1;
        var G__13371 = arg2;
        var G__13372 = x;
        var G__13373 = y;
        var G__13374 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__13370, G__13371, G__13372, G__13373, G__13374) : f.call(null, G__13370, G__13371, G__13372, G__13373, G__13374);
      };
      var G__13399__4 = function() {
        var G__13400__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__13400 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__13401__i = 0, G__13401__a = new Array(arguments.length - 3);
            while (G__13401__i < G__13401__a.length) {
              G__13401__a[G__13401__i] = arguments[G__13401__i + 3];
              ++G__13401__i;
            }
            args = new cljs.core.IndexedSeq(G__13401__a, 0);
          }
          return G__13400__delegate.call(this, x, y, z, args);
        };
        G__13400.cljs$lang$maxFixedArity = 3;
        G__13400.cljs$lang$applyTo = function(arglist__13402) {
          var x = cljs.core.first(arglist__13402);
          arglist__13402 = cljs.core.next(arglist__13402);
          var y = cljs.core.first(arglist__13402);
          arglist__13402 = cljs.core.next(arglist__13402);
          var z = cljs.core.first(arglist__13402);
          var args = cljs.core.rest(arglist__13402);
          return G__13400__delegate(x, y, z, args);
        };
        G__13400.cljs$core$IFn$_invoke$arity$variadic = G__13400__delegate;
        return G__13400;
      }();
      G__13399 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13399__0.call(this);
          case 1:
            return G__13399__1.call(this, x);
          case 2:
            return G__13399__2.call(this, x, y);
          case 3:
            return G__13399__3.call(this, x, y, z);
          default:
            var G__13403 = null;
            if (arguments.length > 3) {
              var G__13404__i = 0, G__13404__a = new Array(arguments.length - 3);
              while (G__13404__i < G__13404__a.length) {
                G__13404__a[G__13404__i] = arguments[G__13404__i + 3];
                ++G__13404__i;
              }
              G__13403 = new cljs.core.IndexedSeq(G__13404__a, 0);
            }
            return G__13399__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__13403);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13399.cljs$lang$maxFixedArity = 3;
      G__13399.cljs$lang$applyTo = G__13399__4.cljs$lang$applyTo;
      G__13399.cljs$core$IFn$_invoke$arity$0 = G__13399__0;
      G__13399.cljs$core$IFn$_invoke$arity$1 = G__13399__1;
      G__13399.cljs$core$IFn$_invoke$arity$2 = G__13399__2;
      G__13399.cljs$core$IFn$_invoke$arity$3 = G__13399__3;
      G__13399.cljs$core$IFn$_invoke$arity$variadic = G__13399__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13399;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__13405 = null;
      var G__13405__0 = function() {
        var G__13375 = arg1;
        var G__13376 = arg2;
        var G__13377 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13375, G__13376, G__13377) : f.call(null, G__13375, G__13376, G__13377);
      };
      var G__13405__1 = function(x) {
        var G__13378 = arg1;
        var G__13379 = arg2;
        var G__13380 = arg3;
        var G__13381 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13378, G__13379, G__13380, G__13381) : f.call(null, G__13378, G__13379, G__13380, G__13381);
      };
      var G__13405__2 = function(x, y) {
        var G__13382 = arg1;
        var G__13383 = arg2;
        var G__13384 = arg3;
        var G__13385 = x;
        var G__13386 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__13382, G__13383, G__13384, G__13385, G__13386) : f.call(null, G__13382, G__13383, G__13384, G__13385, G__13386);
      };
      var G__13405__3 = function(x, y, z) {
        var G__13387 = arg1;
        var G__13388 = arg2;
        var G__13389 = arg3;
        var G__13390 = x;
        var G__13391 = y;
        var G__13392 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__13387, G__13388, G__13389, G__13390, G__13391, G__13392) : f.call(null, G__13387, G__13388, G__13389, G__13390, G__13391, G__13392);
      };
      var G__13405__4 = function() {
        var G__13406__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__13406 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__13407__i = 0, G__13407__a = new Array(arguments.length - 3);
            while (G__13407__i < G__13407__a.length) {
              G__13407__a[G__13407__i] = arguments[G__13407__i + 3];
              ++G__13407__i;
            }
            args = new cljs.core.IndexedSeq(G__13407__a, 0);
          }
          return G__13406__delegate.call(this, x, y, z, args);
        };
        G__13406.cljs$lang$maxFixedArity = 3;
        G__13406.cljs$lang$applyTo = function(arglist__13408) {
          var x = cljs.core.first(arglist__13408);
          arglist__13408 = cljs.core.next(arglist__13408);
          var y = cljs.core.first(arglist__13408);
          arglist__13408 = cljs.core.next(arglist__13408);
          var z = cljs.core.first(arglist__13408);
          var args = cljs.core.rest(arglist__13408);
          return G__13406__delegate(x, y, z, args);
        };
        G__13406.cljs$core$IFn$_invoke$arity$variadic = G__13406__delegate;
        return G__13406;
      }();
      G__13405 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13405__0.call(this);
          case 1:
            return G__13405__1.call(this, x);
          case 2:
            return G__13405__2.call(this, x, y);
          case 3:
            return G__13405__3.call(this, x, y, z);
          default:
            var G__13409 = null;
            if (arguments.length > 3) {
              var G__13410__i = 0, G__13410__a = new Array(arguments.length - 3);
              while (G__13410__i < G__13410__a.length) {
                G__13410__a[G__13410__i] = arguments[G__13410__i + 3];
                ++G__13410__i;
              }
              G__13409 = new cljs.core.IndexedSeq(G__13410__a, 0);
            }
            return G__13405__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__13409);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13405.cljs$lang$maxFixedArity = 3;
      G__13405.cljs$lang$applyTo = G__13405__4.cljs$lang$applyTo;
      G__13405.cljs$core$IFn$_invoke$arity$0 = G__13405__0;
      G__13405.cljs$core$IFn$_invoke$arity$1 = G__13405__1;
      G__13405.cljs$core$IFn$_invoke$arity$2 = G__13405__2;
      G__13405.cljs$core$IFn$_invoke$arity$3 = G__13405__3;
      G__13405.cljs$core$IFn$_invoke$arity$variadic = G__13405__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13405;
    }();
  };
  var partial__5 = function() {
    var G__13411__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__13412__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__13412 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__13413__i = 0, G__13413__a = new Array(arguments.length - 0);
            while (G__13413__i < G__13413__a.length) {
              G__13413__a[G__13413__i] = arguments[G__13413__i + 0];
              ++G__13413__i;
            }
            args = new cljs.core.IndexedSeq(G__13413__a, 0);
          }
          return G__13412__delegate.call(this, args);
        };
        G__13412.cljs$lang$maxFixedArity = 0;
        G__13412.cljs$lang$applyTo = function(arglist__13414) {
          var args = cljs.core.seq(arglist__13414);
          return G__13412__delegate(args);
        };
        G__13412.cljs$core$IFn$_invoke$arity$variadic = G__13412__delegate;
        return G__13412;
      }();
    };
    var G__13411 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__13415__i = 0, G__13415__a = new Array(arguments.length - 4);
        while (G__13415__i < G__13415__a.length) {
          G__13415__a[G__13415__i] = arguments[G__13415__i + 4];
          ++G__13415__i;
        }
        more = new cljs.core.IndexedSeq(G__13415__a, 0);
      }
      return G__13411__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__13411.cljs$lang$maxFixedArity = 4;
    G__13411.cljs$lang$applyTo = function(arglist__13416) {
      var f = cljs.core.first(arglist__13416);
      arglist__13416 = cljs.core.next(arglist__13416);
      var arg1 = cljs.core.first(arglist__13416);
      arglist__13416 = cljs.core.next(arglist__13416);
      var arg2 = cljs.core.first(arglist__13416);
      arglist__13416 = cljs.core.next(arglist__13416);
      var arg3 = cljs.core.first(arglist__13416);
      var more = cljs.core.rest(arglist__13416);
      return G__13411__delegate(f, arg1, arg2, arg3, more);
    };
    G__13411.cljs$core$IFn$_invoke$arity$variadic = G__13411__delegate;
    return G__13411;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__13417 = null;
        if (arguments.length > 4) {
          var G__13418__i = 0, G__13418__a = new Array(arguments.length - 4);
          while (G__13418__i < G__13418__a.length) {
            G__13418__a[G__13418__i] = arguments[G__13418__i + 4];
            ++G__13418__i;
          }
          G__13417 = new cljs.core.IndexedSeq(G__13418__a, 0);
        }
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__13417);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__13451 = null;
      var G__13451__1 = function(a) {
        var G__13435 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13435) : f.call(null, G__13435);
      };
      var G__13451__2 = function(a, b) {
        var G__13436 = a == null ? x : a;
        var G__13437 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13436, G__13437) : f.call(null, G__13436, G__13437);
      };
      var G__13451__3 = function(a, b, c) {
        var G__13438 = a == null ? x : a;
        var G__13439 = b;
        var G__13440 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13438, G__13439, G__13440) : f.call(null, G__13438, G__13439, G__13440);
      };
      var G__13451__4 = function() {
        var G__13452__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__13452 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__13453__i = 0, G__13453__a = new Array(arguments.length - 3);
            while (G__13453__i < G__13453__a.length) {
              G__13453__a[G__13453__i] = arguments[G__13453__i + 3];
              ++G__13453__i;
            }
            ds = new cljs.core.IndexedSeq(G__13453__a, 0);
          }
          return G__13452__delegate.call(this, a, b, c, ds);
        };
        G__13452.cljs$lang$maxFixedArity = 3;
        G__13452.cljs$lang$applyTo = function(arglist__13454) {
          var a = cljs.core.first(arglist__13454);
          arglist__13454 = cljs.core.next(arglist__13454);
          var b = cljs.core.first(arglist__13454);
          arglist__13454 = cljs.core.next(arglist__13454);
          var c = cljs.core.first(arglist__13454);
          var ds = cljs.core.rest(arglist__13454);
          return G__13452__delegate(a, b, c, ds);
        };
        G__13452.cljs$core$IFn$_invoke$arity$variadic = G__13452__delegate;
        return G__13452;
      }();
      G__13451 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__13451__1.call(this, a);
          case 2:
            return G__13451__2.call(this, a, b);
          case 3:
            return G__13451__3.call(this, a, b, c);
          default:
            var G__13455 = null;
            if (arguments.length > 3) {
              var G__13456__i = 0, G__13456__a = new Array(arguments.length - 3);
              while (G__13456__i < G__13456__a.length) {
                G__13456__a[G__13456__i] = arguments[G__13456__i + 3];
                ++G__13456__i;
              }
              G__13455 = new cljs.core.IndexedSeq(G__13456__a, 0);
            }
            return G__13451__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__13455);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13451.cljs$lang$maxFixedArity = 3;
      G__13451.cljs$lang$applyTo = G__13451__4.cljs$lang$applyTo;
      G__13451.cljs$core$IFn$_invoke$arity$1 = G__13451__1;
      G__13451.cljs$core$IFn$_invoke$arity$2 = G__13451__2;
      G__13451.cljs$core$IFn$_invoke$arity$3 = G__13451__3;
      G__13451.cljs$core$IFn$_invoke$arity$variadic = G__13451__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13451;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__13457 = null;
      var G__13457__2 = function(a, b) {
        var G__13441 = a == null ? x : a;
        var G__13442 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13441, G__13442) : f.call(null, G__13441, G__13442);
      };
      var G__13457__3 = function(a, b, c) {
        var G__13443 = a == null ? x : a;
        var G__13444 = b == null ? y : b;
        var G__13445 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13443, G__13444, G__13445) : f.call(null, G__13443, G__13444, G__13445);
      };
      var G__13457__4 = function() {
        var G__13458__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__13458 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__13459__i = 0, G__13459__a = new Array(arguments.length - 3);
            while (G__13459__i < G__13459__a.length) {
              G__13459__a[G__13459__i] = arguments[G__13459__i + 3];
              ++G__13459__i;
            }
            ds = new cljs.core.IndexedSeq(G__13459__a, 0);
          }
          return G__13458__delegate.call(this, a, b, c, ds);
        };
        G__13458.cljs$lang$maxFixedArity = 3;
        G__13458.cljs$lang$applyTo = function(arglist__13460) {
          var a = cljs.core.first(arglist__13460);
          arglist__13460 = cljs.core.next(arglist__13460);
          var b = cljs.core.first(arglist__13460);
          arglist__13460 = cljs.core.next(arglist__13460);
          var c = cljs.core.first(arglist__13460);
          var ds = cljs.core.rest(arglist__13460);
          return G__13458__delegate(a, b, c, ds);
        };
        G__13458.cljs$core$IFn$_invoke$arity$variadic = G__13458__delegate;
        return G__13458;
      }();
      G__13457 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__13457__2.call(this, a, b);
          case 3:
            return G__13457__3.call(this, a, b, c);
          default:
            var G__13461 = null;
            if (arguments.length > 3) {
              var G__13462__i = 0, G__13462__a = new Array(arguments.length - 3);
              while (G__13462__i < G__13462__a.length) {
                G__13462__a[G__13462__i] = arguments[G__13462__i + 3];
                ++G__13462__i;
              }
              G__13461 = new cljs.core.IndexedSeq(G__13462__a, 0);
            }
            return G__13457__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__13461);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13457.cljs$lang$maxFixedArity = 3;
      G__13457.cljs$lang$applyTo = G__13457__4.cljs$lang$applyTo;
      G__13457.cljs$core$IFn$_invoke$arity$2 = G__13457__2;
      G__13457.cljs$core$IFn$_invoke$arity$3 = G__13457__3;
      G__13457.cljs$core$IFn$_invoke$arity$variadic = G__13457__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13457;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__13463 = null;
      var G__13463__2 = function(a, b) {
        var G__13446 = a == null ? x : a;
        var G__13447 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13446, G__13447) : f.call(null, G__13446, G__13447);
      };
      var G__13463__3 = function(a, b, c) {
        var G__13448 = a == null ? x : a;
        var G__13449 = b == null ? y : b;
        var G__13450 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13448, G__13449, G__13450) : f.call(null, G__13448, G__13449, G__13450);
      };
      var G__13463__4 = function() {
        var G__13464__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__13464 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__13465__i = 0, G__13465__a = new Array(arguments.length - 3);
            while (G__13465__i < G__13465__a.length) {
              G__13465__a[G__13465__i] = arguments[G__13465__i + 3];
              ++G__13465__i;
            }
            ds = new cljs.core.IndexedSeq(G__13465__a, 0);
          }
          return G__13464__delegate.call(this, a, b, c, ds);
        };
        G__13464.cljs$lang$maxFixedArity = 3;
        G__13464.cljs$lang$applyTo = function(arglist__13466) {
          var a = cljs.core.first(arglist__13466);
          arglist__13466 = cljs.core.next(arglist__13466);
          var b = cljs.core.first(arglist__13466);
          arglist__13466 = cljs.core.next(arglist__13466);
          var c = cljs.core.first(arglist__13466);
          var ds = cljs.core.rest(arglist__13466);
          return G__13464__delegate(a, b, c, ds);
        };
        G__13464.cljs$core$IFn$_invoke$arity$variadic = G__13464__delegate;
        return G__13464;
      }();
      G__13463 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__13463__2.call(this, a, b);
          case 3:
            return G__13463__3.call(this, a, b, c);
          default:
            var G__13467 = null;
            if (arguments.length > 3) {
              var G__13468__i = 0, G__13468__a = new Array(arguments.length - 3);
              while (G__13468__i < G__13468__a.length) {
                G__13468__a[G__13468__i] = arguments[G__13468__i + 3];
                ++G__13468__i;
              }
              G__13467 = new cljs.core.IndexedSeq(G__13468__a, 0);
            }
            return G__13463__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__13467);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13463.cljs$lang$maxFixedArity = 3;
      G__13463.cljs$lang$applyTo = G__13463__4.cljs$lang$applyTo;
      G__13463.cljs$core$IFn$_invoke$arity$2 = G__13463__2;
      G__13463.cljs$core$IFn$_invoke$arity$3 = G__13463__3;
      G__13463.cljs$core$IFn$_invoke$arity$variadic = G__13463__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13463;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function() {
  var map_indexed = null;
  var map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__13499 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__13499) : cljs.core.volatile_BANG_.call(null, G__13499);
      }();
      return function(i) {
        return function() {
          var G__13529 = null;
          var G__13529__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__13529__1 = function(result) {
            var G__13500 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__13500) : rf.call(null, G__13500);
          };
          var G__13529__2 = function(result, input) {
            var G__13501 = result;
            var G__13502 = function() {
              var G__13503 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__13504 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13503, G__13504) : f.call(null, G__13503, G__13504);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__13501, G__13502) : rf.call(null, G__13501, G__13502);
          };
          G__13529 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__13529__0.call(this);
              case 1:
                return G__13529__1.call(this, result);
              case 2:
                return G__13529__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13529.cljs$core$IFn$_invoke$arity$0 = G__13529__0;
          G__13529.cljs$core$IFn$_invoke$arity$1 = G__13529__1;
          G__13529.cljs$core$IFn$_invoke$arity$2 = G__13529__2;
          return G__13529;
        }();
      }(i);
    };
  };
  var map_indexed__2 = function(f, coll) {
    var mapi = function mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5112__auto___13530 = size;
            var i_13531 = 0;
            while (true) {
              if (i_13531 < n__5112__auto___13530) {
                cljs.core.chunk_append(b, function() {
                  var G__13525 = idx + i_13531;
                  var G__13526 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_13531);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13525, G__13526) : f.call(null, G__13525, G__13526);
                }());
                var G__13532 = i_13531 + 1;
                i_13531 = G__13532;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__13527 = idx;
              var G__13528 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13527, G__13528) : f.call(null, G__13527, G__13528);
            }(), mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return map_indexed__1.call(this, f);
      case 2:
        return map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map_indexed.cljs$core$IFn$_invoke$arity$1 = map_indexed__1;
  map_indexed.cljs$core$IFn$_invoke$arity$2 = map_indexed__2;
  return map_indexed;
}();
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__13551 = null;
        var G__13551__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__13551__1 = function(result) {
          var G__13545 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__13545) : rf.call(null, G__13545);
        };
        var G__13551__2 = function(result, input) {
          var v = function() {
            var G__13546 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13546) : f.call(null, G__13546);
          }();
          if (v == null) {
            return result;
          } else {
            var G__13547 = result;
            var G__13548 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__13547, G__13548) : rf.call(null, G__13547, G__13548);
          }
        };
        G__13551 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__13551__0.call(this);
            case 1:
              return G__13551__1.call(this, result);
            case 2:
              return G__13551__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13551.cljs$core$IFn$_invoke$arity$0 = G__13551__0;
        G__13551.cljs$core$IFn$_invoke$arity$1 = G__13551__1;
        G__13551.cljs$core$IFn$_invoke$arity$2 = G__13551__2;
        return G__13551;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5112__auto___13552 = size;
          var i_13553 = 0;
          while (true) {
            if (i_13553 < n__5112__auto___13552) {
              var x_13554 = function() {
                var G__13549 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_13553);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13549) : f.call(null, G__13549);
              }();
              if (x_13554 == null) {
              } else {
                cljs.core.chunk_append(b, x_13554);
              }
              var G__13555 = i_13553 + 1;
              i_13553 = G__13555;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__13550 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13550) : f.call(null, G__13550);
          }();
          if (x == null) {
            return keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__13556 = this$__$1;
  return goog.getUid(G__13556);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__13557 = cljs.core.seq(self__.watches);
  var chunk__13558 = null;
  var count__13559 = 0;
  var i__13560 = 0;
  while (true) {
    if (i__13560 < count__13559) {
      var vec__13561 = chunk__13558.cljs$core$IIndexed$_nth$arity$2(null, i__13560);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13561, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13561, 1, null);
      var G__13562_13571 = key;
      var G__13563_13572 = this$__$1;
      var G__13564_13573 = oldval;
      var G__13565_13574 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13562_13571, G__13563_13572, G__13564_13573, G__13565_13574) : f.call(null, G__13562_13571, G__13563_13572, G__13564_13573, G__13565_13574);
      var G__13575 = seq__13557;
      var G__13576 = chunk__13558;
      var G__13577 = count__13559;
      var G__13578 = i__13560 + 1;
      seq__13557 = G__13575;
      chunk__13558 = G__13576;
      count__13559 = G__13577;
      i__13560 = G__13578;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__13557);
      if (temp__4126__auto__) {
        var seq__13557__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__13557__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__13557__$1);
          var G__13579 = cljs.core.chunk_rest(seq__13557__$1);
          var G__13580 = c__5012__auto__;
          var G__13581 = cljs.core.count(c__5012__auto__);
          var G__13582 = 0;
          seq__13557 = G__13579;
          chunk__13558 = G__13580;
          count__13559 = G__13581;
          i__13560 = G__13582;
          continue;
        } else {
          var vec__13566 = cljs.core.first(seq__13557__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13566, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13566, 1, null);
          var G__13567_13583 = key;
          var G__13568_13584 = this$__$1;
          var G__13569_13585 = oldval;
          var G__13570_13586 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13567_13583, G__13568_13584, G__13569_13585, G__13570_13586) : f.call(null, G__13567_13583, G__13568_13584, G__13569_13585, G__13570_13586);
          var G__13587 = cljs.core.next(seq__13557__$1);
          var G__13588 = null;
          var G__13589 = 0;
          var G__13590 = 0;
          seq__13557 = G__13587;
          chunk__13558 = G__13588;
          count__13559 = G__13589;
          i__13560 = G__13590;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__13594__delegate = function(x, p__13591) {
      var map__13593 = p__13591;
      var map__13593__$1 = cljs.core.seq_QMARK_(map__13593) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__13593) : map__13593;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13593__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__13593__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__13594 = function(x, var_args) {
      var p__13591 = null;
      if (arguments.length > 1) {
        var G__13595__i = 0, G__13595__a = new Array(arguments.length - 1);
        while (G__13595__i < G__13595__a.length) {
          G__13595__a[G__13595__i] = arguments[G__13595__i + 1];
          ++G__13595__i;
        }
        p__13591 = new cljs.core.IndexedSeq(G__13595__a, 0);
      }
      return G__13594__delegate.call(this, x, p__13591);
    };
    G__13594.cljs$lang$maxFixedArity = 1;
    G__13594.cljs$lang$applyTo = function(arglist__13596) {
      var x = cljs.core.first(arglist__13596);
      var p__13591 = cljs.core.rest(arglist__13596);
      return G__13594__delegate(x, p__13591);
    };
    G__13594.cljs$core$IFn$_invoke$arity$variadic = G__13594__delegate;
    return G__13594;
  }();
  atom = function(x, var_args) {
    var p__13591 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__13597 = null;
        if (arguments.length > 1) {
          var G__13598__i = 0, G__13598__a = new Array(arguments.length - 1);
          while (G__13598__i < G__13598__a.length) {
            G__13598__a[G__13598__i] = arguments[G__13598__i + 1];
            ++G__13598__i;
          }
          G__13597 = new cljs.core.IndexedSeq(G__13598__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__13597);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__13601 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__13601) : validate.call(null, G__13601);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__13602 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__13602) : cljs.core.pr_str.call(null, G__13602);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__13609 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13609) : f.call(null, G__13609);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__13610 = a.state;
        var G__13611 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13610, G__13611) : f.call(null, G__13610, G__13611);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__13612 = a.state;
        var G__13613 = x;
        var G__13614 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13612, G__13613, G__13614) : f.call(null, G__13612, G__13613, G__13614);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__13615__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__13615 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__13616__i = 0, G__13616__a = new Array(arguments.length - 4);
        while (G__13616__i < G__13616__a.length) {
          G__13616__a[G__13616__i] = arguments[G__13616__i + 4];
          ++G__13616__i;
        }
        more = new cljs.core.IndexedSeq(G__13616__a, 0);
      }
      return G__13615__delegate.call(this, a, f, x, y, more);
    };
    G__13615.cljs$lang$maxFixedArity = 4;
    G__13615.cljs$lang$applyTo = function(arglist__13617) {
      var a = cljs.core.first(arglist__13617);
      arglist__13617 = cljs.core.next(arglist__13617);
      var f = cljs.core.first(arglist__13617);
      arglist__13617 = cljs.core.next(arglist__13617);
      var x = cljs.core.first(arglist__13617);
      arglist__13617 = cljs.core.next(arglist__13617);
      var y = cljs.core.first(arglist__13617);
      var more = cljs.core.rest(arglist__13617);
      return G__13615__delegate(a, f, x, y, more);
    };
    G__13615.cljs$core$IFn$_invoke$arity$variadic = G__13615__delegate;
    return G__13615;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__13618 = null;
        if (arguments.length > 4) {
          var G__13619__i = 0, G__13619__a = new Array(arguments.length - 4);
          while (G__13619__i < G__13619__a.length) {
            G__13619__a[G__13619__i] = arguments[G__13619__i + 4];
            ++G__13619__i;
          }
          G__13618 = new cljs.core.IndexedSeq(G__13619__a, 0);
        }
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__13618);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function __GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__13686 = null;
          var G__13686__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__13686__1 = function(result) {
            var G__13653 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__13653) : rf.call(null, G__13653);
          };
          var G__13686__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__13654 = i;
              var G__13655 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13654, G__13655) : f.call(null, G__13654, G__13655);
            }();
            if (v == null) {
              return result;
            } else {
              var G__13656 = result;
              var G__13657 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__13656, G__13657) : rf.call(null, G__13656, G__13657);
            }
          };
          G__13686 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__13686__0.call(this);
              case 1:
                return G__13686__1.call(this, result);
              case 2:
                return G__13686__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13686.cljs$core$IFn$_invoke$arity$0 = G__13686__0;
          G__13686.cljs$core$IFn$_invoke$arity$1 = G__13686__1;
          G__13686.cljs$core$IFn$_invoke$arity$2 = G__13686__2;
          return G__13686;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__5112__auto___13687 = size;
            var i_13688 = 0;
            while (true) {
              if (i_13688 < n__5112__auto___13687) {
                var x_13689 = function() {
                  var G__13682 = idx + i_13688;
                  var G__13683 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_13688);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13682, G__13683) : f.call(null, G__13682, G__13683);
                }();
                if (x_13689 == null) {
                } else {
                  cljs.core.chunk_append(b, x_13689);
                }
                var G__13690 = i_13688 + 1;
                i_13688 = G__13690;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__13684 = idx;
              var G__13685 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13684, G__13685) : f.call(null, G__13684, G__13685);
            }();
            if (x == null) {
              return keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__13904 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__13904) : p.call(null, G__13904);
        }());
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__13906 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__13906) : p.call(null, G__13906);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var G__13907 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__13907) : p.call(null, G__13907);
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__13909 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__13909) : p.call(null, G__13909);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var and__4213__auto____$1 = function() {
              var G__13911 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__13911) : p.call(null, G__13911);
            }();
            if (cljs.core.truth_(and__4213__auto____$1)) {
              var G__13912 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__13912) : p.call(null, G__13912);
            } else {
              return and__4213__auto____$1;
            }
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__14081__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__14081 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14082__i = 0, G__14082__a = new Array(arguments.length - 3);
            while (G__14082__i < G__14082__a.length) {
              G__14082__a[G__14082__i] = arguments[G__14082__i + 3];
              ++G__14082__i;
            }
            args = new cljs.core.IndexedSeq(G__14082__a, 0);
          }
          return G__14081__delegate.call(this, x, y, z, args);
        };
        G__14081.cljs$lang$maxFixedArity = 3;
        G__14081.cljs$lang$applyTo = function(arglist__14083) {
          var x = cljs.core.first(arglist__14083);
          arglist__14083 = cljs.core.next(arglist__14083);
          var y = cljs.core.first(arglist__14083);
          arglist__14083 = cljs.core.next(arglist__14083);
          var z = cljs.core.first(arglist__14083);
          var args = cljs.core.rest(arglist__14083);
          return G__14081__delegate(x, y, z, args);
        };
        G__14081.cljs$core$IFn$_invoke$arity$variadic = G__14081__delegate;
        return G__14081;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            var G__14084 = null;
            if (arguments.length > 3) {
              var G__14085__i = 0, G__14085__a = new Array(arguments.length - 3);
              while (G__14085__i < G__14085__a.length) {
                G__14085__a[G__14085__i] = arguments[G__14085__i + 3];
                ++G__14085__i;
              }
              G__14084 = new cljs.core.IndexedSeq(G__14085__a, 0);
            }
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14084);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__13944 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13944) : p1.call(null, G__13944);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var G__13945 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13945) : p2.call(null, G__13945);
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__13947 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13947) : p1.call(null, G__13947);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var and__4213__auto____$1 = function() {
              var G__13949 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13949) : p1.call(null, G__13949);
            }();
            if (cljs.core.truth_(and__4213__auto____$1)) {
              var and__4213__auto____$2 = function() {
                var G__13951 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13951) : p2.call(null, G__13951);
              }();
              if (cljs.core.truth_(and__4213__auto____$2)) {
                var G__13952 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13952) : p2.call(null, G__13952);
              } else {
                return and__4213__auto____$2;
              }
            } else {
              return and__4213__auto____$1;
            }
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__13954 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13954) : p1.call(null, G__13954);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var and__4213__auto____$1 = function() {
              var G__13956 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13956) : p1.call(null, G__13956);
            }();
            if (cljs.core.truth_(and__4213__auto____$1)) {
              var and__4213__auto____$2 = function() {
                var G__13958 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13958) : p1.call(null, G__13958);
              }();
              if (cljs.core.truth_(and__4213__auto____$2)) {
                var and__4213__auto____$3 = function() {
                  var G__13960 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13960) : p2.call(null, G__13960);
                }();
                if (cljs.core.truth_(and__4213__auto____$3)) {
                  var and__4213__auto____$4 = function() {
                    var G__13962 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13962) : p2.call(null, G__13962);
                  }();
                  if (cljs.core.truth_(and__4213__auto____$4)) {
                    var G__13963 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13963) : p2.call(null, G__13963);
                  } else {
                    return and__4213__auto____$4;
                  }
                } else {
                  return and__4213__auto____$3;
                }
              } else {
                return and__4213__auto____$2;
              }
            } else {
              return and__4213__auto____$1;
            }
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__14086__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__13691_SHARP_) {
            var and__4213__auto__ = function() {
              var G__13968 = p1__13691_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__13968) : p1.call(null, G__13968);
            }();
            if (cljs.core.truth_(and__4213__auto__)) {
              var G__13969 = p1__13691_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__13969) : p2.call(null, G__13969);
            } else {
              return and__4213__auto__;
            }
          }, args));
        };
        var G__14086 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14087__i = 0, G__14087__a = new Array(arguments.length - 3);
            while (G__14087__i < G__14087__a.length) {
              G__14087__a[G__14087__i] = arguments[G__14087__i + 3];
              ++G__14087__i;
            }
            args = new cljs.core.IndexedSeq(G__14087__a, 0);
          }
          return G__14086__delegate.call(this, x, y, z, args);
        };
        G__14086.cljs$lang$maxFixedArity = 3;
        G__14086.cljs$lang$applyTo = function(arglist__14088) {
          var x = cljs.core.first(arglist__14088);
          arglist__14088 = cljs.core.next(arglist__14088);
          var y = cljs.core.first(arglist__14088);
          arglist__14088 = cljs.core.next(arglist__14088);
          var z = cljs.core.first(arglist__14088);
          var args = cljs.core.rest(arglist__14088);
          return G__14086__delegate(x, y, z, args);
        };
        G__14086.cljs$core$IFn$_invoke$arity$variadic = G__14086__delegate;
        return G__14086;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            var G__14089 = null;
            if (arguments.length > 3) {
              var G__14090__i = 0, G__14090__a = new Array(arguments.length - 3);
              while (G__14090__i < G__14090__a.length) {
                G__14090__a[G__14090__i] = arguments[G__14090__i + 3];
                ++G__14090__i;
              }
              G__14089 = new cljs.core.IndexedSeq(G__14090__a, 0);
            }
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14089);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__14015 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14015) : p1.call(null, G__14015);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var and__4213__auto____$1 = function() {
              var G__14017 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14017) : p2.call(null, G__14017);
            }();
            if (cljs.core.truth_(and__4213__auto____$1)) {
              var G__14018 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14018) : p3.call(null, G__14018);
            } else {
              return and__4213__auto____$1;
            }
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__14020 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14020) : p1.call(null, G__14020);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var and__4213__auto____$1 = function() {
              var G__14022 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14022) : p2.call(null, G__14022);
            }();
            if (cljs.core.truth_(and__4213__auto____$1)) {
              var and__4213__auto____$2 = function() {
                var G__14024 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14024) : p3.call(null, G__14024);
              }();
              if (cljs.core.truth_(and__4213__auto____$2)) {
                var and__4213__auto____$3 = function() {
                  var G__14026 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14026) : p1.call(null, G__14026);
                }();
                if (cljs.core.truth_(and__4213__auto____$3)) {
                  var and__4213__auto____$4 = function() {
                    var G__14028 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14028) : p2.call(null, G__14028);
                  }();
                  if (cljs.core.truth_(and__4213__auto____$4)) {
                    var G__14029 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14029) : p3.call(null, G__14029);
                  } else {
                    return and__4213__auto____$4;
                  }
                } else {
                  return and__4213__auto____$3;
                }
              } else {
                return and__4213__auto____$2;
              }
            } else {
              return and__4213__auto____$1;
            }
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__4213__auto__ = function() {
            var G__14031 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14031) : p1.call(null, G__14031);
          }();
          if (cljs.core.truth_(and__4213__auto__)) {
            var and__4213__auto____$1 = function() {
              var G__14033 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14033) : p2.call(null, G__14033);
            }();
            if (cljs.core.truth_(and__4213__auto____$1)) {
              var and__4213__auto____$2 = function() {
                var G__14035 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14035) : p3.call(null, G__14035);
              }();
              if (cljs.core.truth_(and__4213__auto____$2)) {
                var and__4213__auto____$3 = function() {
                  var G__14037 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14037) : p1.call(null, G__14037);
                }();
                if (cljs.core.truth_(and__4213__auto____$3)) {
                  var and__4213__auto____$4 = function() {
                    var G__14039 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14039) : p2.call(null, G__14039);
                  }();
                  if (cljs.core.truth_(and__4213__auto____$4)) {
                    var and__4213__auto____$5 = function() {
                      var G__14041 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14041) : p3.call(null, G__14041);
                    }();
                    if (cljs.core.truth_(and__4213__auto____$5)) {
                      var and__4213__auto____$6 = function() {
                        var G__14043 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14043) : p1.call(null, G__14043);
                      }();
                      if (cljs.core.truth_(and__4213__auto____$6)) {
                        var and__4213__auto____$7 = function() {
                          var G__14045 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14045) : p2.call(null, G__14045);
                        }();
                        if (cljs.core.truth_(and__4213__auto____$7)) {
                          var G__14046 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14046) : p3.call(null, G__14046);
                        } else {
                          return and__4213__auto____$7;
                        }
                      } else {
                        return and__4213__auto____$6;
                      }
                    } else {
                      return and__4213__auto____$5;
                    }
                  } else {
                    return and__4213__auto____$4;
                  }
                } else {
                  return and__4213__auto____$3;
                }
              } else {
                return and__4213__auto____$2;
              }
            } else {
              return and__4213__auto____$1;
            }
          } else {
            return and__4213__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__14091__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__13692_SHARP_) {
            var and__4213__auto__ = function() {
              var G__14053 = p1__13692_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14053) : p1.call(null, G__14053);
            }();
            if (cljs.core.truth_(and__4213__auto__)) {
              var and__4213__auto____$1 = function() {
                var G__14055 = p1__13692_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14055) : p2.call(null, G__14055);
              }();
              if (cljs.core.truth_(and__4213__auto____$1)) {
                var G__14056 = p1__13692_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14056) : p3.call(null, G__14056);
              } else {
                return and__4213__auto____$1;
              }
            } else {
              return and__4213__auto__;
            }
          }, args));
        };
        var G__14091 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14092__i = 0, G__14092__a = new Array(arguments.length - 3);
            while (G__14092__i < G__14092__a.length) {
              G__14092__a[G__14092__i] = arguments[G__14092__i + 3];
              ++G__14092__i;
            }
            args = new cljs.core.IndexedSeq(G__14092__a, 0);
          }
          return G__14091__delegate.call(this, x, y, z, args);
        };
        G__14091.cljs$lang$maxFixedArity = 3;
        G__14091.cljs$lang$applyTo = function(arglist__14093) {
          var x = cljs.core.first(arglist__14093);
          arglist__14093 = cljs.core.next(arglist__14093);
          var y = cljs.core.first(arglist__14093);
          arglist__14093 = cljs.core.next(arglist__14093);
          var z = cljs.core.first(arglist__14093);
          var args = cljs.core.rest(arglist__14093);
          return G__14091__delegate(x, y, z, args);
        };
        G__14091.cljs$core$IFn$_invoke$arity$variadic = G__14091__delegate;
        return G__14091;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            var G__14094 = null;
            if (arguments.length > 3) {
              var G__14095__i = 0, G__14095__a = new Array(arguments.length - 3);
              while (G__14095__i < G__14095__a.length) {
                G__14095__a[G__14095__i] = arguments[G__14095__i + 3];
                ++G__14095__i;
              }
              G__14094 = new cljs.core.IndexedSeq(G__14095__a, 0);
            }
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14094);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__14096__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__13693_SHARP_) {
                var G__14072 = x;
                return p1__13693_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__13693_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14072) : p1__13693_SHARP_.call(null, G__14072);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__13694_SHARP_) {
                var and__4213__auto__ = function() {
                  var G__14074 = x;
                  return p1__13694_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__13694_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14074) : p1__13694_SHARP_.call(null, G__14074);
                }();
                if (cljs.core.truth_(and__4213__auto__)) {
                  var G__14075 = y;
                  return p1__13694_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__13694_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14075) : p1__13694_SHARP_.call(null, G__14075);
                } else {
                  return and__4213__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__13695_SHARP_) {
                var and__4213__auto__ = function() {
                  var G__14077 = x;
                  return p1__13695_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__13695_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14077) : p1__13695_SHARP_.call(null, G__14077);
                }();
                if (cljs.core.truth_(and__4213__auto__)) {
                  var and__4213__auto____$1 = function() {
                    var G__14079 = y;
                    return p1__13695_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__13695_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14079) : p1__13695_SHARP_.call(null, G__14079);
                  }();
                  if (cljs.core.truth_(and__4213__auto____$1)) {
                    var G__14080 = z;
                    return p1__13695_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__13695_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14080) : p1__13695_SHARP_.call(null, G__14080);
                  } else {
                    return and__4213__auto____$1;
                  }
                } else {
                  return and__4213__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__14097__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__13696_SHARP_) {
                  return cljs.core.every_QMARK_(p1__13696_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__14097 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__14098__i = 0, G__14098__a = new Array(arguments.length - 3);
                while (G__14098__i < G__14098__a.length) {
                  G__14098__a[G__14098__i] = arguments[G__14098__i + 3];
                  ++G__14098__i;
                }
                args = new cljs.core.IndexedSeq(G__14098__a, 0);
              }
              return G__14097__delegate.call(this, x, y, z, args);
            };
            G__14097.cljs$lang$maxFixedArity = 3;
            G__14097.cljs$lang$applyTo = function(arglist__14099) {
              var x = cljs.core.first(arglist__14099);
              arglist__14099 = cljs.core.next(arglist__14099);
              var y = cljs.core.first(arglist__14099);
              arglist__14099 = cljs.core.next(arglist__14099);
              var z = cljs.core.first(arglist__14099);
              var args = cljs.core.rest(arglist__14099);
              return G__14097__delegate(x, y, z, args);
            };
            G__14097.cljs$core$IFn$_invoke$arity$variadic = G__14097__delegate;
            return G__14097;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                var G__14100 = null;
                if (arguments.length > 3) {
                  var G__14101__i = 0, G__14101__a = new Array(arguments.length - 3);
                  while (G__14101__i < G__14101__a.length) {
                    G__14101__a[G__14101__i] = arguments[G__14101__i + 3];
                    ++G__14101__i;
                  }
                  G__14100 = new cljs.core.IndexedSeq(G__14101__a, 0);
                }
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14100);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__14096 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__14102__i = 0, G__14102__a = new Array(arguments.length - 3);
        while (G__14102__i < G__14102__a.length) {
          G__14102__a[G__14102__i] = arguments[G__14102__i + 3];
          ++G__14102__i;
        }
        ps = new cljs.core.IndexedSeq(G__14102__a, 0);
      }
      return G__14096__delegate.call(this, p1, p2, p3, ps);
    };
    G__14096.cljs$lang$maxFixedArity = 3;
    G__14096.cljs$lang$applyTo = function(arglist__14103) {
      var p1 = cljs.core.first(arglist__14103);
      arglist__14103 = cljs.core.next(arglist__14103);
      var p2 = cljs.core.first(arglist__14103);
      arglist__14103 = cljs.core.next(arglist__14103);
      var p3 = cljs.core.first(arglist__14103);
      var ps = cljs.core.rest(arglist__14103);
      return G__14096__delegate(p1, p2, p3, ps);
    };
    G__14096.cljs$core$IFn$_invoke$arity$variadic = G__14096__delegate;
    return G__14096;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        var G__14104 = null;
        if (arguments.length > 3) {
          var G__14105__i = 0, G__14105__a = new Array(arguments.length - 3);
          while (G__14105__i < G__14105__a.length) {
            G__14105__a[G__14105__i] = arguments[G__14105__i + 3];
            ++G__14105__i;
          }
          G__14104 = new cljs.core.IndexedSeq(G__14105__a, 0);
        }
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__14104);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        var G__14311 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14311) : p.call(null, G__14311);
      };
      var sp1__2 = function(x, y) {
        var or__4225__auto__ = function() {
          var G__14313 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14313) : p.call(null, G__14313);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var G__14314 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14314) : p.call(null, G__14314);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__4225__auto__ = function() {
          var G__14316 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14316) : p.call(null, G__14316);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = function() {
            var G__14318 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14318) : p.call(null, G__14318);
          }();
          if (cljs.core.truth_(or__4225__auto____$1)) {
            return or__4225__auto____$1;
          } else {
            var G__14319 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14319) : p.call(null, G__14319);
          }
        }
      };
      var sp1__4 = function() {
        var G__14480__delegate = function(x, y, z, args) {
          var or__4225__auto__ = sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4225__auto__)) {
            return or__4225__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__14480 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14481__i = 0, G__14481__a = new Array(arguments.length - 3);
            while (G__14481__i < G__14481__a.length) {
              G__14481__a[G__14481__i] = arguments[G__14481__i + 3];
              ++G__14481__i;
            }
            args = new cljs.core.IndexedSeq(G__14481__a, 0);
          }
          return G__14480__delegate.call(this, x, y, z, args);
        };
        G__14480.cljs$lang$maxFixedArity = 3;
        G__14480.cljs$lang$applyTo = function(arglist__14482) {
          var x = cljs.core.first(arglist__14482);
          arglist__14482 = cljs.core.next(arglist__14482);
          var y = cljs.core.first(arglist__14482);
          arglist__14482 = cljs.core.next(arglist__14482);
          var z = cljs.core.first(arglist__14482);
          var args = cljs.core.rest(arglist__14482);
          return G__14480__delegate(x, y, z, args);
        };
        G__14480.cljs$core$IFn$_invoke$arity$variadic = G__14480__delegate;
        return G__14480;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            var G__14483 = null;
            if (arguments.length > 3) {
              var G__14484__i = 0, G__14484__a = new Array(arguments.length - 3);
              while (G__14484__i < G__14484__a.length) {
                G__14484__a[G__14484__i] = arguments[G__14484__i + 3];
                ++G__14484__i;
              }
              G__14483 = new cljs.core.IndexedSeq(G__14484__a, 0);
            }
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14483);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__4225__auto__ = function() {
          var G__14351 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14351) : p1.call(null, G__14351);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var G__14352 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14352) : p2.call(null, G__14352);
        }
      };
      var sp2__2 = function(x, y) {
        var or__4225__auto__ = function() {
          var G__14354 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14354) : p1.call(null, G__14354);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = function() {
            var G__14356 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14356) : p1.call(null, G__14356);
          }();
          if (cljs.core.truth_(or__4225__auto____$1)) {
            return or__4225__auto____$1;
          } else {
            var or__4225__auto____$2 = function() {
              var G__14358 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14358) : p2.call(null, G__14358);
            }();
            if (cljs.core.truth_(or__4225__auto____$2)) {
              return or__4225__auto____$2;
            } else {
              var G__14359 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14359) : p2.call(null, G__14359);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__4225__auto__ = function() {
          var G__14361 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14361) : p1.call(null, G__14361);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = function() {
            var G__14363 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14363) : p1.call(null, G__14363);
          }();
          if (cljs.core.truth_(or__4225__auto____$1)) {
            return or__4225__auto____$1;
          } else {
            var or__4225__auto____$2 = function() {
              var G__14365 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14365) : p1.call(null, G__14365);
            }();
            if (cljs.core.truth_(or__4225__auto____$2)) {
              return or__4225__auto____$2;
            } else {
              var or__4225__auto____$3 = function() {
                var G__14367 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14367) : p2.call(null, G__14367);
              }();
              if (cljs.core.truth_(or__4225__auto____$3)) {
                return or__4225__auto____$3;
              } else {
                var or__4225__auto____$4 = function() {
                  var G__14369 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14369) : p2.call(null, G__14369);
                }();
                if (cljs.core.truth_(or__4225__auto____$4)) {
                  return or__4225__auto____$4;
                } else {
                  var G__14370 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14370) : p2.call(null, G__14370);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__14485__delegate = function(x, y, z, args) {
          var or__4225__auto__ = sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4225__auto__)) {
            return or__4225__auto__;
          } else {
            return cljs.core.some(function(or__4225__auto__) {
              return function(p1__14106_SHARP_) {
                var or__4225__auto____$1 = function() {
                  var G__14372 = p1__14106_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14372) : p1.call(null, G__14372);
                }();
                if (cljs.core.truth_(or__4225__auto____$1)) {
                  return or__4225__auto____$1;
                } else {
                  var G__14373 = p1__14106_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14373) : p2.call(null, G__14373);
                }
              };
            }(or__4225__auto__), args);
          }
        };
        var G__14485 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14486__i = 0, G__14486__a = new Array(arguments.length - 3);
            while (G__14486__i < G__14486__a.length) {
              G__14486__a[G__14486__i] = arguments[G__14486__i + 3];
              ++G__14486__i;
            }
            args = new cljs.core.IndexedSeq(G__14486__a, 0);
          }
          return G__14485__delegate.call(this, x, y, z, args);
        };
        G__14485.cljs$lang$maxFixedArity = 3;
        G__14485.cljs$lang$applyTo = function(arglist__14487) {
          var x = cljs.core.first(arglist__14487);
          arglist__14487 = cljs.core.next(arglist__14487);
          var y = cljs.core.first(arglist__14487);
          arglist__14487 = cljs.core.next(arglist__14487);
          var z = cljs.core.first(arglist__14487);
          var args = cljs.core.rest(arglist__14487);
          return G__14485__delegate(x, y, z, args);
        };
        G__14485.cljs$core$IFn$_invoke$arity$variadic = G__14485__delegate;
        return G__14485;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            var G__14488 = null;
            if (arguments.length > 3) {
              var G__14489__i = 0, G__14489__a = new Array(arguments.length - 3);
              while (G__14489__i < G__14489__a.length) {
                G__14489__a[G__14489__i] = arguments[G__14489__i + 3];
                ++G__14489__i;
              }
              G__14488 = new cljs.core.IndexedSeq(G__14489__a, 0);
            }
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14488);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__4225__auto__ = function() {
          var G__14419 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14419) : p1.call(null, G__14419);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = function() {
            var G__14421 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14421) : p2.call(null, G__14421);
          }();
          if (cljs.core.truth_(or__4225__auto____$1)) {
            return or__4225__auto____$1;
          } else {
            var G__14422 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14422) : p3.call(null, G__14422);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__4225__auto__ = function() {
          var G__14424 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14424) : p1.call(null, G__14424);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = function() {
            var G__14426 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14426) : p2.call(null, G__14426);
          }();
          if (cljs.core.truth_(or__4225__auto____$1)) {
            return or__4225__auto____$1;
          } else {
            var or__4225__auto____$2 = function() {
              var G__14428 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14428) : p3.call(null, G__14428);
            }();
            if (cljs.core.truth_(or__4225__auto____$2)) {
              return or__4225__auto____$2;
            } else {
              var or__4225__auto____$3 = function() {
                var G__14430 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14430) : p1.call(null, G__14430);
              }();
              if (cljs.core.truth_(or__4225__auto____$3)) {
                return or__4225__auto____$3;
              } else {
                var or__4225__auto____$4 = function() {
                  var G__14432 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14432) : p2.call(null, G__14432);
                }();
                if (cljs.core.truth_(or__4225__auto____$4)) {
                  return or__4225__auto____$4;
                } else {
                  var G__14433 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14433) : p3.call(null, G__14433);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__4225__auto__ = function() {
          var G__14435 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14435) : p1.call(null, G__14435);
        }();
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = function() {
            var G__14437 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14437) : p2.call(null, G__14437);
          }();
          if (cljs.core.truth_(or__4225__auto____$1)) {
            return or__4225__auto____$1;
          } else {
            var or__4225__auto____$2 = function() {
              var G__14439 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14439) : p3.call(null, G__14439);
            }();
            if (cljs.core.truth_(or__4225__auto____$2)) {
              return or__4225__auto____$2;
            } else {
              var or__4225__auto____$3 = function() {
                var G__14441 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14441) : p1.call(null, G__14441);
              }();
              if (cljs.core.truth_(or__4225__auto____$3)) {
                return or__4225__auto____$3;
              } else {
                var or__4225__auto____$4 = function() {
                  var G__14443 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14443) : p2.call(null, G__14443);
                }();
                if (cljs.core.truth_(or__4225__auto____$4)) {
                  return or__4225__auto____$4;
                } else {
                  var or__4225__auto____$5 = function() {
                    var G__14445 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14445) : p3.call(null, G__14445);
                  }();
                  if (cljs.core.truth_(or__4225__auto____$5)) {
                    return or__4225__auto____$5;
                  } else {
                    var or__4225__auto____$6 = function() {
                      var G__14447 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14447) : p1.call(null, G__14447);
                    }();
                    if (cljs.core.truth_(or__4225__auto____$6)) {
                      return or__4225__auto____$6;
                    } else {
                      var or__4225__auto____$7 = function() {
                        var G__14449 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14449) : p2.call(null, G__14449);
                      }();
                      if (cljs.core.truth_(or__4225__auto____$7)) {
                        return or__4225__auto____$7;
                      } else {
                        var G__14450 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14450) : p3.call(null, G__14450);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__14490__delegate = function(x, y, z, args) {
          var or__4225__auto__ = sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4225__auto__)) {
            return or__4225__auto__;
          } else {
            return cljs.core.some(function(or__4225__auto__) {
              return function(p1__14107_SHARP_) {
                var or__4225__auto____$1 = function() {
                  var G__14452 = p1__14107_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14452) : p1.call(null, G__14452);
                }();
                if (cljs.core.truth_(or__4225__auto____$1)) {
                  return or__4225__auto____$1;
                } else {
                  var or__4225__auto____$2 = function() {
                    var G__14454 = p1__14107_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14454) : p2.call(null, G__14454);
                  }();
                  if (cljs.core.truth_(or__4225__auto____$2)) {
                    return or__4225__auto____$2;
                  } else {
                    var G__14455 = p1__14107_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14455) : p3.call(null, G__14455);
                  }
                }
              };
            }(or__4225__auto__), args);
          }
        };
        var G__14490 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14491__i = 0, G__14491__a = new Array(arguments.length - 3);
            while (G__14491__i < G__14491__a.length) {
              G__14491__a[G__14491__i] = arguments[G__14491__i + 3];
              ++G__14491__i;
            }
            args = new cljs.core.IndexedSeq(G__14491__a, 0);
          }
          return G__14490__delegate.call(this, x, y, z, args);
        };
        G__14490.cljs$lang$maxFixedArity = 3;
        G__14490.cljs$lang$applyTo = function(arglist__14492) {
          var x = cljs.core.first(arglist__14492);
          arglist__14492 = cljs.core.next(arglist__14492);
          var y = cljs.core.first(arglist__14492);
          arglist__14492 = cljs.core.next(arglist__14492);
          var z = cljs.core.first(arglist__14492);
          var args = cljs.core.rest(arglist__14492);
          return G__14490__delegate(x, y, z, args);
        };
        G__14490.cljs$core$IFn$_invoke$arity$variadic = G__14490__delegate;
        return G__14490;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            var G__14493 = null;
            if (arguments.length > 3) {
              var G__14494__i = 0, G__14494__a = new Array(arguments.length - 3);
              while (G__14494__i < G__14494__a.length) {
                G__14494__a[G__14494__i] = arguments[G__14494__i + 3];
                ++G__14494__i;
              }
              G__14493 = new cljs.core.IndexedSeq(G__14494__a, 0);
            }
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14493);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__14495__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__14108_SHARP_) {
                var G__14471 = x;
                return p1__14108_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14108_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14471) : p1__14108_SHARP_.call(null, G__14471);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__14109_SHARP_) {
                var or__4225__auto__ = function() {
                  var G__14473 = x;
                  return p1__14109_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14109_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14473) : p1__14109_SHARP_.call(null, G__14473);
                }();
                if (cljs.core.truth_(or__4225__auto__)) {
                  return or__4225__auto__;
                } else {
                  var G__14474 = y;
                  return p1__14109_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14109_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14474) : p1__14109_SHARP_.call(null, G__14474);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__14110_SHARP_) {
                var or__4225__auto__ = function() {
                  var G__14476 = x;
                  return p1__14110_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14110_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14476) : p1__14110_SHARP_.call(null, G__14476);
                }();
                if (cljs.core.truth_(or__4225__auto__)) {
                  return or__4225__auto__;
                } else {
                  var or__4225__auto____$1 = function() {
                    var G__14478 = y;
                    return p1__14110_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14110_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14478) : p1__14110_SHARP_.call(null, G__14478);
                  }();
                  if (cljs.core.truth_(or__4225__auto____$1)) {
                    return or__4225__auto____$1;
                  } else {
                    var G__14479 = z;
                    return p1__14110_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14110_SHARP_.cljs$core$IFn$_invoke$arity$1(G__14479) : p1__14110_SHARP_.call(null, G__14479);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__14496__delegate = function(x, y, z, args) {
              var or__4225__auto__ = spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__4225__auto__)) {
                return or__4225__auto__;
              } else {
                return cljs.core.some(function(or__4225__auto__, ps__$1) {
                  return function(p1__14111_SHARP_) {
                    return cljs.core.some(p1__14111_SHARP_, args);
                  };
                }(or__4225__auto__, ps__$1), ps__$1);
              }
            };
            var G__14496 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__14497__i = 0, G__14497__a = new Array(arguments.length - 3);
                while (G__14497__i < G__14497__a.length) {
                  G__14497__a[G__14497__i] = arguments[G__14497__i + 3];
                  ++G__14497__i;
                }
                args = new cljs.core.IndexedSeq(G__14497__a, 0);
              }
              return G__14496__delegate.call(this, x, y, z, args);
            };
            G__14496.cljs$lang$maxFixedArity = 3;
            G__14496.cljs$lang$applyTo = function(arglist__14498) {
              var x = cljs.core.first(arglist__14498);
              arglist__14498 = cljs.core.next(arglist__14498);
              var y = cljs.core.first(arglist__14498);
              arglist__14498 = cljs.core.next(arglist__14498);
              var z = cljs.core.first(arglist__14498);
              var args = cljs.core.rest(arglist__14498);
              return G__14496__delegate(x, y, z, args);
            };
            G__14496.cljs$core$IFn$_invoke$arity$variadic = G__14496__delegate;
            return G__14496;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                var G__14499 = null;
                if (arguments.length > 3) {
                  var G__14500__i = 0, G__14500__a = new Array(arguments.length - 3);
                  while (G__14500__i < G__14500__a.length) {
                    G__14500__a[G__14500__i] = arguments[G__14500__i + 3];
                    ++G__14500__i;
                  }
                  G__14499 = new cljs.core.IndexedSeq(G__14500__a, 0);
                }
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14499);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__14495 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__14501__i = 0, G__14501__a = new Array(arguments.length - 3);
        while (G__14501__i < G__14501__a.length) {
          G__14501__a[G__14501__i] = arguments[G__14501__i + 3];
          ++G__14501__i;
        }
        ps = new cljs.core.IndexedSeq(G__14501__a, 0);
      }
      return G__14495__delegate.call(this, p1, p2, p3, ps);
    };
    G__14495.cljs$lang$maxFixedArity = 3;
    G__14495.cljs$lang$applyTo = function(arglist__14502) {
      var p1 = cljs.core.first(arglist__14502);
      arglist__14502 = cljs.core.next(arglist__14502);
      var p2 = cljs.core.first(arglist__14502);
      arglist__14502 = cljs.core.next(arglist__14502);
      var p3 = cljs.core.first(arglist__14502);
      var ps = cljs.core.rest(arglist__14502);
      return G__14495__delegate(p1, p2, p3, ps);
    };
    G__14495.cljs$core$IFn$_invoke$arity$variadic = G__14495__delegate;
    return G__14495;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        var G__14503 = null;
        if (arguments.length > 3) {
          var G__14504__i = 0, G__14504__a = new Array(arguments.length - 3);
          while (G__14504__i < G__14504__a.length) {
            G__14504__a[G__14504__i] = arguments[G__14504__i + 3];
            ++G__14504__i;
          }
          G__14503 = new cljs.core.IndexedSeq(G__14504__a, 0);
        }
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__14503);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__14559 = null;
        var G__14559__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__14559__1 = function(result) {
          var G__14545 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14545) : rf.call(null, G__14545);
        };
        var G__14559__2 = function(result, input) {
          var G__14546 = result;
          var G__14547 = function() {
            var G__14548 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14548) : f.call(null, G__14548);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14546, G__14547) : rf.call(null, G__14546, G__14547);
        };
        var G__14559__3 = function() {
          var G__14560__delegate = function(result, input, inputs) {
            var G__14549 = result;
            var G__14550 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14549, G__14550) : rf.call(null, G__14549, G__14550);
          };
          var G__14560 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__14561__i = 0, G__14561__a = new Array(arguments.length - 2);
              while (G__14561__i < G__14561__a.length) {
                G__14561__a[G__14561__i] = arguments[G__14561__i + 2];
                ++G__14561__i;
              }
              inputs = new cljs.core.IndexedSeq(G__14561__a, 0);
            }
            return G__14560__delegate.call(this, result, input, inputs);
          };
          G__14560.cljs$lang$maxFixedArity = 2;
          G__14560.cljs$lang$applyTo = function(arglist__14562) {
            var result = cljs.core.first(arglist__14562);
            arglist__14562 = cljs.core.next(arglist__14562);
            var input = cljs.core.first(arglist__14562);
            var inputs = cljs.core.rest(arglist__14562);
            return G__14560__delegate(result, input, inputs);
          };
          G__14560.cljs$core$IFn$_invoke$arity$variadic = G__14560__delegate;
          return G__14560;
        }();
        G__14559 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__14559__0.call(this);
            case 1:
              return G__14559__1.call(this, result);
            case 2:
              return G__14559__2.call(this, result, input);
            default:
              var G__14563 = null;
              if (arguments.length > 2) {
                var G__14564__i = 0, G__14564__a = new Array(arguments.length - 2);
                while (G__14564__i < G__14564__a.length) {
                  G__14564__a[G__14564__i] = arguments[G__14564__i + 2];
                  ++G__14564__i;
                }
                G__14563 = new cljs.core.IndexedSeq(G__14564__a, 0);
              }
              return G__14559__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__14563);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14559.cljs$lang$maxFixedArity = 2;
        G__14559.cljs$lang$applyTo = G__14559__3.cljs$lang$applyTo;
        G__14559.cljs$core$IFn$_invoke$arity$0 = G__14559__0;
        G__14559.cljs$core$IFn$_invoke$arity$1 = G__14559__1;
        G__14559.cljs$core$IFn$_invoke$arity$2 = G__14559__2;
        G__14559.cljs$core$IFn$_invoke$arity$variadic = G__14559__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__14559;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5112__auto___14565 = size;
          var i_14566 = 0;
          while (true) {
            if (i_14566 < n__5112__auto___14565) {
              cljs.core.chunk_append(b, function() {
                var G__14551 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_14566);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14551) : f.call(null, G__14551);
              }());
              var G__14567 = i_14566 + 1;
              i_14566 = G__14567;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__14552 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14552) : f.call(null, G__14552);
          }(), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__14553 = cljs.core.first(s1);
          var G__14554 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14553, G__14554) : f.call(null, G__14553, G__14554);
        }(), map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__14555 = cljs.core.first(s1);
          var G__14556 = cljs.core.first(s2);
          var G__14557 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14555, G__14556, G__14557) : f.call(null, G__14555, G__14556, G__14557);
        }(), map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__14568__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), step(map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__14505_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__14505_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__14568 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__14569__i = 0, G__14569__a = new Array(arguments.length - 4);
        while (G__14569__i < G__14569__a.length) {
          G__14569__a[G__14569__i] = arguments[G__14569__i + 4];
          ++G__14569__i;
        }
        colls = new cljs.core.IndexedSeq(G__14569__a, 0);
      }
      return G__14568__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__14568.cljs$lang$maxFixedArity = 4;
    G__14568.cljs$lang$applyTo = function(arglist__14570) {
      var f = cljs.core.first(arglist__14570);
      arglist__14570 = cljs.core.next(arglist__14570);
      var c1 = cljs.core.first(arglist__14570);
      arglist__14570 = cljs.core.next(arglist__14570);
      var c2 = cljs.core.first(arglist__14570);
      arglist__14570 = cljs.core.next(arglist__14570);
      var c3 = cljs.core.first(arglist__14570);
      var colls = cljs.core.rest(arglist__14570);
      return G__14568__delegate(f, c1, c2, c3, colls);
    };
    G__14568.cljs$core$IFn$_invoke$arity$variadic = G__14568__delegate;
    return G__14568;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        var G__14571 = null;
        if (arguments.length > 4) {
          var G__14572__i = 0, G__14572__a = new Array(arguments.length - 4);
          while (G__14572__i < G__14572__a.length) {
            G__14572__a[G__14572__i] = arguments[G__14572__i + 4];
            ++G__14572__i;
          }
          G__14571 = new cljs.core.IndexedSeq(G__14572__a, 0);
        }
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__14571);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__14581 = null;
          var G__14581__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__14581__1 = function(result) {
            var G__14578 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14578) : rf.call(null, G__14578);
          };
          var G__14581__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__14579 = result;
              var G__14580 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14579, G__14580) : rf.call(null, G__14579, G__14580);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__14581 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14581__0.call(this);
              case 1:
                return G__14581__1.call(this, result);
              case 2:
                return G__14581__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14581.cljs$core$IFn$_invoke$arity$0 = G__14581__0;
          G__14581.cljs$core$IFn$_invoke$arity$1 = G__14581__1;
          G__14581.cljs$core$IFn$_invoke$arity$2 = G__14581__2;
          return G__14581;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__14588 = null;
          var G__14588__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__14588__1 = function(result) {
            var G__14585 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14585) : rf.call(null, G__14585);
          };
          var G__14588__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__14586 = result;
              var G__14587 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14586, G__14587) : rf.call(null, G__14586, G__14587);
            }
          };
          G__14588 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14588__0.call(this);
              case 1:
                return G__14588__1.call(this, result);
              case 2:
                return G__14588__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14588.cljs$core$IFn$_invoke$arity$0 = G__14588__0;
          G__14588.cljs$core$IFn$_invoke$arity$1 = G__14588__1;
          G__14588.cljs$core$IFn$_invoke$arity$2 = G__14588__2;
          return G__14588;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__14589 = n__$1 - 1;
          var G__14590 = cljs.core.rest(s);
          n__$1 = G__14589;
          coll__$1 = G__14590;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__14593 = cljs.core.next(s);
      var G__14594 = cljs.core.next(lead);
      s = G__14593;
      lead = G__14594;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__14607 = null;
          var G__14607__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__14607__1 = function(result) {
            var G__14601 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14601) : rf.call(null, G__14601);
          };
          var G__14607__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__4213__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__4213__auto__)) {
                var G__14602 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14602) : pred.call(null, G__14602);
              } else {
                return and__4213__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__14603 = result;
              var G__14604 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14603, G__14604) : rf.call(null, G__14603, G__14604);
            }
          };
          G__14607 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14607__0.call(this);
              case 1:
                return G__14607__1.call(this, result);
              case 2:
                return G__14607__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14607.cljs$core$IFn$_invoke$arity$0 = G__14607__0;
          G__14607.cljs$core$IFn$_invoke$arity$1 = G__14607__1;
          G__14607.cljs$core$IFn$_invoke$arity$2 = G__14607__2;
          return G__14607;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__4213__auto__ = s;
          if (and__4213__auto__) {
            var G__14606 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__14606) : pred__$1.call(null, G__14606);
          } else {
            return and__4213__auto__;
          }
        }())) {
          var G__14608 = pred__$1;
          var G__14609 = cljs.core.rest(s);
          pred__$1 = G__14608;
          coll__$1 = G__14609;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return iterate(f, function() {
      var G__14618 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14618) : f.call(null, G__14618);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__14621__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__14621 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__14622__i = 0, G__14622__a = new Array(arguments.length - 2);
        while (G__14622__i < G__14622__a.length) {
          G__14622__a[G__14622__i] = arguments[G__14622__i + 2];
          ++G__14622__i;
        }
        colls = new cljs.core.IndexedSeq(G__14622__a, 0);
      }
      return G__14621__delegate.call(this, c1, c2, colls);
    };
    G__14621.cljs$lang$maxFixedArity = 2;
    G__14621.cljs$lang$applyTo = function(arglist__14623) {
      var c1 = cljs.core.first(arglist__14623);
      arglist__14623 = cljs.core.next(arglist__14623);
      var c2 = cljs.core.first(arglist__14623);
      var colls = cljs.core.rest(arglist__14623);
      return G__14621__delegate(c1, c2, colls);
    };
    G__14621.cljs$core$IFn$_invoke$arity$variadic = G__14621__delegate;
    return G__14621;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        var G__14624 = null;
        if (arguments.length > 2) {
          var G__14625__i = 0, G__14625__a = new Array(arguments.length - 2);
          while (G__14625__i < G__14625__a.length) {
            G__14625__a[G__14625__i] = arguments[G__14625__i + 2];
            ++G__14625__i;
          }
          G__14624 = new cljs.core.IndexedSeq(G__14625__a, 0);
        }
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__14624);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function() {
  var interpose = null;
  var interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__14640 = null;
          var G__14640__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__14640__1 = function(result) {
            var G__14633 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14633) : rf.call(null, G__14633);
          };
          var G__14640__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__14634 = result;
                var G__14635 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14634, G__14635) : rf.call(null, G__14634, G__14635);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__14636 = sepr;
                var G__14637 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14636, G__14637) : rf.call(null, G__14636, G__14637);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__14638 = result;
              var G__14639 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14638, G__14639) : rf.call(null, G__14638, G__14639);
            }
          };
          G__14640 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14640__0.call(this);
              case 1:
                return G__14640__1.call(this, result);
              case 2:
                return G__14640__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14640.cljs$core$IFn$_invoke$arity$0 = G__14640__0;
          G__14640.cljs$core$IFn$_invoke$arity$1 = G__14640__1;
          G__14640.cljs$core$IFn$_invoke$arity$2 = G__14640__2;
          return G__14640;
        }();
      }(started);
    };
  };
  var interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return interpose__1.call(this, sep);
      case 2:
        return interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpose.cljs$core$IFn$_invoke$arity$1 = interpose__1;
  interpose.cljs$core$IFn$_invoke$arity$2 = interpose__2;
  return interpose;
}();
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__14649__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__14649 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__14650__i = 0, G__14650__a = new Array(arguments.length - 1);
        while (G__14650__i < G__14650__a.length) {
          G__14650__a[G__14650__i] = arguments[G__14650__i + 1];
          ++G__14650__i;
        }
        colls = new cljs.core.IndexedSeq(G__14650__a, 0);
      }
      return G__14649__delegate.call(this, f, colls);
    };
    G__14649.cljs$lang$maxFixedArity = 1;
    G__14649.cljs$lang$applyTo = function(arglist__14651) {
      var f = cljs.core.first(arglist__14651);
      var colls = cljs.core.rest(arglist__14651);
      return G__14649__delegate(f, colls);
    };
    G__14649.cljs$core$IFn$_invoke$arity$variadic = G__14649__delegate;
    return G__14649;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        var G__14652 = null;
        if (arguments.length > 1) {
          var G__14653__i = 0, G__14653__a = new Array(arguments.length - 1);
          while (G__14653__i < G__14653__a.length) {
            G__14653__a[G__14653__i] = arguments[G__14653__i + 1];
            ++G__14653__i;
          }
          G__14652 = new cljs.core.IndexedSeq(G__14653__a, 0);
        }
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__14652);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__14672 = null;
        var G__14672__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__14672__1 = function(result) {
          var G__14666 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14666) : rf.call(null, G__14666);
        };
        var G__14672__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__14667 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14667) : pred.call(null, G__14667);
          }())) {
            var G__14668 = result;
            var G__14669 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14668, G__14669) : rf.call(null, G__14668, G__14669);
          } else {
            return result;
          }
        };
        G__14672 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__14672__0.call(this);
            case 1:
              return G__14672__1.call(this, result);
            case 2:
              return G__14672__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14672.cljs$core$IFn$_invoke$arity$0 = G__14672__0;
        G__14672.cljs$core$IFn$_invoke$arity$1 = G__14672__1;
        G__14672.cljs$core$IFn$_invoke$arity$2 = G__14672__2;
        return G__14672;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5112__auto___14673 = size;
          var i_14674 = 0;
          while (true) {
            if (i_14674 < n__5112__auto___14673) {
              if (cljs.core.truth_(function() {
                var G__14670 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_14674);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14670) : pred.call(null, G__14670);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_14674));
              } else {
              }
              var G__14675 = i_14674 + 1;
              i_14674 = G__14675;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__14671 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14671) : pred.call(null, G__14671);
          }())) {
            return cljs.core.cons(f, filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__14682 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__14682) : branch_QMARK_.call(null, G__14682);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(walk, cljs.core.array_seq([function() {
        var G__14683 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__14683) : children.call(null, G__14683);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__14684_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__14684_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__14687 = to;
        if (G__14687) {
          var bit__4899__auto__ = G__14687.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4899__auto__ || G__14687.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__14688 = to;
      if (G__14688) {
        var bit__4899__auto__ = G__14688.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4899__auto__ || G__14688.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__14690 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14690) : f.call(null, G__14690);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__14691__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__14691 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__14692__i = 0, G__14692__a = new Array(arguments.length - 4);
        while (G__14692__i < G__14692__a.length) {
          G__14692__a[G__14692__i] = arguments[G__14692__i + 4];
          ++G__14692__i;
        }
        colls = new cljs.core.IndexedSeq(G__14692__a, 0);
      }
      return G__14691__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__14691.cljs$lang$maxFixedArity = 4;
    G__14691.cljs$lang$applyTo = function(arglist__14693) {
      var f = cljs.core.first(arglist__14693);
      arglist__14693 = cljs.core.next(arglist__14693);
      var c1 = cljs.core.first(arglist__14693);
      arglist__14693 = cljs.core.next(arglist__14693);
      var c2 = cljs.core.first(arglist__14693);
      arglist__14693 = cljs.core.next(arglist__14693);
      var c3 = cljs.core.first(arglist__14693);
      var colls = cljs.core.rest(arglist__14693);
      return G__14691__delegate(f, c1, c2, c3, colls);
    };
    G__14691.cljs$core$IFn$_invoke$arity$variadic = G__14691__delegate;
    return G__14691;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__14694 = null;
        if (arguments.length > 4) {
          var G__14695__i = 0, G__14695__a = new Array(arguments.length - 4);
          while (G__14695__i < G__14695__a.length) {
            G__14695__a[G__14695__i] = arguments[G__14695__i + 4];
            ++G__14695__i;
          }
          G__14694 = new cljs.core.IndexedSeq(G__14695__a, 0);
        }
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__14694);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__14697 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14697) : pred.call(null, G__14697);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__14712 = m__$1;
          if (G__14712) {
            var bit__4906__auto__ = G__14712.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4906__auto__ || G__14712.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__14712.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__14712);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__14712);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__14713 = sentinel;
            var G__14714 = m__$2;
            var G__14715 = cljs.core.next(ks__$1);
            sentinel = G__14713;
            m__$1 = G__14714;
            ks__$1 = G__14715;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__14716, v) {
  var vec__14721 = p__14716;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14721, 0, null);
  var ks = cljs.core.nthnext(vec__14721, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__14722, f) {
    var vec__14760 = p__14722;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14760, 0, null);
    var ks = cljs.core.nthnext(vec__14760, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__14761 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14761) : f.call(null, G__14761);
      }());
    }
  };
  var update_in__4 = function(m, p__14723, f, a) {
    var vec__14762 = p__14723;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14762, 0, null);
    var ks = cljs.core.nthnext(vec__14762, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__14763 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__14764 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14763, G__14764) : f.call(null, G__14763, G__14764);
      }());
    }
  };
  var update_in__5 = function(m, p__14724, f, a, b) {
    var vec__14765 = p__14724;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14765, 0, null);
    var ks = cljs.core.nthnext(vec__14765, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__14766 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__14767 = a;
        var G__14768 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14766, G__14767, G__14768) : f.call(null, G__14766, G__14767, G__14768);
      }());
    }
  };
  var update_in__6 = function(m, p__14725, f, a, b, c) {
    var vec__14769 = p__14725;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14769, 0, null);
    var ks = cljs.core.nthnext(vec__14769, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__14770 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__14771 = a;
        var G__14772 = b;
        var G__14773 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14770, G__14771, G__14772, G__14773) : f.call(null, G__14770, G__14771, G__14772, G__14773);
      }());
    }
  };
  var update_in__7 = function() {
    var G__14775__delegate = function(m, p__14726, f, a, b, c, args) {
      var vec__14774 = p__14726;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14774, 0, null);
      var ks = cljs.core.nthnext(vec__14774, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__14775 = function(m, p__14726, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__14776__i = 0, G__14776__a = new Array(arguments.length - 6);
        while (G__14776__i < G__14776__a.length) {
          G__14776__a[G__14776__i] = arguments[G__14776__i + 6];
          ++G__14776__i;
        }
        args = new cljs.core.IndexedSeq(G__14776__a, 0);
      }
      return G__14775__delegate.call(this, m, p__14726, f, a, b, c, args);
    };
    G__14775.cljs$lang$maxFixedArity = 6;
    G__14775.cljs$lang$applyTo = function(arglist__14777) {
      var m = cljs.core.first(arglist__14777);
      arglist__14777 = cljs.core.next(arglist__14777);
      var p__14726 = cljs.core.first(arglist__14777);
      arglist__14777 = cljs.core.next(arglist__14777);
      var f = cljs.core.first(arglist__14777);
      arglist__14777 = cljs.core.next(arglist__14777);
      var a = cljs.core.first(arglist__14777);
      arglist__14777 = cljs.core.next(arglist__14777);
      var b = cljs.core.first(arglist__14777);
      arglist__14777 = cljs.core.next(arglist__14777);
      var c = cljs.core.first(arglist__14777);
      var args = cljs.core.rest(arglist__14777);
      return G__14775__delegate(m, p__14726, f, a, b, c, args);
    };
    G__14775.cljs$core$IFn$_invoke$arity$variadic = G__14775__delegate;
    return G__14775;
  }();
  update_in = function(m, p__14726, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__14726, f);
      case 4:
        return update_in__4.call(this, m, p__14726, f, a);
      case 5:
        return update_in__5.call(this, m, p__14726, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__14726, f, a, b, c);
      default:
        var G__14778 = null;
        if (arguments.length > 6) {
          var G__14779__i = 0, G__14779__a = new Array(arguments.length - 6);
          while (G__14779__i < G__14779__a.length) {
            G__14779__a[G__14779__i] = arguments[G__14779__i + 6];
            ++G__14779__i;
          }
          G__14778 = new cljs.core.IndexedSeq(G__14779__a, 0);
        }
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__14726, f, a, b, c, G__14778);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__14790 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14790) : f.call(null, G__14790);
    }());
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__14791 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__14792 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14791, G__14792) : f.call(null, G__14791, G__14792);
    }());
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__14793 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__14794 = x;
      var G__14795 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14793, G__14794, G__14795) : f.call(null, G__14793, G__14794, G__14795);
    }());
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__14796 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__14797 = x;
      var G__14798 = y;
      var G__14799 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14796, G__14797, G__14798, G__14799) : f.call(null, G__14796, G__14797, G__14798, G__14799);
    }());
  };
  var update__7 = function() {
    var G__14800__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__14800 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__14801__i = 0, G__14801__a = new Array(arguments.length - 6);
        while (G__14801__i < G__14801__a.length) {
          G__14801__a[G__14801__i] = arguments[G__14801__i + 6];
          ++G__14801__i;
        }
        more = new cljs.core.IndexedSeq(G__14801__a, 0);
      }
      return G__14800__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__14800.cljs$lang$maxFixedArity = 6;
    G__14800.cljs$lang$applyTo = function(arglist__14802) {
      var m = cljs.core.first(arglist__14802);
      arglist__14802 = cljs.core.next(arglist__14802);
      var k = cljs.core.first(arglist__14802);
      arglist__14802 = cljs.core.next(arglist__14802);
      var f = cljs.core.first(arglist__14802);
      arglist__14802 = cljs.core.next(arglist__14802);
      var x = cljs.core.first(arglist__14802);
      arglist__14802 = cljs.core.next(arglist__14802);
      var y = cljs.core.first(arglist__14802);
      arglist__14802 = cljs.core.next(arglist__14802);
      var z = cljs.core.first(arglist__14802);
      var more = cljs.core.rest(arglist__14802);
      return G__14800__delegate(m, k, f, x, y, z, more);
    };
    G__14800.cljs$core$IFn$_invoke$arity$variadic = G__14800__delegate;
    return G__14800;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        var G__14803 = null;
        if (arguments.length > 6) {
          var G__14804__i = 0, G__14804__a = new Array(arguments.length - 6);
          while (G__14804__i < G__14804__a.length) {
            G__14804__a[G__14804__i] = arguments[G__14804__i + 6];
            ++G__14804__i;
          }
          G__14803 = new cljs.core.IndexedSeq(G__14804__a, 0);
        }
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__14803);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__14805 = ll - 5;
      var G__14806 = r;
      ll = G__14805;
      ret = G__14806;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__14811 = cljs.core.pv_aget(node, 0);
      var G__14812 = level - 5;
      node = G__14811;
      level = G__14812;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__14813 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__14814 = level - 5;
        node = G__14813;
        level = G__14814;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__14824 = init__$2;
              var G__14825 = j + i;
              var G__14826 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14824, G__14825, G__14826) : f.call(null, G__14824, G__14825, G__14826);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__14837 = j + 1;
              var G__14838 = init__$3;
              j = G__14837;
              init__$2 = G__14838;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__14827 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__14827) : cljs.core.deref.call(null, G__14827);
      } else {
        var G__14839 = i + len;
        var G__14840 = init__$2;
        i = G__14839;
        init__$1 = G__14840;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__14828 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__14828) : cljs.core.tv_editable_root.call(null, G__14828);
  }(), function() {
    var G__14829 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__14829) : cljs.core.tv_editable_tail.call(null, G__14829);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__14830 = init__$2;
              var G__14831 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14830, G__14831) : f.call(null, G__14830, G__14831);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__14841 = j + 1;
              var G__14842 = init__$3;
              j = G__14841;
              init__$2 = G__14842;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__14832 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__14832) : cljs.core.deref.call(null, G__14832);
      } else {
        var G__14843 = i + len;
        var G__14844 = init__$2;
        i = G__14843;
        init__$1 = G__14844;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__14833 = coll__$1;
      var G__14834 = cljs.core.first_array_for_longvec(coll__$1);
      var G__14835 = 0;
      var G__14836 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__14833, G__14834, G__14835, G__14836) : cljs.core.chunked_seq.call(null, G__14833, G__14834, G__14835, G__14836);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5112__auto___14845 = len;
    var i_14846 = 0;
    while (true) {
      if (i_14846 < n__5112__auto___14845) {
        new_tail[i_14846] = self__.tail[i_14846];
        var G__14847 = i_14846 + 1;
        i_14846 = G__14847;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__14848 = null;
  var G__14848__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__14848__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__14848 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14848__2.call(this, self__, k);
      case 3:
        return G__14848__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14848.cljs$core$IFn$_invoke$arity$2 = G__14848__2;
  G__14848.cljs$core$IFn$_invoke$arity$3 = G__14848__3;
  return G__14848;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args14823) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14823)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__14849 = i + 1;
        var G__14850 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__14849;
        out = G__14850;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.vec = function vec(coll) {
  if (coll instanceof Array) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__14851__i = 0, G__14851__a = new Array(arguments.length - 0);
      while (G__14851__i < G__14851__a.length) {
        G__14851__a[G__14851__i] = arguments[G__14851__i + 0];
        ++G__14851__i;
      }
      args = new cljs.core.IndexedSeq(G__14851__a, 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__14852) {
    var args = cljs.core.seq(arglist__14852);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__14853 = self__.vec;
      var G__14854 = self__.node;
      var G__14855 = self__.i;
      var G__14856 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__14853, G__14854, G__14855, G__14856) : cljs.core.chunked_seq.call(null, G__14853, G__14854, G__14855, G__14856);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__14857 = self__.vec;
    var G__14858 = self__.i + self__.off;
    var G__14859 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__14857, G__14858, G__14859) : cljs.core.subvec.call(null, G__14857, G__14858, G__14859);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__14860 = self__.vec;
    var G__14861 = self__.i + self__.off;
    var G__14862 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__14860, G__14861, G__14862) : cljs.core.subvec.call(null, G__14860, G__14861, G__14862);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__14863 = self__.vec;
      var G__14864 = self__.node;
      var G__14865 = self__.i;
      var G__14866 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__14863, G__14864, G__14865, G__14866) : cljs.core.chunked_seq.call(null, G__14863, G__14864, G__14865, G__14866);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__14867 = self__.vec;
    var G__14868 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__14869 = end;
    var G__14870 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__14867, G__14868, G__14869, G__14870) : cljs.core.chunked_seq.call(null, G__14867, G__14868, G__14869, G__14870);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__14871 = self__.vec;
  var G__14872 = self__.node;
  var G__14873 = self__.i;
  var G__14874 = self__.off;
  var G__14875 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__14871, G__14872, G__14873, G__14874, G__14875) : cljs.core.chunked_seq.call(null, G__14871, G__14872, G__14873, G__14874, G__14875);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__14876 = self__.vec;
    var G__14877 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__14878 = end;
    var G__14879 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__14876, G__14877, G__14878, G__14879) : cljs.core.chunked_seq.call(null, G__14876, G__14877, G__14878, G__14879);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__14881 = self__.meta;
  var G__14882 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__14883 = self__.start;
  var G__14884 = function() {
    var x__4542__auto__ = self__.end;
    var y__4543__auto__ = v_pos + 1;
    return x__4542__auto__ > y__4543__auto__ ? x__4542__auto__ : y__4543__auto__;
  }();
  var G__14885 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__14881, G__14882, G__14883, G__14884, G__14885) : cljs.core.build_subvec.call(null, G__14881, G__14882, G__14883, G__14884, G__14885);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__14886 = self__.meta;
    var G__14887 = self__.v;
    var G__14888 = self__.start;
    var G__14889 = self__.end - 1;
    var G__14890 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__14886, G__14887, G__14888, G__14889, G__14890) : cljs.core.build_subvec.call(null, G__14886, G__14887, G__14888, G__14889, G__14890);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__14892 = meta__$1;
  var G__14893 = self__.v;
  var G__14894 = self__.start;
  var G__14895 = self__.end;
  var G__14896 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__14892, G__14893, G__14894, G__14895, G__14896) : cljs.core.build_subvec.call(null, G__14892, G__14893, G__14894, G__14895, G__14896);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__14897 = self__.meta;
  var G__14898 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__14899 = self__.start;
  var G__14900 = self__.end + 1;
  var G__14901 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__14897, G__14898, G__14899, G__14900, G__14901) : cljs.core.build_subvec.call(null, G__14897, G__14898, G__14899, G__14900, G__14901);
};
cljs.core.Subvec.prototype.call = function() {
  var G__14902 = null;
  var G__14902__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__14902__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__14902 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14902__2.call(this, self__, k);
      case 3:
        return G__14902__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14902.cljs$core$IFn$_invoke$arity$2 = G__14902__2;
  G__14902.cljs$core$IFn$_invoke$arity$3 = G__14902__3;
  return G__14902;
}();
cljs.core.Subvec.prototype.apply = function(self__, args14880) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14880)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__14903 = meta;
      var G__14904 = v.v;
      var G__14905 = v.start + start;
      var G__14906 = v.start + end;
      var G__14907 = __hash;
      meta = G__14903;
      v = G__14904;
      start = G__14905;
      end = G__14906;
      __hash = G__14907;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj14914 = {};
    return obj14914;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__14922 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__14923 = level - 5;
        node = G__14922;
        level = G__14923;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__14927 = null;
  var G__14927__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14927__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14927 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14927__2.call(this, self__, k);
      case 3:
        return G__14927__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14927.cljs$core$IFn$_invoke$arity$2 = G__14927__2;
  G__14927.cljs$core$IFn$_invoke$arity$3 = G__14927__3;
  return G__14927;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args14924) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14924)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4225__auto__ = self__.front;
    if (cljs.core.truth_(or__4225__auto__)) {
      return or__4225__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4225__auto__ = self__.rear;
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__14928 = i + incr;
        i = G__14928;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__14929 = i + 1;
      var G__14930 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__14929;
      out = G__14930;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj14934 = {};
    return obj14934;
  }();
  var l = ks.length;
  var i_14935 = 0;
  while (true) {
    if (i_14935 < l) {
      var k_14936 = ks[i_14935];
      new_obj[k_14936] = obj[k_14936];
      var G__14937 = i_14935 + 1;
      i_14935 = G__14937;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4213__auto__ = function() {
      var G__14941 = k;
      return goog.isString(G__14941);
    }();
    if (cljs.core.truth_(and__4213__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4213__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__14942 = init__$1;
        var G__14943 = k;
        var G__14944 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14942, G__14943, G__14944) : f.call(null, G__14942, G__14943, G__14944);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__14945 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__14945) : cljs.core.deref.call(null, G__14945);
      } else {
        var G__14951 = cljs.core.rest(keys__$1);
        var G__14952 = init__$2;
        keys__$1 = G__14951;
        init__$1 = G__14952;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4213__auto__ = function() {
      var G__14947 = k;
      return goog.isString(G__14947);
    }();
    if (cljs.core.truth_(and__4213__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4213__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__14948 = k;
    return goog.isString(G__14948);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4213__auto__ = function() {
      var G__14950 = k;
      return goog.isString(G__14950);
    }();
    if (cljs.core.truth_(and__4213__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4213__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__14938_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__14938_SHARP_, self__.strobj[p1__14938_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__14953 = null;
  var G__14953__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14953__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14953 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14953__2.call(this, self__, k);
      case 3:
        return G__14953__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14953.cljs$core$IFn$_invoke$arity$2 = G__14953__2;
  G__14953.cljs$core$IFn$_invoke$arity$3 = G__14953__3;
  return G__14953;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args14939) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14939)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj14955 = {};
  return obj14955;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__14956 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14956, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14956, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__14957 = i + 2;
        i = G__14957;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__14958 = i + 2;
        i = G__14958;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__14959 = i + 2;
        i = G__14959;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__14960 = i + 2;
        i = G__14960;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__14961 = i + 2;
        i = G__14961;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4225__auto__ = function() {
        var G__14965 = k;
        return goog.isString(G__14965);
      }();
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_14966 = 0;
  while (true) {
    if (i_14966 < l) {
      narr[i_14966] = arr[i_14966];
      var G__14967 = i_14966 + 1;
      i_14966 = G__14967;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__14969 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__14969) : cljs.core.keys.call(null, G__14969);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__14970 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__14970) : cljs.core.vals.call(null, G__14970);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__14971 = cljs.core.seq(coll);
  var chunk__14972 = null;
  var count__14973 = 0;
  var i__14974 = 0;
  while (true) {
    if (i__14974 < count__14973) {
      var vec__14975 = chunk__14972.cljs$core$IIndexed$_nth$arity$2(null, i__14974);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14975, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14975, 1, null);
      var G__14976_14989 = v;
      var G__14977_14990 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14976_14989, G__14977_14990) : f.call(null, G__14976_14989, G__14977_14990);
      var G__14991 = seq__14971;
      var G__14992 = chunk__14972;
      var G__14993 = count__14973;
      var G__14994 = i__14974 + 1;
      seq__14971 = G__14991;
      chunk__14972 = G__14992;
      count__14973 = G__14993;
      i__14974 = G__14994;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__14971);
      if (temp__4126__auto__) {
        var seq__14971__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__14971__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__14971__$1);
          var G__14995 = cljs.core.chunk_rest(seq__14971__$1);
          var G__14996 = c__5012__auto__;
          var G__14997 = cljs.core.count(c__5012__auto__);
          var G__14998 = 0;
          seq__14971 = G__14995;
          chunk__14972 = G__14996;
          count__14973 = G__14997;
          i__14974 = G__14998;
          continue;
        } else {
          var vec__14978 = cljs.core.first(seq__14971__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14978, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14978, 1, null);
          var G__14979_14999 = v;
          var G__14980_15000 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14979_14999, G__14980_15000) : f.call(null, G__14979_14999, G__14980_15000);
          var G__15001 = cljs.core.next(seq__14971__$1);
          var G__15002 = null;
          var G__15003 = 0;
          var G__15004 = 0;
          seq__14971 = G__15001;
          chunk__14972 = G__15002;
          count__14973 = G__15003;
          i__14974 = G__15004;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__14981 = init__$1;
        var G__14982 = self__.arr[i];
        var G__14983 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14981, G__14982, G__14983) : f.call(null, G__14981, G__14982, G__14983);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__14984 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__14984) : cljs.core.deref.call(null, G__14984);
      } else {
        var G__15005 = i + 2;
        var G__15006 = init__$2;
        i = G__15005;
        init__$1 = G__15006;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__14985 = other;
    if (G__14985) {
      var bit__4899__auto__ = G__14985.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4899__auto__ || G__14985.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__15007 = i + 2;
              i = G__15007;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj14987 = {};
    return obj14987;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__15008 = s + 2;
            var G__15009 = d;
            s = G__15008;
            d = G__15009;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__15010 = s + 2;
            var G__15011 = d + 2;
            s = G__15010;
            d = G__15011;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__14988 = cljs.core.aclone(self__.arr);
        G__14988[idx + 1] = v;
        return G__14988;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__15012 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__15013 = cljs.core.next(es);
          ret = G__15012;
          es = G__15013;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__15014 = null;
  var G__15014__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15014__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15014 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15014__2.call(this, self__, k);
      case 3:
        return G__15014__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15014.cljs$core$IFn$_invoke$arity$2 = G__15014__2;
  G__15014.cljs$core$IFn$_invoke$arity$3 = G__15014__3;
  return G__15014;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args14968) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14968)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15015 = i + 2;
        var G__15016 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__15015;
        ret = G__15016;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__15017_15025 = self__.arr;
      G__15017_15025.pop();
      G__15017_15025.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__15018 = self__.len;
          var G__15019 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__15018, G__15019) : cljs.core.array__GT_transient_hash_map.call(null, G__15018, G__15019);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__15020 = o;
      if (G__15020) {
        var bit__4906__auto__ = G__15020.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4906__auto__ || G__15020.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15020.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__15020);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__15020);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__15021 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15021) : cljs.core.key.call(null, G__15021);
      }(), function() {
        var G__15022 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15022) : cljs.core.val.call(null, G__15022);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__15026 = cljs.core.next(es);
          var G__15027 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__15023 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15023) : cljs.core.key.call(null, G__15023);
          }(), function() {
            var G__15024 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15024) : cljs.core.val.call(null, G__15024);
          }());
          es = G__15026;
          tcoll__$2 = G__15027;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__15028 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__15029 = i + 2;
      out = G__15028;
      i = G__15029;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__15032 = cljs.core.aclone(arr);
    G__15032[i] = a;
    return G__15032;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__15033 = cljs.core.aclone(arr);
    G__15033[i] = a;
    G__15033[j] = b;
    return G__15033;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__15038 = init__$1;
          var G__15039 = k;
          var G__15040 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15038, G__15039, G__15040) : f.call(null, G__15038, G__15039, G__15040);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__15041 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15041) : cljs.core.deref.call(null, G__15041);
      } else {
        var G__15042 = i + 2;
        var G__15043 = init__$2;
        i = G__15042;
        init__$1 = G__15043;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__15044 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__15044) : cljs.core.create_inode_seq.call(null, G__15044);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_15058 = 0;
        var j_15059 = 0;
        while (true) {
          if (i_15058 < 32) {
            if ((self__.bitmap >>> i_15058 & 1) === 0) {
              var G__15060 = i_15058 + 1;
              var G__15061 = j_15059;
              i_15058 = G__15060;
              j_15059 = G__15061;
              continue;
            } else {
              nodes[i_15058] = !(self__.arr[j_15059] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_15059]), self__.arr[j_15059], self__.arr[j_15059 + 1], added_leaf_QMARK_) : self__.arr[j_15059 + 1];
              var G__15062 = i_15058 + 1;
              var G__15063 = j_15059 + 2;
              i_15058 = G__15062;
              j_15059 = G__15063;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__15045 = edit__$1;
          var G__15046 = shift + 5;
          var G__15047 = key_or_nil;
          var G__15048 = val_or_node;
          var G__15049 = hash;
          var G__15050 = key;
          var G__15051 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__15045, G__15046, G__15047, G__15048, G__15049, G__15050, G__15051) : cljs.core.create_node.call(null, G__15045, G__15046, G__15047, G__15048, G__15049, G__15050, G__15051);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_15064 = 0;
      var j_15065 = 0;
      while (true) {
        if (i_15064 < 32) {
          if ((self__.bitmap >>> i_15064 & 1) === 0) {
            var G__15066 = i_15064 + 1;
            var G__15067 = j_15065;
            i_15064 = G__15066;
            j_15065 = G__15067;
            continue;
          } else {
            nodes[i_15064] = !(self__.arr[j_15065] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_15065]), self__.arr[j_15065], self__.arr[j_15065 + 1], added_leaf_QMARK_) : self__.arr[j_15065 + 1];
            var G__15068 = i_15064 + 1;
            var G__15069 = j_15065 + 2;
            i_15064 = G__15068;
            j_15065 = G__15069;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__15052 = shift + 5;
          var G__15053 = key_or_nil;
          var G__15054 = val_or_node;
          var G__15055 = hash;
          var G__15056 = key;
          var G__15057 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__15052, G__15053, G__15054, G__15055, G__15056, G__15057) : cljs.core.create_node.call(null, G__15052, G__15053, G__15054, G__15055, G__15056, G__15057);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__15070 = i + 1;
        var G__15071 = j + 2;
        var G__15072 = bitmap | 1 << i;
        i = G__15070;
        j = G__15071;
        bitmap = G__15072;
        continue;
      } else {
        var G__15073 = i + 1;
        var G__15074 = j;
        var G__15075 = bitmap;
        i = G__15073;
        j = G__15074;
        bitmap = G__15075;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__15076 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__15076) : cljs.core.create_array_node_seq.call(null, G__15076);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__15077 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15077) : cljs.core.deref.call(null, G__15077);
        } else {
          var G__15078 = i + 1;
          var G__15079 = init__$2;
          i = G__15078;
          init__$1 = G__15079;
          continue;
        }
      } else {
        var G__15080 = i + 1;
        var G__15081 = init__$1;
        i = G__15080;
        init__$1 = G__15081;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__15082 = i + 2;
        i = G__15082;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__15083 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__15083) : cljs.core.create_inode_seq.call(null, G__15083);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__15084 = self__.nodes;
    var G__15085 = self__.i + 2;
    var G__15086 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__15084, G__15085, G__15086) : cljs.core.create_inode_seq.call(null, G__15084, G__15085, G__15086);
  } else {
    var G__15087 = self__.nodes;
    var G__15088 = self__.i;
    var G__15089 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__15087, G__15088, G__15089) : cljs.core.create_inode_seq.call(null, G__15087, G__15088, G__15089);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__15093 = j + 2;
                j = G__15093;
                continue;
              }
            } else {
              var G__15094 = j + 2;
              j = G__15094;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__15095 = null;
  var G__15096 = self__.nodes;
  var G__15097 = self__.i;
  var G__15098 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__15095, G__15096, G__15097, G__15098) : cljs.core.create_array_node_seq.call(null, G__15095, G__15096, G__15097, G__15098);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__15103 = j + 1;
              j = G__15103;
              continue;
            }
          } else {
            var G__15104 = j + 1;
            j = G__15104;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__15106 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__15106) : cljs.core.keys.call(null, G__15106);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__15107 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__15107) : cljs.core.vals.call(null, G__15107);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__15108 = cljs.core.seq(coll);
  var chunk__15109 = null;
  var count__15110 = 0;
  var i__15111 = 0;
  while (true) {
    if (i__15111 < count__15110) {
      var vec__15112 = chunk__15109.cljs$core$IIndexed$_nth$arity$2(null, i__15111);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15112, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15112, 1, null);
      var G__15113_15124 = v;
      var G__15114_15125 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15113_15124, G__15114_15125) : f.call(null, G__15113_15124, G__15114_15125);
      var G__15126 = seq__15108;
      var G__15127 = chunk__15109;
      var G__15128 = count__15110;
      var G__15129 = i__15111 + 1;
      seq__15108 = G__15126;
      chunk__15109 = G__15127;
      count__15110 = G__15128;
      i__15111 = G__15129;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__15108);
      if (temp__4126__auto__) {
        var seq__15108__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__15108__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__15108__$1);
          var G__15130 = cljs.core.chunk_rest(seq__15108__$1);
          var G__15131 = c__5012__auto__;
          var G__15132 = cljs.core.count(c__5012__auto__);
          var G__15133 = 0;
          seq__15108 = G__15130;
          chunk__15109 = G__15131;
          count__15110 = G__15132;
          i__15111 = G__15133;
          continue;
        } else {
          var vec__15115 = cljs.core.first(seq__15108__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15115, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15115, 1, null);
          var G__15116_15134 = v;
          var G__15117_15135 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15116_15134, G__15117_15135) : f.call(null, G__15116_15134, G__15117_15135);
          var G__15136 = cljs.core.next(seq__15108__$1);
          var G__15137 = null;
          var G__15138 = 0;
          var G__15139 = 0;
          seq__15108 = G__15136;
          chunk__15109 = G__15137;
          count__15110 = G__15138;
          i__15111 = G__15139;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__15118 = init;
    var G__15119 = null;
    var G__15120 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15118, G__15119, G__15120) : f.call(null, G__15118, G__15119, G__15120);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__15121 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15121) : cljs.core.deref.call(null, G__15121);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj15123 = {};
    return obj15123;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__15140 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__15141 = cljs.core.next(es);
          ret = G__15140;
          es = G__15141;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__15142 = null;
  var G__15142__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15142__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15142 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15142__2.call(this, self__, k);
      case 3:
        return G__15142__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15142.cljs$core$IFn$_invoke$arity$2 = G__15142__2;
  G__15142.cljs$core$IFn$_invoke$arity$3 = G__15142__3;
  return G__15142;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args15105) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15105)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__15143 = i + 2;
      var G__15144 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__15143;
      ret = G__15144;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__15145 = i + 1;
      var G__15146 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__15145;
      out = G__15146;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__15147 = o;
      if (G__15147) {
        var bit__4906__auto__ = G__15147.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4906__auto__ || G__15147.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15147.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__15147);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__15147);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__15148 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15148) : cljs.core.key.call(null, G__15148);
      }(), function() {
        var G__15149 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15149) : cljs.core.val.call(null, G__15149);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__15152 = cljs.core.next(es);
          var G__15153 = tcoll__$1.assoc_BANG_(function() {
            var G__15150 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15150) : cljs.core.key.call(null, G__15150);
          }(), function() {
            var G__15151 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15151) : cljs.core.val.call(null, G__15151);
          }());
          es = G__15152;
          tcoll__$1 = G__15153;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__15154 = ascending_QMARK_ ? t.left : t.right;
      var G__15155 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__15154;
      stack__$1 = G__15155;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__15168 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15168) : cljs.core.deref.call(null, G__15168);
  } else {
    var init__$2 = function() {
      var G__15169 = init__$1;
      var G__15170 = node.key;
      var G__15171 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15169, G__15170, G__15171) : f.call(null, G__15169, G__15170, G__15171);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__15172 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15172) : cljs.core.deref.call(null, G__15172);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__15173 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15173) : cljs.core.deref.call(null, G__15173);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__15175 = null;
  var G__15175__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15175__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15175 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15175__2.call(this, self__, k);
      case 3:
        return G__15175__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15175.cljs$core$IFn$_invoke$arity$2 = G__15175__2;
  G__15175.cljs$core$IFn$_invoke$arity$3 = G__15175__3;
  return G__15175;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args15174) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15174)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__15177 = null;
  var G__15177__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15177__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15177 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15177__2.call(this, self__, k);
      case 3:
        return G__15177__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15177.cljs$core$IFn$_invoke$arity$2 = G__15177__2;
  G__15177.cljs$core$IFn$_invoke$arity$3 = G__15177__3;
  return G__15177;
}();
cljs.core.RedNode.prototype.apply = function(self__, args15176) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15176)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__15190 = k;
      var G__15191 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__15190, G__15191) : comp.call(null, G__15190, G__15191);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append(left, right.left), right.right, null);
        } else {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__15210 = k;
      var G__15211 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__15210, G__15211) : comp.call(null, G__15210, G__15211);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__15222 = k;
    var G__15223 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__15222, G__15223) : comp.call(null, G__15222, G__15223);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__15225 = cljs.core.seq(coll);
  var chunk__15226 = null;
  var count__15227 = 0;
  var i__15228 = 0;
  while (true) {
    if (i__15228 < count__15227) {
      var vec__15229 = chunk__15226.cljs$core$IIndexed$_nth$arity$2(null, i__15228);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15229, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15229, 1, null);
      var G__15230_15242 = v;
      var G__15231_15243 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15230_15242, G__15231_15243) : f.call(null, G__15230_15242, G__15231_15243);
      var G__15244 = seq__15225;
      var G__15245 = chunk__15226;
      var G__15246 = count__15227;
      var G__15247 = i__15228 + 1;
      seq__15225 = G__15244;
      chunk__15226 = G__15245;
      count__15227 = G__15246;
      i__15228 = G__15247;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__15225);
      if (temp__4126__auto__) {
        var seq__15225__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__15225__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__15225__$1);
          var G__15248 = cljs.core.chunk_rest(seq__15225__$1);
          var G__15249 = c__5012__auto__;
          var G__15250 = cljs.core.count(c__5012__auto__);
          var G__15251 = 0;
          seq__15225 = G__15248;
          chunk__15226 = G__15249;
          count__15227 = G__15250;
          i__15228 = G__15251;
          continue;
        } else {
          var vec__15232 = cljs.core.first(seq__15225__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15232, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15232, 1, null);
          var G__15233_15252 = v;
          var G__15234_15253 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15233_15252, G__15234_15253) : f.call(null, G__15233_15252, G__15234_15253);
          var G__15254 = cljs.core.next(seq__15225__$1);
          var G__15255 = null;
          var G__15256 = 0;
          var G__15257 = 0;
          seq__15225 = G__15254;
          chunk__15226 = G__15255;
          count__15227 = G__15256;
          i__15228 = G__15257;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__15235 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__15235) : cljs.core.keys.call(null, G__15235);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__15236 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__15236) : cljs.core.vals.call(null, G__15236);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__15237 = k;
        var G__15238 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__15237, G__15238) : self__.comp.call(null, G__15237, G__15238);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__15258 = t.left;
          t = G__15258;
          continue;
        } else {
          var G__15259 = t.right;
          t = G__15259;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__15260 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__15261 = cljs.core.next(es);
          ret = G__15260;
          es = G__15261;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__15262 = null;
  var G__15262__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15262__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15262 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15262__2.call(this, self__, k);
      case 3:
        return G__15262__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15262.cljs$core$IFn$_invoke$arity$2 = G__15262__2;
  G__15262.cljs$core$IFn$_invoke$arity$3 = G__15262__3;
  return G__15262;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args15224) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15224)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__15239 = k;
          var G__15240 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__15239, G__15240) : self__.comp.call(null, G__15239, G__15240);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__15263 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__15264 = t.left;
              stack = G__15263;
              t = G__15264;
              continue;
            } else {
              var G__15265 = stack;
              var G__15266 = t.right;
              stack = G__15265;
              t = G__15266;
              continue;
            }
          } else {
            if (c > 0) {
              var G__15267 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__15268 = t.right;
              stack = G__15267;
              t = G__15268;
              continue;
            } else {
              var G__15269 = stack;
              var G__15270 = t.left;
              stack = G__15269;
              t = G__15270;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__15241 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15241) : cljs.core.key.call(null, G__15241);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__15271 = cljs.core.nnext(in$);
        var G__15272 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__15271;
        out = G__15272;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__15273__i = 0, G__15273__a = new Array(arguments.length - 0);
      while (G__15273__i < G__15273__a.length) {
        G__15273__a[G__15273__i] = arguments[G__15273__i + 0];
        ++G__15273__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__15273__a, 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__15274) {
    var keyvals = cljs.core.seq(arglist__15274);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__15275__i = 0, G__15275__a = new Array(arguments.length - 0);
      while (G__15275__i < G__15275__a.length) {
        G__15275__a[G__15275__i] = arguments[G__15275__i + 0];
        ++G__15275__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__15275__a, 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__15276) {
    var keyvals = cljs.core.seq(arglist__15276);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj15280 = {};
      return obj15280;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__15281 = cljs.core.nnext(kvs);
        kvs = G__15281;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__15282__i = 0, G__15282__a = new Array(arguments.length - 0);
      while (G__15282__i < G__15282__a.length) {
        G__15282__a[G__15282__i] = arguments[G__15282__i + 0];
        ++G__15282__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__15282__a, 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__15283) {
    var keyvals = cljs.core.seq(arglist__15283);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__15284 = cljs.core.nnext(in$);
        var G__15285 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__15284;
        out = G__15285;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__15286__i = 0, G__15286__a = new Array(arguments.length - 0);
      while (G__15286__i < G__15286__a.length) {
        G__15286__a[G__15286__i] = arguments[G__15286__i + 0];
        ++G__15286__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__15286__a, 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__15287) {
    var keyvals = cljs.core.seq(arglist__15287);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__15288 = cljs.core.nnext(in$);
        var G__15289 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__15288;
        out = G__15289;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__15290__i = 0, G__15290__a = new Array(arguments.length - 1);
      while (G__15290__i < G__15290__a.length) {
        G__15290__a[G__15290__i] = arguments[G__15290__i + 1];
        ++G__15290__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__15290__a, 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__15291) {
    var comparator = cljs.core.first(arglist__15291);
    var keyvals = cljs.core.rest(arglist__15291);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15292 = self__.mseq;
    if (G__15292) {
      var bit__4906__auto__ = G__15292.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4906__auto__ || G__15292.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15292.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15292);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15292);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15293 = self__.mseq;
    if (G__15293) {
      var bit__4906__auto__ = G__15293.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4906__auto__ || G__15293.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15293.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15293);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15293);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15294 = self__.mseq;
    if (G__15294) {
      var bit__4906__auto__ = G__15294.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4906__auto__ || G__15294.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15294.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15294);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15294);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__15295 = self__.mseq;
    if (G__15295) {
      var bit__4906__auto__ = G__15295.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4906__auto__ || G__15295.cljs$core$INext$) {
        return true;
      } else {
        if (!G__15295.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15295);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__15295);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__15296_SHARP_, p2__15297_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__4225__auto__ = p1__15296_SHARP_;
          if (cljs.core.truth_(or__4225__auto__)) {
            return or__4225__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__15297_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__15298__i = 0, G__15298__a = new Array(arguments.length - 0);
      while (G__15298__i < G__15298__a.length) {
        G__15298__a[G__15298__i] = arguments[G__15298__i + 0];
        ++G__15298__i;
      }
      maps = new cljs.core.IndexedSeq(G__15298__a, 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__15299) {
    var maps = cljs.core.seq(arglist__15299);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__15302 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__15303 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15302, G__15303) : f.call(null, G__15302, G__15303);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__4225__auto__ = m1;
            if (cljs.core.truth_(or__4225__auto__)) {
              return or__4225__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__15304__i = 0, G__15304__a = new Array(arguments.length - 1);
      while (G__15304__i < G__15304__a.length) {
        G__15304__a[G__15304__i] = arguments[G__15304__i + 1];
        ++G__15304__i;
      }
      maps = new cljs.core.IndexedSeq(G__15304__a, 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__15305) {
    var f = cljs.core.first(arglist__15305);
    var maps = cljs.core.rest(arglist__15305);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__15306 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__15307 = cljs.core.next(keys);
      ret = G__15306;
      keys = G__15307;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__15310 = cljs.core.seq(coll);
  var chunk__15311 = null;
  var count__15312 = 0;
  var i__15313 = 0;
  while (true) {
    if (i__15313 < count__15312) {
      var vec__15314 = chunk__15311.cljs$core$IIndexed$_nth$arity$2(null, i__15313);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15314, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15314, 1, null);
      var G__15315_15320 = v;
      var G__15316_15321 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15315_15320, G__15316_15321) : f.call(null, G__15315_15320, G__15316_15321);
      var G__15322 = seq__15310;
      var G__15323 = chunk__15311;
      var G__15324 = count__15312;
      var G__15325 = i__15313 + 1;
      seq__15310 = G__15322;
      chunk__15311 = G__15323;
      count__15312 = G__15324;
      i__15313 = G__15325;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__15310);
      if (temp__4126__auto__) {
        var seq__15310__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__15310__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__15310__$1);
          var G__15326 = cljs.core.chunk_rest(seq__15310__$1);
          var G__15327 = c__5012__auto__;
          var G__15328 = cljs.core.count(c__5012__auto__);
          var G__15329 = 0;
          seq__15310 = G__15326;
          chunk__15311 = G__15327;
          count__15312 = G__15328;
          i__15313 = G__15329;
          continue;
        } else {
          var vec__15317 = cljs.core.first(seq__15310__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15317, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15317, 1, null);
          var G__15318_15330 = v;
          var G__15319_15331 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15318_15330, G__15319_15331) : f.call(null, G__15318_15330, G__15319_15331);
          var G__15332 = cljs.core.next(seq__15310__$1);
          var G__15333 = null;
          var G__15334 = 0;
          var G__15335 = 0;
          seq__15310 = G__15332;
          chunk__15311 = G__15333;
          count__15312 = G__15334;
          i__15313 = G__15335;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__15308_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__15308_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__15336 = null;
  var G__15336__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15336__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15336 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15336__2.call(this, self__, k);
      case 3:
        return G__15336__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15336.cljs$core$IFn$_invoke$arity$2 = G__15336__2;
  G__15336.cljs$core$IFn$_invoke$arity$3 = G__15336__3;
  return G__15336;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args15309) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15309)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15337 = i + 1;
        var G__15338 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__15337;
        out = G__15338;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__15339 = i + 1;
        var G__15340 = cljs.core._conj_BANG_(out, items[i]);
        i = G__15339;
        out = G__15340;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__15342 = null;
  var G__15342__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__15342__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__15342 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15342__2.call(this, self__, k);
      case 3:
        return G__15342__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15342.cljs$core$IFn$_invoke$arity$2 = G__15342__2;
  G__15342.cljs$core$IFn$_invoke$arity$3 = G__15342__3;
  return G__15342;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args15341) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15341)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__15345 = cljs.core.seq(coll);
  var chunk__15346 = null;
  var count__15347 = 0;
  var i__15348 = 0;
  while (true) {
    if (i__15348 < count__15347) {
      var vec__15349 = chunk__15346.cljs$core$IIndexed$_nth$arity$2(null, i__15348);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15349, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15349, 1, null);
      var G__15350_15355 = v;
      var G__15351_15356 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15350_15355, G__15351_15356) : f.call(null, G__15350_15355, G__15351_15356);
      var G__15357 = seq__15345;
      var G__15358 = chunk__15346;
      var G__15359 = count__15347;
      var G__15360 = i__15348 + 1;
      seq__15345 = G__15357;
      chunk__15346 = G__15358;
      count__15347 = G__15359;
      i__15348 = G__15360;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__15345);
      if (temp__4126__auto__) {
        var seq__15345__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__15345__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__15345__$1);
          var G__15361 = cljs.core.chunk_rest(seq__15345__$1);
          var G__15362 = c__5012__auto__;
          var G__15363 = cljs.core.count(c__5012__auto__);
          var G__15364 = 0;
          seq__15345 = G__15361;
          chunk__15346 = G__15362;
          count__15347 = G__15363;
          i__15348 = G__15364;
          continue;
        } else {
          var vec__15352 = cljs.core.first(seq__15345__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15352, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15352, 1, null);
          var G__15353_15365 = v;
          var G__15354_15366 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15353_15365, G__15354_15366) : f.call(null, G__15353_15365, G__15354_15366);
          var G__15367 = cljs.core.next(seq__15345__$1);
          var G__15368 = null;
          var G__15369 = 0;
          var G__15370 = 0;
          seq__15345 = G__15367;
          chunk__15346 = G__15368;
          count__15347 = G__15369;
          i__15348 = G__15370;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__15343_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__15343_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__15371 = null;
  var G__15371__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15371__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15371 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15371__2.call(this, self__, k);
      case 3:
        return G__15371__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15371.cljs$core$IFn$_invoke$arity$2 = G__15371__2;
  G__15371.cljs$core$IFn$_invoke$arity$3 = G__15371__3;
  return G__15371;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args15344) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15344)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5106__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5106__auto__.length) {
        var G__15372 = i + 1;
        var G__15373 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__15372;
        res = G__15373;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__15374 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__15375 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__15374;
          out = G__15375;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__15376__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__15376 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__15377__i = 0, G__15377__a = new Array(arguments.length - 0);
        while (G__15377__i < G__15377__a.length) {
          G__15377__a[G__15377__i] = arguments[G__15377__i + 0];
          ++G__15377__i;
        }
        keys = new cljs.core.IndexedSeq(G__15377__a, 0);
      }
      return G__15376__delegate.call(this, keys);
    };
    G__15376.cljs$lang$maxFixedArity = 0;
    G__15376.cljs$lang$applyTo = function(arglist__15378) {
      var keys = cljs.core.seq(arglist__15378);
      return G__15376__delegate(keys);
    };
    G__15376.cljs$core$IFn$_invoke$arity$variadic = G__15376__delegate;
    return G__15376;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        var G__15379 = null;
        if (arguments.length > 0) {
          var G__15380__i = 0, G__15380__a = new Array(arguments.length - 0);
          while (G__15380__i < G__15380__a.length) {
            G__15380__a[G__15380__i] = arguments[G__15380__i + 0];
            ++G__15380__i;
          }
          G__15379 = new cljs.core.IndexedSeq(G__15380__a, 0);
        }
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__15379);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__15381__i = 0, G__15381__a = new Array(arguments.length - 0);
      while (G__15381__i < G__15381__a.length) {
        G__15381__a[G__15381__i] = arguments[G__15381__i + 0];
        ++G__15381__i;
      }
      keys = new cljs.core.IndexedSeq(G__15381__a, 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__15382) {
    var keys = cljs.core.seq(arglist__15382);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__15383__i = 0, G__15383__a = new Array(arguments.length - 1);
      while (G__15383__i < G__15383__a.length) {
        G__15383__a[G__15383__i] = arguments[G__15383__i + 1];
        ++G__15383__i;
      }
      keys = new cljs.core.IndexedSeq(G__15383__a, 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__15384) {
    var comparator = cljs.core.first(arglist__15384);
    var keys = cljs.core.rest(arglist__15384);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__15385_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__15385_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__15385_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__15386_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__15386_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__15386_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function() {
  var distinct = null;
  var distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__15407 = null;
          var G__15407__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15407__1 = function(result) {
            var G__15397 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15397) : rf.call(null, G__15397);
          };
          var G__15407__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__15398 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15398) : cljs.core.deref.call(null, G__15398);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__15399 = result;
              var G__15400 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15399, G__15400) : rf.call(null, G__15399, G__15400);
            }
          };
          G__15407 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15407__0.call(this);
              case 1:
                return G__15407__1.call(this, result);
              case 2:
                return G__15407__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15407.cljs$core$IFn$_invoke$arity$0 = G__15407__0;
          G__15407.cljs$core$IFn$_invoke$arity$1 = G__15407__1;
          G__15407.cljs$core$IFn$_invoke$arity$2 = G__15407__2;
          return G__15407;
        }();
      }(seen);
    };
  };
  var distinct__1 = function(coll) {
    var step = function step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__15405, seen__$1) {
          while (true) {
            var vec__15406 = p__15405;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15406, 0, null);
            var xs__$1 = vec__15406;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__15408 = cljs.core.rest(s);
                var G__15409 = seen__$1;
                p__15405 = G__15408;
                seen__$1 = G__15409;
                continue;
              } else {
                return cljs.core.cons(f, step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return distinct__0.call(this);
      case 1:
        return distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct.cljs$core$IFn$_invoke$arity$0 = distinct__0;
  distinct.cljs$core$IFn$_invoke$arity$1 = distinct__1;
  return distinct;
}();
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__15410 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__15411 = cljs.core.next(s__$1);
      ret = G__15410;
      s__$1 = G__15411;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__15413 = x;
    if (G__15413) {
      var bit__4899__auto__ = G__15413.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4899__auto__ || G__15413.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__15414 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__15415 = cljs.core.next(ks);
      var G__15416 = cljs.core.next(vs);
      map = G__15414;
      ks = G__15415;
      vs = G__15416;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (function() {
      var G__15427 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__15427) : k.call(null, G__15427);
    }() > function() {
      var G__15428 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__15428) : k.call(null, G__15428);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__15429__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__15417_SHARP_, p2__15418_SHARP_) {
        return max_key.cljs$core$IFn$_invoke$arity$3(k, p1__15417_SHARP_, p2__15418_SHARP_);
      }, max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__15429 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__15430__i = 0, G__15430__a = new Array(arguments.length - 3);
        while (G__15430__i < G__15430__a.length) {
          G__15430__a[G__15430__i] = arguments[G__15430__i + 3];
          ++G__15430__i;
        }
        more = new cljs.core.IndexedSeq(G__15430__a, 0);
      }
      return G__15429__delegate.call(this, k, x, y, more);
    };
    G__15429.cljs$lang$maxFixedArity = 3;
    G__15429.cljs$lang$applyTo = function(arglist__15431) {
      var k = cljs.core.first(arglist__15431);
      arglist__15431 = cljs.core.next(arglist__15431);
      var x = cljs.core.first(arglist__15431);
      arglist__15431 = cljs.core.next(arglist__15431);
      var y = cljs.core.first(arglist__15431);
      var more = cljs.core.rest(arglist__15431);
      return G__15429__delegate(k, x, y, more);
    };
    G__15429.cljs$core$IFn$_invoke$arity$variadic = G__15429__delegate;
    return G__15429;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        var G__15432 = null;
        if (arguments.length > 3) {
          var G__15433__i = 0, G__15433__a = new Array(arguments.length - 3);
          while (G__15433__i < G__15433__a.length) {
            G__15433__a[G__15433__i] = arguments[G__15433__i + 3];
            ++G__15433__i;
          }
          G__15432 = new cljs.core.IndexedSeq(G__15433__a, 0);
        }
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__15432);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (function() {
      var G__15444 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__15444) : k.call(null, G__15444);
    }() < function() {
      var G__15445 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__15445) : k.call(null, G__15445);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__15446__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__15434_SHARP_, p2__15435_SHARP_) {
        return min_key.cljs$core$IFn$_invoke$arity$3(k, p1__15434_SHARP_, p2__15435_SHARP_);
      }, min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__15446 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__15447__i = 0, G__15447__a = new Array(arguments.length - 3);
        while (G__15447__i < G__15447__a.length) {
          G__15447__a[G__15447__i] = arguments[G__15447__i + 3];
          ++G__15447__i;
        }
        more = new cljs.core.IndexedSeq(G__15447__a, 0);
      }
      return G__15446__delegate.call(this, k, x, y, more);
    };
    G__15446.cljs$lang$maxFixedArity = 3;
    G__15446.cljs$lang$applyTo = function(arglist__15448) {
      var k = cljs.core.first(arglist__15448);
      arglist__15448 = cljs.core.next(arglist__15448);
      var x = cljs.core.first(arglist__15448);
      arglist__15448 = cljs.core.next(arglist__15448);
      var y = cljs.core.first(arglist__15448);
      var more = cljs.core.rest(arglist__15448);
      return G__15446__delegate(k, x, y, more);
    };
    G__15446.cljs$core$IFn$_invoke$arity$variadic = G__15446__delegate;
    return G__15446;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        var G__15449 = null;
        if (arguments.length > 3) {
          var G__15450__i = 0, G__15450__a = new Array(arguments.length - 3);
          while (G__15450__i < G__15450__a.length) {
            G__15450__a[G__15450__i] = arguments[G__15450__i + 3];
            ++G__15450__i;
          }
          G__15449 = new cljs.core.IndexedSeq(G__15450__a, 0);
        }
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__15449);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__15467 = null;
          var G__15467__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15467__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__15462 = result;
                var G__15463 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15462, G__15463) : rf.call(null, G__15462, G__15463);
              }());
            }();
            var G__15464 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15464) : rf.call(null, G__15464);
          };
          var G__15467__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__15465 = result;
              var G__15466 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15465, G__15466) : rf.call(null, G__15465, G__15466);
            } else {
              return result;
            }
          };
          G__15467 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15467__0.call(this);
              case 1:
                return G__15467__1.call(this, result);
              case 2:
                return G__15467__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15467.cljs$core$IFn$_invoke$arity$0 = G__15467__0;
          G__15467.cljs$core$IFn$_invoke$arity$1 = G__15467__1;
          G__15467.cljs$core$IFn$_invoke$arity$2 = G__15467__2;
          return G__15467;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__15480 = null;
        var G__15480__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__15480__1 = function(result) {
          var G__15475 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15475) : rf.call(null, G__15475);
        };
        var G__15480__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__15476 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15476) : pred.call(null, G__15476);
          }())) {
            var G__15477 = result;
            var G__15478 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15477, G__15478) : rf.call(null, G__15477, G__15478);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__15480 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__15480__0.call(this);
            case 1:
              return G__15480__1.call(this, result);
            case 2:
              return G__15480__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15480.cljs$core$IFn$_invoke$arity$0 = G__15480__0;
        G__15480.cljs$core$IFn$_invoke$arity$1 = G__15480__1;
        G__15480.cljs$core$IFn$_invoke$arity$2 = G__15480__2;
        return G__15480;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__15479 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15479) : pred.call(null, G__15479);
        }())) {
          return cljs.core.cons(cljs.core.first(s), take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__15485 = function() {
      var G__15487 = cljs.core._entry_key(sc, e);
      var G__15488 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__15487, G__15488) : comp.call(null, G__15487, G__15488);
    }();
    var G__15486 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__15485, G__15486) : test.call(null, G__15485, G__15486);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__15492 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15492, 0, null);
        var s = vec__15492;
        if (cljs.core.truth_(function() {
          var G__15493 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__15493) : include.call(null, G__15493);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__15494 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15494, 0, null);
      var s = vec__15494;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__15498 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15498, 0, null);
        var s = vec__15498;
        if (cljs.core.truth_(function() {
          var G__15499 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__15499) : include.call(null, G__15499);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__15500 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15500, 0, null);
      var s = vec__15500;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__15501 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__15501) : Math.ceil.call(null, G__15501);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__15502 = ret;
        var G__15503 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15502, G__15503) : f.call(null, G__15502, G__15503);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__15504 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15504) : cljs.core.deref.call(null, G__15504);
      } else {
        var G__15505 = i + self__.step;
        var G__15506 = ret__$1;
        i = G__15505;
        ret = G__15506;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__15524 = null;
          var G__15524__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15524__1 = function(result) {
            var G__15521 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15521) : rf.call(null, G__15521);
          };
          var G__15524__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__15522 = result;
              var G__15523 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15522, G__15523) : rf.call(null, G__15522, G__15523);
            } else {
              return result;
            }
          };
          G__15524 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15524__0.call(this);
              case 1:
                return G__15524__1.call(this, result);
              case 2:
                return G__15524__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15524.cljs$core$IFn$_invoke$arity$0 = G__15524__0;
          G__15524.cljs$core$IFn$_invoke$arity$1 = G__15524__1;
          G__15524.cljs$core$IFn$_invoke$arity$2 = G__15524__2;
          return G__15524;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__15546 = null;
          var G__15546__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15546__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__15537 = result;
                var G__15538 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15537, G__15538) : rf.call(null, G__15537, G__15538);
              }());
            }();
            var G__15539 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15539) : rf.call(null, G__15539);
          };
          var G__15546__2 = function(result, input) {
            var pval = function() {
              var G__15540 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15540) : cljs.core.deref.call(null, G__15540);
            }();
            var val = function() {
              var G__15541 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15541) : f.call(null, G__15541);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__15542 = result;
                var G__15543 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15542, G__15543) : rf.call(null, G__15542, G__15543);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__15546 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15546__0.call(this);
              case 1:
                return G__15546__1.call(this, result);
              case 2:
                return G__15546__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15546.cljs$core$IFn$_invoke$arity$0 = G__15546__0;
          G__15546.cljs$core$IFn$_invoke$arity$1 = G__15546__1;
          G__15546.cljs$core$IFn$_invoke$arity$2 = G__15546__2;
          return G__15546;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__15544 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15544) : f.call(null, G__15544);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__15525_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__15545 = p1__15525_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15545) : f.call(null, G__15545);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__15555 = init;
          var G__15556 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15555, G__15556) : f.call(null, G__15555, G__15556);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__15651 = null;
      var G__15651__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__15651__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15609 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15609) : f.call(null, G__15609);
        }()], null);
      };
      var G__15651__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15610 = x;
          var G__15611 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15610, G__15611) : f.call(null, G__15610, G__15611);
        }()], null);
      };
      var G__15651__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15612 = x;
          var G__15613 = y;
          var G__15614 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15612, G__15613, G__15614) : f.call(null, G__15612, G__15613, G__15614);
        }()], null);
      };
      var G__15651__4 = function() {
        var G__15652__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__15652 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15653__i = 0, G__15653__a = new Array(arguments.length - 3);
            while (G__15653__i < G__15653__a.length) {
              G__15653__a[G__15653__i] = arguments[G__15653__i + 3];
              ++G__15653__i;
            }
            args = new cljs.core.IndexedSeq(G__15653__a, 0);
          }
          return G__15652__delegate.call(this, x, y, z, args);
        };
        G__15652.cljs$lang$maxFixedArity = 3;
        G__15652.cljs$lang$applyTo = function(arglist__15654) {
          var x = cljs.core.first(arglist__15654);
          arglist__15654 = cljs.core.next(arglist__15654);
          var y = cljs.core.first(arglist__15654);
          arglist__15654 = cljs.core.next(arglist__15654);
          var z = cljs.core.first(arglist__15654);
          var args = cljs.core.rest(arglist__15654);
          return G__15652__delegate(x, y, z, args);
        };
        G__15652.cljs$core$IFn$_invoke$arity$variadic = G__15652__delegate;
        return G__15652;
      }();
      G__15651 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15651__0.call(this);
          case 1:
            return G__15651__1.call(this, x);
          case 2:
            return G__15651__2.call(this, x, y);
          case 3:
            return G__15651__3.call(this, x, y, z);
          default:
            var G__15655 = null;
            if (arguments.length > 3) {
              var G__15656__i = 0, G__15656__a = new Array(arguments.length - 3);
              while (G__15656__i < G__15656__a.length) {
                G__15656__a[G__15656__i] = arguments[G__15656__i + 3];
                ++G__15656__i;
              }
              G__15655 = new cljs.core.IndexedSeq(G__15656__a, 0);
            }
            return G__15651__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15655);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15651.cljs$lang$maxFixedArity = 3;
      G__15651.cljs$lang$applyTo = G__15651__4.cljs$lang$applyTo;
      G__15651.cljs$core$IFn$_invoke$arity$0 = G__15651__0;
      G__15651.cljs$core$IFn$_invoke$arity$1 = G__15651__1;
      G__15651.cljs$core$IFn$_invoke$arity$2 = G__15651__2;
      G__15651.cljs$core$IFn$_invoke$arity$3 = G__15651__3;
      G__15651.cljs$core$IFn$_invoke$arity$variadic = G__15651__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__15651;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__15657 = null;
      var G__15657__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__15657__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15615 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15615) : f.call(null, G__15615);
        }(), function() {
          var G__15616 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15616) : g.call(null, G__15616);
        }()], null);
      };
      var G__15657__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15617 = x;
          var G__15618 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15617, G__15618) : f.call(null, G__15617, G__15618);
        }(), function() {
          var G__15619 = x;
          var G__15620 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__15619, G__15620) : g.call(null, G__15619, G__15620);
        }()], null);
      };
      var G__15657__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15621 = x;
          var G__15622 = y;
          var G__15623 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15621, G__15622, G__15623) : f.call(null, G__15621, G__15622, G__15623);
        }(), function() {
          var G__15624 = x;
          var G__15625 = y;
          var G__15626 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__15624, G__15625, G__15626) : g.call(null, G__15624, G__15625, G__15626);
        }()], null);
      };
      var G__15657__4 = function() {
        var G__15658__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__15658 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15659__i = 0, G__15659__a = new Array(arguments.length - 3);
            while (G__15659__i < G__15659__a.length) {
              G__15659__a[G__15659__i] = arguments[G__15659__i + 3];
              ++G__15659__i;
            }
            args = new cljs.core.IndexedSeq(G__15659__a, 0);
          }
          return G__15658__delegate.call(this, x, y, z, args);
        };
        G__15658.cljs$lang$maxFixedArity = 3;
        G__15658.cljs$lang$applyTo = function(arglist__15660) {
          var x = cljs.core.first(arglist__15660);
          arglist__15660 = cljs.core.next(arglist__15660);
          var y = cljs.core.first(arglist__15660);
          arglist__15660 = cljs.core.next(arglist__15660);
          var z = cljs.core.first(arglist__15660);
          var args = cljs.core.rest(arglist__15660);
          return G__15658__delegate(x, y, z, args);
        };
        G__15658.cljs$core$IFn$_invoke$arity$variadic = G__15658__delegate;
        return G__15658;
      }();
      G__15657 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15657__0.call(this);
          case 1:
            return G__15657__1.call(this, x);
          case 2:
            return G__15657__2.call(this, x, y);
          case 3:
            return G__15657__3.call(this, x, y, z);
          default:
            var G__15661 = null;
            if (arguments.length > 3) {
              var G__15662__i = 0, G__15662__a = new Array(arguments.length - 3);
              while (G__15662__i < G__15662__a.length) {
                G__15662__a[G__15662__i] = arguments[G__15662__i + 3];
                ++G__15662__i;
              }
              G__15661 = new cljs.core.IndexedSeq(G__15662__a, 0);
            }
            return G__15657__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15661);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15657.cljs$lang$maxFixedArity = 3;
      G__15657.cljs$lang$applyTo = G__15657__4.cljs$lang$applyTo;
      G__15657.cljs$core$IFn$_invoke$arity$0 = G__15657__0;
      G__15657.cljs$core$IFn$_invoke$arity$1 = G__15657__1;
      G__15657.cljs$core$IFn$_invoke$arity$2 = G__15657__2;
      G__15657.cljs$core$IFn$_invoke$arity$3 = G__15657__3;
      G__15657.cljs$core$IFn$_invoke$arity$variadic = G__15657__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__15657;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__15663 = null;
      var G__15663__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__15663__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15627 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15627) : f.call(null, G__15627);
        }(), function() {
          var G__15628 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15628) : g.call(null, G__15628);
        }(), function() {
          var G__15629 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__15629) : h.call(null, G__15629);
        }()], null);
      };
      var G__15663__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15630 = x;
          var G__15631 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15630, G__15631) : f.call(null, G__15630, G__15631);
        }(), function() {
          var G__15632 = x;
          var G__15633 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__15632, G__15633) : g.call(null, G__15632, G__15633);
        }(), function() {
          var G__15634 = x;
          var G__15635 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__15634, G__15635) : h.call(null, G__15634, G__15635);
        }()], null);
      };
      var G__15663__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__15636 = x;
          var G__15637 = y;
          var G__15638 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15636, G__15637, G__15638) : f.call(null, G__15636, G__15637, G__15638);
        }(), function() {
          var G__15639 = x;
          var G__15640 = y;
          var G__15641 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__15639, G__15640, G__15641) : g.call(null, G__15639, G__15640, G__15641);
        }(), function() {
          var G__15642 = x;
          var G__15643 = y;
          var G__15644 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__15642, G__15643, G__15644) : h.call(null, G__15642, G__15643, G__15644);
        }()], null);
      };
      var G__15663__4 = function() {
        var G__15664__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__15664 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15665__i = 0, G__15665__a = new Array(arguments.length - 3);
            while (G__15665__i < G__15665__a.length) {
              G__15665__a[G__15665__i] = arguments[G__15665__i + 3];
              ++G__15665__i;
            }
            args = new cljs.core.IndexedSeq(G__15665__a, 0);
          }
          return G__15664__delegate.call(this, x, y, z, args);
        };
        G__15664.cljs$lang$maxFixedArity = 3;
        G__15664.cljs$lang$applyTo = function(arglist__15666) {
          var x = cljs.core.first(arglist__15666);
          arglist__15666 = cljs.core.next(arglist__15666);
          var y = cljs.core.first(arglist__15666);
          arglist__15666 = cljs.core.next(arglist__15666);
          var z = cljs.core.first(arglist__15666);
          var args = cljs.core.rest(arglist__15666);
          return G__15664__delegate(x, y, z, args);
        };
        G__15664.cljs$core$IFn$_invoke$arity$variadic = G__15664__delegate;
        return G__15664;
      }();
      G__15663 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15663__0.call(this);
          case 1:
            return G__15663__1.call(this, x);
          case 2:
            return G__15663__2.call(this, x, y);
          case 3:
            return G__15663__3.call(this, x, y, z);
          default:
            var G__15667 = null;
            if (arguments.length > 3) {
              var G__15668__i = 0, G__15668__a = new Array(arguments.length - 3);
              while (G__15668__i < G__15668__a.length) {
                G__15668__a[G__15668__i] = arguments[G__15668__i + 3];
                ++G__15668__i;
              }
              G__15667 = new cljs.core.IndexedSeq(G__15668__a, 0);
            }
            return G__15663__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15667);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15663.cljs$lang$maxFixedArity = 3;
      G__15663.cljs$lang$applyTo = G__15663__4.cljs$lang$applyTo;
      G__15663.cljs$core$IFn$_invoke$arity$0 = G__15663__0;
      G__15663.cljs$core$IFn$_invoke$arity$1 = G__15663__1;
      G__15663.cljs$core$IFn$_invoke$arity$2 = G__15663__2;
      G__15663.cljs$core$IFn$_invoke$arity$3 = G__15663__3;
      G__15663.cljs$core$IFn$_invoke$arity$variadic = G__15663__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__15663;
    }();
  };
  var juxt__4 = function() {
    var G__15669__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__15670 = null;
          var G__15670__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__15557_SHARP_, p2__15558_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__15557_SHARP_, function() {
                  return p2__15558_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__15558_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__15558_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__15670__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__15559_SHARP_, p2__15560_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__15559_SHARP_, function() {
                  var G__15645 = x;
                  return p2__15560_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__15560_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15645) : p2__15560_SHARP_.call(null, G__15645);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__15670__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__15561_SHARP_, p2__15562_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__15561_SHARP_, function() {
                  var G__15646 = x;
                  var G__15647 = y;
                  return p2__15562_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__15562_SHARP_.cljs$core$IFn$_invoke$arity$2(G__15646, G__15647) : p2__15562_SHARP_.call(null, G__15646, G__15647);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__15670__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__15563_SHARP_, p2__15564_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__15563_SHARP_, function() {
                  var G__15648 = x;
                  var G__15649 = y;
                  var G__15650 = z;
                  return p2__15564_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__15564_SHARP_.cljs$core$IFn$_invoke$arity$3(G__15648, G__15649, G__15650) : p2__15564_SHARP_.call(null, G__15648, G__15649, G__15650);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__15670__4 = function() {
            var G__15671__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__15565_SHARP_, p2__15566_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__15565_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__15566_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__15671 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__15672__i = 0, G__15672__a = new Array(arguments.length - 3);
                while (G__15672__i < G__15672__a.length) {
                  G__15672__a[G__15672__i] = arguments[G__15672__i + 3];
                  ++G__15672__i;
                }
                args = new cljs.core.IndexedSeq(G__15672__a, 0);
              }
              return G__15671__delegate.call(this, x, y, z, args);
            };
            G__15671.cljs$lang$maxFixedArity = 3;
            G__15671.cljs$lang$applyTo = function(arglist__15673) {
              var x = cljs.core.first(arglist__15673);
              arglist__15673 = cljs.core.next(arglist__15673);
              var y = cljs.core.first(arglist__15673);
              arglist__15673 = cljs.core.next(arglist__15673);
              var z = cljs.core.first(arglist__15673);
              var args = cljs.core.rest(arglist__15673);
              return G__15671__delegate(x, y, z, args);
            };
            G__15671.cljs$core$IFn$_invoke$arity$variadic = G__15671__delegate;
            return G__15671;
          }();
          G__15670 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__15670__0.call(this);
              case 1:
                return G__15670__1.call(this, x);
              case 2:
                return G__15670__2.call(this, x, y);
              case 3:
                return G__15670__3.call(this, x, y, z);
              default:
                var G__15674 = null;
                if (arguments.length > 3) {
                  var G__15675__i = 0, G__15675__a = new Array(arguments.length - 3);
                  while (G__15675__i < G__15675__a.length) {
                    G__15675__a[G__15675__i] = arguments[G__15675__i + 3];
                    ++G__15675__i;
                  }
                  G__15674 = new cljs.core.IndexedSeq(G__15675__a, 0);
                }
                return G__15670__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15674);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15670.cljs$lang$maxFixedArity = 3;
          G__15670.cljs$lang$applyTo = G__15670__4.cljs$lang$applyTo;
          G__15670.cljs$core$IFn$_invoke$arity$0 = G__15670__0;
          G__15670.cljs$core$IFn$_invoke$arity$1 = G__15670__1;
          G__15670.cljs$core$IFn$_invoke$arity$2 = G__15670__2;
          G__15670.cljs$core$IFn$_invoke$arity$3 = G__15670__3;
          G__15670.cljs$core$IFn$_invoke$arity$variadic = G__15670__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__15670;
        }();
      }(fs__$1);
    };
    var G__15669 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__15676__i = 0, G__15676__a = new Array(arguments.length - 3);
        while (G__15676__i < G__15676__a.length) {
          G__15676__a[G__15676__i] = arguments[G__15676__i + 3];
          ++G__15676__i;
        }
        fs = new cljs.core.IndexedSeq(G__15676__a, 0);
      }
      return G__15669__delegate.call(this, f, g, h, fs);
    };
    G__15669.cljs$lang$maxFixedArity = 3;
    G__15669.cljs$lang$applyTo = function(arglist__15677) {
      var f = cljs.core.first(arglist__15677);
      arglist__15677 = cljs.core.next(arglist__15677);
      var g = cljs.core.first(arglist__15677);
      arglist__15677 = cljs.core.next(arglist__15677);
      var h = cljs.core.first(arglist__15677);
      var fs = cljs.core.rest(arglist__15677);
      return G__15669__delegate(f, g, h, fs);
    };
    G__15669.cljs$core$IFn$_invoke$arity$variadic = G__15669__delegate;
    return G__15669;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        var G__15678 = null;
        if (arguments.length > 3) {
          var G__15679__i = 0, G__15679__a = new Array(arguments.length - 3);
          while (G__15679__i < G__15679__a.length) {
            G__15679__a[G__15679__i] = arguments[G__15679__i + 3];
            ++G__15679__i;
          }
          G__15678 = new cljs.core.IndexedSeq(G__15679__a, 0);
        }
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__15678);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__15680 = cljs.core.next(coll);
        coll = G__15680;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__15681 = n - 1;
        var G__15682 = cljs.core.next(coll);
        n = G__15681;
        coll = G__15682;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__15686 = cljs.core.re_find(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15686, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15686, 1, null);
    var pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15686, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_15694 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4225__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4225__auto__)) {
              return or__4225__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__15695_15701 = cljs.core.first(coll);
          var G__15696_15702 = writer;
          var G__15697_15703 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__15695_15701, G__15696_15702, G__15697_15703) : print_one.call(null, G__15695_15701, G__15696_15702, G__15697_15703);
        } else {
        }
        var coll_15704__$1 = cljs.core.next(coll);
        var n_15705 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_15704__$1 && (n_15705 == null || !(n_15705 === 0))) {
            cljs.core._write(writer, sep);
            var G__15698_15706 = cljs.core.first(coll_15704__$1);
            var G__15699_15707 = writer;
            var G__15700_15708 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__15698_15706, G__15699_15707, G__15700_15708) : print_one.call(null, G__15698_15706, G__15699_15707, G__15700_15708);
            var G__15709 = cljs.core.next(coll_15704__$1);
            var G__15710 = n_15705 - 1;
            coll_15704__$1 = G__15709;
            n_15705 = G__15710;
            continue;
          } else {
            if (cljs.core.seq(coll_15704__$1) && n_15705 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4225__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4225__auto__)) {
                  return or__4225__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_15694;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__15715 = cljs.core.seq(ss);
    var chunk__15716 = null;
    var count__15717 = 0;
    var i__15718 = 0;
    while (true) {
      if (i__15718 < count__15717) {
        var s = chunk__15716.cljs$core$IIndexed$_nth$arity$2(null, i__15718);
        cljs.core._write(writer, s);
        var G__15719 = seq__15715;
        var G__15720 = chunk__15716;
        var G__15721 = count__15717;
        var G__15722 = i__15718 + 1;
        seq__15715 = G__15719;
        chunk__15716 = G__15720;
        count__15717 = G__15721;
        i__15718 = G__15722;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__15715);
        if (temp__4126__auto__) {
          var seq__15715__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__15715__$1)) {
            var c__5012__auto__ = cljs.core.chunk_first(seq__15715__$1);
            var G__15723 = cljs.core.chunk_rest(seq__15715__$1);
            var G__15724 = c__5012__auto__;
            var G__15725 = cljs.core.count(c__5012__auto__);
            var G__15726 = 0;
            seq__15715 = G__15723;
            chunk__15716 = G__15724;
            count__15717 = G__15725;
            i__15718 = G__15726;
            continue;
          } else {
            var s = cljs.core.first(seq__15715__$1);
            cljs.core._write(writer, s);
            var G__15727 = cljs.core.next(seq__15715__$1);
            var G__15728 = null;
            var G__15729 = 0;
            var G__15730 = 0;
            seq__15715 = G__15727;
            chunk__15716 = G__15728;
            count__15717 = G__15729;
            i__15718 = G__15730;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__15731__i = 0, G__15731__a = new Array(arguments.length - 1);
      while (G__15731__i < G__15731__a.length) {
        G__15731__a[G__15731__i] = arguments[G__15731__i + 1];
        ++G__15731__i;
      }
      ss = new cljs.core.IndexedSeq(G__15731__a, 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__15732) {
    var writer = cljs.core.first(arglist__15732);
    var ss = cljs.core.rest(arglist__15732);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj15734 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj15734;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__15737 = '[\\\\"\b\f\n\r\t]';
    var G__15738 = "g";
    return RegExp(G__15737, G__15738);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4213__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4213__auto__)) {
          var and__4213__auto____$1 = function() {
            var G__15752 = obj;
            if (G__15752) {
              var bit__4906__auto__ = G__15752.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4906__auto__ || G__15752.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__15752.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__15752);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__15752);
            }
          }();
          if (and__4213__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4213__auto____$1;
          }
        } else {
          return and__4213__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__15753_15763 = cljs.core.meta(obj);
        var G__15754_15764 = writer;
        var G__15755_15765 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__15753_15763, G__15754_15764, G__15755_15765) : cljs.core.pr_writer.call(null, G__15753_15763, G__15754_15764, G__15755_15765);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__15756 = obj;
            if (G__15756) {
              var bit__4899__auto__ = G__15756.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4899__auto__ || G__15756.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__15757 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__15758 = cljs.core.pr_writer;
                var G__15759 = writer;
                var G__15760 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__15757, G__15758, G__15759, G__15760) : cljs.core.print_map.call(null, G__15757, G__15758, G__15759, G__15760);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__15761 = obj;
                    return goog.isString(G__15761);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__15766 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__15766;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__15762 = obj;
                            if (G__15762) {
                              var bit__4906__auto__ = G__15762.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4906__auto__ || G__15762.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__15762.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__15762);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__15762);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__15770 = obj;
    var G__15771 = writer;
    var G__15772 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__15770, G__15771, G__15772) : alt_impl.call(null, G__15770, G__15771, G__15772);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__15777 = cljs.core.seq(cljs.core.next(objs));
  var chunk__15778 = null;
  var count__15779 = 0;
  var i__15780 = 0;
  while (true) {
    if (i__15780 < count__15779) {
      var obj = chunk__15778.cljs$core$IIndexed$_nth$arity$2(null, i__15780);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__15781 = seq__15777;
      var G__15782 = chunk__15778;
      var G__15783 = count__15779;
      var G__15784 = i__15780 + 1;
      seq__15777 = G__15781;
      chunk__15778 = G__15782;
      count__15779 = G__15783;
      i__15780 = G__15784;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__15777);
      if (temp__4126__auto__) {
        var seq__15777__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__15777__$1)) {
          var c__5012__auto__ = cljs.core.chunk_first(seq__15777__$1);
          var G__15785 = cljs.core.chunk_rest(seq__15777__$1);
          var G__15786 = c__5012__auto__;
          var G__15787 = cljs.core.count(c__5012__auto__);
          var G__15788 = 0;
          seq__15777 = G__15785;
          chunk__15778 = G__15786;
          count__15779 = G__15787;
          i__15780 = G__15788;
          continue;
        } else {
          var obj = cljs.core.first(seq__15777__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__15789 = cljs.core.next(seq__15777__$1);
          var G__15790 = null;
          var G__15791 = 0;
          var G__15792 = 0;
          seq__15777 = G__15789;
          chunk__15778 = G__15790;
          count__15779 = G__15791;
          i__15780 = G__15792;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15793__i = 0, G__15793__a = new Array(arguments.length - 0);
      while (G__15793__i < G__15793__a.length) {
        G__15793__a[G__15793__i] = arguments[G__15793__i + 0];
        ++G__15793__i;
      }
      objs = new cljs.core.IndexedSeq(G__15793__a, 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__15794) {
    var objs = cljs.core.seq(arglist__15794);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15795__i = 0, G__15795__a = new Array(arguments.length - 0);
      while (G__15795__i < G__15795__a.length) {
        G__15795__a[G__15795__i] = arguments[G__15795__i + 0];
        ++G__15795__i;
      }
      objs = new cljs.core.IndexedSeq(G__15795__a, 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__15796) {
    var objs = cljs.core.seq(arglist__15796);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15797__i = 0, G__15797__a = new Array(arguments.length - 0);
      while (G__15797__i < G__15797__a.length) {
        G__15797__a[G__15797__i] = arguments[G__15797__i + 0];
        ++G__15797__i;
      }
      objs = new cljs.core.IndexedSeq(G__15797__a, 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__15798) {
    var objs = cljs.core.seq(arglist__15798);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15799__i = 0, G__15799__a = new Array(arguments.length - 0);
      while (G__15799__i < G__15799__a.length) {
        G__15799__a[G__15799__i] = arguments[G__15799__i + 0];
        ++G__15799__i;
      }
      objs = new cljs.core.IndexedSeq(G__15799__a, 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__15800) {
    var objs = cljs.core.seq(arglist__15800);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15801__i = 0, G__15801__a = new Array(arguments.length - 0);
      while (G__15801__i < G__15801__a.length) {
        G__15801__a[G__15801__i] = arguments[G__15801__i + 0];
        ++G__15801__i;
      }
      objs = new cljs.core.IndexedSeq(G__15801__a, 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__15802) {
    var objs = cljs.core.seq(arglist__15802);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15803__i = 0, G__15803__a = new Array(arguments.length - 0);
      while (G__15803__i < G__15803__a.length) {
        G__15803__a[G__15803__i] = arguments[G__15803__i + 0];
        ++G__15803__i;
      }
      objs = new cljs.core.IndexedSeq(G__15803__a, 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__15804) {
    var objs = cljs.core.seq(arglist__15804);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15805__i = 0, G__15805__a = new Array(arguments.length - 0);
      while (G__15805__i < G__15805__a.length) {
        G__15805__a[G__15805__i] = arguments[G__15805__i + 0];
        ++G__15805__i;
      }
      objs = new cljs.core.IndexedSeq(G__15805__a, 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__15806) {
    var objs = cljs.core.seq(arglist__15806);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__15807__i = 0, G__15807__a = new Array(arguments.length - 0);
      while (G__15807__i < G__15807__a.length) {
        G__15807__a[G__15807__i] = arguments[G__15807__i + 0];
        ++G__15807__i;
      }
      objs = new cljs.core.IndexedSeq(G__15807__a, 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__15808) {
    var objs = cljs.core.seq(arglist__15808);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__15815_15821 = cljs.core.key(e);
    var G__15816_15822 = w;
    var G__15817_15823 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__15815_15821, G__15816_15822, G__15817_15823) : print_one.call(null, G__15815_15821, G__15816_15822, G__15817_15823);
    cljs.core._write(w, " ");
    var G__15818 = cljs.core.val(e);
    var G__15819 = w;
    var G__15820 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__15818, G__15819, G__15820) : print_one.call(null, G__15818, G__15819, G__15820);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__15824__i = 0, G__15824__a = new Array(arguments.length - 2);
      while (G__15824__i < G__15824__a.length) {
        G__15824__a[G__15824__i] = arguments[G__15824__i + 2];
        ++G__15824__i;
      }
      args = new cljs.core.IndexedSeq(G__15824__a, 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__15825) {
    var iref = cljs.core.first(arglist__15825);
    arglist__15825 = cljs.core.next(arglist__15825);
    var f = cljs.core.first(arglist__15825);
    var args = cljs.core.rest(arglist__15825);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__15828 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__15828) : cljs.core.atom.call(null, G__15828);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__15830 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15830) : cljs.core.deref.call(null, G__15830);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__15831_SHARP_, p2__15832_SHARP_) {
    var ret = function() {
      var G__15835 = p1__15831_SHARP_;
      var G__15836 = p2__15832_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15835, G__15836) : rf.call(null, G__15835, G__15836);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__15839 = null;
      var G__15839__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__15839__1 = function(result) {
        var G__15838 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15838) : rf.call(null, G__15838);
      };
      var G__15839__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__15839 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__15839__0.call(this);
          case 1:
            return G__15839__1.call(this, result);
          case 2:
            return G__15839__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15839.cljs$core$IFn$_invoke$arity$0 = G__15839__0;
      G__15839.cljs$core$IFn$_invoke$arity$1 = G__15839__1;
      G__15839.cljs$core$IFn$_invoke$arity$2 = G__15839__2;
      return G__15839;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__15848 = null;
          var G__15848__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15848__1 = function(result) {
            var G__15844 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15844) : rf.call(null, G__15844);
          };
          var G__15848__2 = function(result, input) {
            var prior = function() {
              var G__15845 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15845) : cljs.core.deref.call(null, G__15845);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__15846 = result;
              var G__15847 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15846, G__15847) : rf.call(null, G__15846, G__15847);
            }
          };
          G__15848 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15848__0.call(this);
              case 1:
                return G__15848__1.call(this, result);
              case 2:
                return G__15848__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15848.cljs$core$IFn$_invoke$arity$0 = G__15848__0;
          G__15848.cljs$core$IFn$_invoke$arity$1 = G__15848__1;
          G__15848.cljs$core$IFn$_invoke$arity$2 = G__15848__2;
          return G__15848;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5203__auto__ = this;
  return cljs.core.es6_iterator(this__5203__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__15850_SHARP_, p2__15849_SHARP_) {
    var G__15852 = p2__15849_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__15852) : proc.call(null, G__15852);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj15854 = {};
  return obj15854;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__4213__auto__ = x;
    if (and__4213__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4869__auto__ = x == null ? null : x;
    return function() {
      var or__4225__auto__ = cljs.core._clj__GT_js[function() {
        var G__15858 = x__4869__auto__;
        return goog.typeOf(G__15858);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__4213__auto__ = x;
    if (and__4213__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4869__auto__ = x == null ? null : x;
    return function() {
      var or__4225__auto__ = cljs.core._key__GT_js[function() {
        var G__15862 = x__4869__auto__;
        return goog.typeOf(G__15862);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__15865 = k;
    if (G__15865) {
      var bit__4906__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4225__auto__ = bit__4906__auto__;
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          return G__15865.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__15865.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__15865);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__15865);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__15866 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__15866) : cljs.core.clj__GT_js.call(null, G__15866);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__15882 = x;
      if (G__15882) {
        var bit__4906__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4225__auto__ = bit__4906__auto__;
          if (cljs.core.truth_(or__4225__auto__)) {
            return or__4225__auto__;
          } else {
            return G__15882.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__15882.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__15882);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__15882);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj15884 = {};
              return obj15884;
            }();
            var seq__15885_15895 = cljs.core.seq(x);
            var chunk__15886_15896 = null;
            var count__15887_15897 = 0;
            var i__15888_15898 = 0;
            while (true) {
              if (i__15888_15898 < count__15887_15897) {
                var vec__15889_15899 = chunk__15886_15896.cljs$core$IIndexed$_nth$arity$2(null, i__15888_15898);
                var k_15900 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15889_15899, 0, null);
                var v_15901 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15889_15899, 1, null);
                m[cljs.core.key__GT_js(k_15900)] = clj__GT_js(v_15901);
                var G__15902 = seq__15885_15895;
                var G__15903 = chunk__15886_15896;
                var G__15904 = count__15887_15897;
                var G__15905 = i__15888_15898 + 1;
                seq__15885_15895 = G__15902;
                chunk__15886_15896 = G__15903;
                count__15887_15897 = G__15904;
                i__15888_15898 = G__15905;
                continue;
              } else {
                var temp__4126__auto___15906 = cljs.core.seq(seq__15885_15895);
                if (temp__4126__auto___15906) {
                  var seq__15885_15907__$1 = temp__4126__auto___15906;
                  if (cljs.core.chunked_seq_QMARK_(seq__15885_15907__$1)) {
                    var c__5012__auto___15908 = cljs.core.chunk_first(seq__15885_15907__$1);
                    var G__15909 = cljs.core.chunk_rest(seq__15885_15907__$1);
                    var G__15910 = c__5012__auto___15908;
                    var G__15911 = cljs.core.count(c__5012__auto___15908);
                    var G__15912 = 0;
                    seq__15885_15895 = G__15909;
                    chunk__15886_15896 = G__15910;
                    count__15887_15897 = G__15911;
                    i__15888_15898 = G__15912;
                    continue;
                  } else {
                    var vec__15890_15913 = cljs.core.first(seq__15885_15907__$1);
                    var k_15914 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15890_15913, 0, null);
                    var v_15915 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15890_15913, 1, null);
                    m[cljs.core.key__GT_js(k_15914)] = clj__GT_js(v_15915);
                    var G__15916 = cljs.core.next(seq__15885_15907__$1);
                    var G__15917 = null;
                    var G__15918 = 0;
                    var G__15919 = 0;
                    seq__15885_15895 = G__15916;
                    chunk__15886_15896 = G__15917;
                    count__15887_15897 = G__15918;
                    i__15888_15898 = G__15919;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__15891_15920 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clj__GT_js, x));
              var chunk__15892_15921 = null;
              var count__15893_15922 = 0;
              var i__15894_15923 = 0;
              while (true) {
                if (i__15894_15923 < count__15893_15922) {
                  var x_15924__$1 = chunk__15892_15921.cljs$core$IIndexed$_nth$arity$2(null, i__15894_15923);
                  arr.push(x_15924__$1);
                  var G__15925 = seq__15891_15920;
                  var G__15926 = chunk__15892_15921;
                  var G__15927 = count__15893_15922;
                  var G__15928 = i__15894_15923 + 1;
                  seq__15891_15920 = G__15925;
                  chunk__15892_15921 = G__15926;
                  count__15893_15922 = G__15927;
                  i__15894_15923 = G__15928;
                  continue;
                } else {
                  var temp__4126__auto___15929 = cljs.core.seq(seq__15891_15920);
                  if (temp__4126__auto___15929) {
                    var seq__15891_15930__$1 = temp__4126__auto___15929;
                    if (cljs.core.chunked_seq_QMARK_(seq__15891_15930__$1)) {
                      var c__5012__auto___15931 = cljs.core.chunk_first(seq__15891_15930__$1);
                      var G__15932 = cljs.core.chunk_rest(seq__15891_15930__$1);
                      var G__15933 = c__5012__auto___15931;
                      var G__15934 = cljs.core.count(c__5012__auto___15931);
                      var G__15935 = 0;
                      seq__15891_15920 = G__15932;
                      chunk__15892_15921 = G__15933;
                      count__15893_15922 = G__15934;
                      i__15894_15923 = G__15935;
                      continue;
                    } else {
                      var x_15936__$1 = cljs.core.first(seq__15891_15930__$1);
                      arr.push(x_15936__$1);
                      var G__15937 = cljs.core.next(seq__15891_15930__$1);
                      var G__15938 = null;
                      var G__15939 = 0;
                      var G__15940 = 0;
                      seq__15891_15920 = G__15937;
                      chunk__15892_15921 = G__15938;
                      count__15893_15922 = G__15939;
                      i__15894_15923 = G__15940;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj15942 = {};
  return obj15942;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__4213__auto__ = x;
    if (and__4213__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4869__auto__ = x == null ? null : x;
    return function() {
      var or__4225__auto__ = cljs.core._js__GT_clj[function() {
        var G__15946 = x__4869__auto__;
        return goog.typeOf(G__15946);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var js__GT_clj__2 = function() {
    var G__16003__delegate = function(x, opts) {
      var map__15976 = opts;
      var map__15976__$1 = cljs.core.seq_QMARK_(map__15976) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__15976) : map__15976;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__15976__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__15976, map__15976__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__15992 = x__$1;
            if (G__15992) {
              var bit__4906__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__4225__auto__ = bit__4906__auto__;
                if (cljs.core.truth_(or__4225__auto__)) {
                  return or__4225__auto__;
                } else {
                  return G__15992.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__15992.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__15992);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__15992);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4981__auto__ = function(map__15976, map__15976__$1, keywordize_keys, keyfn) {
                        return function iter__15993(s__15994) {
                          return new cljs.core.LazySeq(null, function(map__15976, map__15976__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__15994__$1 = s__15994;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__15994__$1);
                                if (temp__4126__auto__) {
                                  var s__15994__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__15994__$2)) {
                                    var c__4979__auto__ = cljs.core.chunk_first(s__15994__$2);
                                    var size__4980__auto__ = cljs.core.count(c__4979__auto__);
                                    var b__15996 = cljs.core.chunk_buffer(size__4980__auto__);
                                    if (function() {
                                      var i__15995 = 0;
                                      while (true) {
                                        if (i__15995 < size__4980__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4979__auto__, i__15995);
                                          cljs.core.chunk_append(b__15996, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__16001 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16001) : keyfn.call(null, G__16001);
                                          }(), thisfn(x__$1[k])], null));
                                          var G__16004 = i__15995 + 1;
                                          i__15995 = G__16004;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__15996), iter__15993(cljs.core.chunk_rest(s__15994__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__15996), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__15994__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__16002 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16002) : keyfn.call(null, G__16002);
                                    }(), thisfn(x__$1[k])], null), iter__15993(cljs.core.rest(s__15994__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__15976, map__15976__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__15976, map__15976__$1, keywordize_keys, keyfn);
                      return iter__4981__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__15976, map__15976__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__16003 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__16005__i = 0, G__16005__a = new Array(arguments.length - 1);
        while (G__16005__i < G__16005__a.length) {
          G__16005__a[G__16005__i] = arguments[G__16005__i + 1];
          ++G__16005__i;
        }
        opts = new cljs.core.IndexedSeq(G__16005__a, 0);
      }
      return G__16003__delegate.call(this, x, opts);
    };
    G__16003.cljs$lang$maxFixedArity = 1;
    G__16003.cljs$lang$applyTo = function(arglist__16006) {
      var x = cljs.core.first(arglist__16006);
      var opts = cljs.core.rest(arglist__16006);
      return G__16003__delegate(x, opts);
    };
    G__16003.cljs$core$IFn$_invoke$arity$variadic = G__16003__delegate;
    return G__16003;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        var G__16007 = null;
        if (arguments.length > 1) {
          var G__16008__i = 0, G__16008__a = new Array(arguments.length - 1);
          while (G__16008__i < G__16008__a.length) {
            G__16008__a[G__16008__i] = arguments[G__16008__i + 1];
            ++G__16008__i;
          }
          G__16007 = new cljs.core.IndexedSeq(G__16008__a, 0);
        }
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__16007);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = function() {
    var G__16011 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16011) : cljs.core.atom.call(null, G__16011);
  }();
  return function(mem) {
    return function() {
      var G__16013__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__16012 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16012) : cljs.core.deref.call(null, G__16012);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__16013 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__16014__i = 0, G__16014__a = new Array(arguments.length - 0);
          while (G__16014__i < G__16014__a.length) {
            G__16014__a[G__16014__i] = arguments[G__16014__i + 0];
            ++G__16014__i;
          }
          args = new cljs.core.IndexedSeq(G__16014__a, 0);
        }
        return G__16013__delegate.call(this, args);
      };
      G__16013.cljs$lang$maxFixedArity = 0;
      G__16013.cljs$lang$applyTo = function(arglist__16015) {
        var args = cljs.core.seq(arglist__16015);
        return G__16013__delegate(args);
      };
      G__16013.cljs$core$IFn$_invoke$arity$variadic = G__16013__delegate;
      return G__16013;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__16017 = ret;
        f = G__16017;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16018__delegate = function(f, args) {
      return trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__16018 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__16019__i = 0, G__16019__a = new Array(arguments.length - 1);
        while (G__16019__i < G__16019__a.length) {
          G__16019__a[G__16019__i] = arguments[G__16019__i + 1];
          ++G__16019__i;
        }
        args = new cljs.core.IndexedSeq(G__16019__a, 0);
      }
      return G__16018__delegate.call(this, f, args);
    };
    G__16018.cljs$lang$maxFixedArity = 1;
    G__16018.cljs$lang$applyTo = function(arglist__16020) {
      var f = cljs.core.first(arglist__16020);
      var args = cljs.core.rest(arglist__16020);
      return G__16018__delegate(f, args);
    };
    G__16018.cljs$core$IFn$_invoke$arity$variadic = G__16018__delegate;
    return G__16018;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        var G__16021 = null;
        if (arguments.length > 1) {
          var G__16022__i = 0, G__16022__a = new Array(arguments.length - 1);
          while (G__16022__i < G__16022__a.length) {
            G__16022__a[G__16022__i] = arguments[G__16022__i + 1];
            ++G__16022__i;
          }
          G__16021 = new cljs.core.IndexedSeq(G__16022__a, 0);
        }
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__16021);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  var G__16025 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__16025) : Math.floor.call(null, G__16025);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__16027 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16027) : f.call(null, G__16027);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__16029 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16029) : cljs.core.atom.call(null, G__16029);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__16030__i = 0, G__16030__a = new Array(arguments.length - 1);
      while (G__16030__i < G__16030__a.length) {
        G__16030__a[G__16030__i] = arguments[G__16030__i + 1];
        ++G__16030__i;
      }
      args = new cljs.core.IndexedSeq(G__16030__a, 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16031) {
    var f = cljs.core.first(arglist__16031);
    var args = cljs.core.rest(arglist__16031);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__16096 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16096) : cljs.core.deref.call(null, G__16096);
    }(), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__4225__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__4225__auto__) {
      return or__4225__auto__;
    } else {
      var or__4225__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__4225__auto____$1) {
        return or__4225__auto____$1;
      } else {
        var and__4213__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__4213__auto__) {
          var and__4213__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__4213__auto____$1) {
            var and__4213__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__4213__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__16121 = isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__16119 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__16119) : child.call(null, G__16119);
                  }(), function() {
                    var G__16120 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__16120) : parent.call(null, G__16120);
                  }());
                  var G__16122 = i + 1;
                  ret = G__16121;
                  i = G__16122;
                  continue;
                }
                break;
              }
            } else {
              return and__4213__auto____$2;
            }
          } else {
            return and__4213__auto____$1;
          }
        } else {
          return and__4213__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__16126 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16126) : cljs.core.deref.call(null, G__16126);
    }(), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__16130 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16130) : cljs.core.deref.call(null, G__16130);
    }(), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__16134 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16134) : cljs.core.deref.call(null, G__16134);
    }(), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__16143 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__16143) : targets.call(null, G__16143);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__16144 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__16144) : sources.call(null, G__16144);
        }()));
      };
    }(tp, td, ta);
    var or__4225__auto__ = cljs.core.contains_QMARK_(function() {
      var G__16148 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__16148) : tp.call(null, G__16148);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__16149 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__16149) : ta.call(null, G__16149);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__16150 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__16150) : ta.call(null, G__16150);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__4225__auto__)) {
      return or__4225__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__16157 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__16157) : parentMap.call(null, G__16157);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__16158 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__16158) : parentMap.call(null, G__16158);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__16151_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__16151_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__16151_SHARP_), cljs.core.second(p1__16151_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__16159 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__16159) : parentMap.call(null, G__16159);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__16152_SHARP_, p2__16153_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__16152_SHARP_, p2__16153_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__16162 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16162) : cljs.core.deref.call(null, G__16162);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__16163 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16163) : cljs.core.deref.call(null, G__16163);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__16179 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16179) : cljs.core.deref.call(null, G__16179);
  }().call(null, x);
  var or__4225__auto__ = cljs.core.truth_(function() {
    var and__4213__auto__ = xprefs;
    if (cljs.core.truth_(and__4213__auto__)) {
      var G__16181 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__16181) : xprefs.call(null, G__16181);
    } else {
      return and__4213__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4225__auto__)) {
    return or__4225__auto__;
  } else {
    var or__4225__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__16182 = cljs.core.rest(ps);
          ps = G__16182;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4225__auto____$1)) {
      return or__4225__auto____$1;
    } else {
      var or__4225__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__16183 = cljs.core.rest(ps);
            ps = G__16183;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4225__auto____$2)) {
        return or__4225__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__4225__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4225__auto__)) {
    return or__4225__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__16197) {
    var vec__16198 = p__16197;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16198, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16198, 1, null);
    var e = vec__16198;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__16199 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16199) : cljs.core.deref.call(null, G__16199);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4225__auto__ = be == null;
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__16200 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16200) : cljs.core.deref.call(null, G__16200);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__16201 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16201) : cljs.core.deref.call(null, G__16201);
    }(), function() {
      var G__16202 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16202) : cljs.core.deref.call(null, G__16202);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj16204 = {};
  return obj16204;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._reset[function() {
        var G__16208 = x__4869__auto__;
        return goog.typeOf(G__16208);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._reset["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._add_method[function() {
        var G__16212 = x__4869__auto__;
        return goog.typeOf(G__16212);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._add_method["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._remove_method[function() {
        var G__16216 = x__4869__auto__;
        return goog.typeOf(G__16216);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._remove_method["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._prefer_method[function() {
        var G__16220 = x__4869__auto__;
        return goog.typeOf(G__16220);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._get_method[function() {
        var G__16224 = x__4869__auto__;
        return goog.typeOf(G__16224);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._get_method["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._methods[function() {
        var G__16228 = x__4869__auto__;
        return goog.typeOf(G__16228);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._methods["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__4213__auto__ = mf;
    if (and__4213__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4869__auto__ = mf == null ? null : mf;
    return function() {
      var or__4225__auto__ = cljs.core._prefers[function() {
        var G__16232 = x__4869__auto__;
        return goog.typeOf(G__16232);
      }()];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core._prefers["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__16234 = this$__$1;
  return goog.getUid(G__16234);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__16235 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16235) : cljs.core.deref.call(null, G__16235);
  }(), function() {
    var G__16236 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16236) : cljs.core.deref.call(null, G__16236);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__16237 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16237) : cljs.core.deref.call(null, G__16237);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__16238 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16238) : cljs.core.deref.call(null, G__16238);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__16239 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16239) : cljs.core.deref.call(null, G__16239);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__16240 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16240) : cljs.core.deref.call(null, G__16240);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__17081 = null;
  var G__17081__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__17081__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16241 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__16241) : self__.dispatch_fn.call(null, G__16241);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16242 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__16242) : target_fn.call(null, G__16242);
  };
  var G__17081__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16243 = a;
      var G__16244 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__16243, G__16244) : self__.dispatch_fn.call(null, G__16243, G__16244);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16245 = a;
    var G__16246 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__16245, G__16246) : target_fn.call(null, G__16245, G__16246);
  };
  var G__17081__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16247 = a;
      var G__16248 = b;
      var G__16249 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__16247, G__16248, G__16249) : self__.dispatch_fn.call(null, G__16247, G__16248, G__16249);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16250 = a;
    var G__16251 = b;
    var G__16252 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__16250, G__16251, G__16252) : target_fn.call(null, G__16250, G__16251, G__16252);
  };
  var G__17081__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16253 = a;
      var G__16254 = b;
      var G__16255 = c;
      var G__16256 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__16253, G__16254, G__16255, G__16256) : self__.dispatch_fn.call(null, G__16253, G__16254, G__16255, G__16256);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16257 = a;
    var G__16258 = b;
    var G__16259 = c;
    var G__16260 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__16257, G__16258, G__16259, G__16260) : target_fn.call(null, G__16257, G__16258, G__16259, G__16260);
  };
  var G__17081__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16261 = a;
      var G__16262 = b;
      var G__16263 = c;
      var G__16264 = d;
      var G__16265 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__16261, G__16262, G__16263, G__16264, G__16265) : self__.dispatch_fn.call(null, G__16261, G__16262, G__16263, G__16264, G__16265);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16266 = a;
    var G__16267 = b;
    var G__16268 = c;
    var G__16269 = d;
    var G__16270 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__16266, G__16267, G__16268, G__16269, G__16270) : target_fn.call(null, G__16266, G__16267, G__16268, G__16269, G__16270);
  };
  var G__17081__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16271 = a;
      var G__16272 = b;
      var G__16273 = c;
      var G__16274 = d;
      var G__16275 = e;
      var G__16276 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__16271, G__16272, G__16273, G__16274, G__16275, G__16276) : self__.dispatch_fn.call(null, G__16271, G__16272, G__16273, G__16274, G__16275, G__16276);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16277 = a;
    var G__16278 = b;
    var G__16279 = c;
    var G__16280 = d;
    var G__16281 = e;
    var G__16282 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__16277, G__16278, G__16279, G__16280, G__16281, G__16282) : target_fn.call(null, G__16277, G__16278, G__16279, G__16280, G__16281, G__16282);
  };
  var G__17081__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16283 = a;
      var G__16284 = b;
      var G__16285 = c;
      var G__16286 = d;
      var G__16287 = e;
      var G__16288 = f;
      var G__16289 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__16283, G__16284, G__16285, G__16286, G__16287, G__16288, G__16289) : self__.dispatch_fn.call(null, G__16283, G__16284, G__16285, G__16286, G__16287, G__16288, G__16289);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16290 = a;
    var G__16291 = b;
    var G__16292 = c;
    var G__16293 = d;
    var G__16294 = e;
    var G__16295 = f;
    var G__16296 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__16290, G__16291, G__16292, G__16293, G__16294, G__16295, G__16296) : target_fn.call(null, G__16290, G__16291, G__16292, G__16293, G__16294, G__16295, G__16296);
  };
  var G__17081__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16297 = a;
      var G__16298 = b;
      var G__16299 = c;
      var G__16300 = d;
      var G__16301 = e;
      var G__16302 = f;
      var G__16303 = g;
      var G__16304 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__16297, G__16298, G__16299, G__16300, G__16301, G__16302, G__16303, G__16304) : self__.dispatch_fn.call(null, G__16297, G__16298, G__16299, G__16300, G__16301, G__16302, G__16303, G__16304);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16305 = a;
    var G__16306 = b;
    var G__16307 = c;
    var G__16308 = d;
    var G__16309 = e;
    var G__16310 = f;
    var G__16311 = g;
    var G__16312 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__16305, G__16306, G__16307, G__16308, G__16309, G__16310, G__16311, G__16312) : target_fn.call(null, G__16305, G__16306, G__16307, G__16308, G__16309, G__16310, G__16311, G__16312);
  };
  var G__17081__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16313 = a;
      var G__16314 = b;
      var G__16315 = c;
      var G__16316 = d;
      var G__16317 = e;
      var G__16318 = f;
      var G__16319 = g;
      var G__16320 = h;
      var G__16321 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__16313, G__16314, G__16315, G__16316, G__16317, G__16318, G__16319, G__16320, G__16321) : self__.dispatch_fn.call(null, G__16313, G__16314, G__16315, G__16316, G__16317, G__16318, G__16319, G__16320, G__16321);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16322 = a;
    var G__16323 = b;
    var G__16324 = c;
    var G__16325 = d;
    var G__16326 = e;
    var G__16327 = f;
    var G__16328 = g;
    var G__16329 = h;
    var G__16330 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__16322, G__16323, G__16324, G__16325, G__16326, G__16327, G__16328, G__16329, G__16330) : target_fn.call(null, G__16322, G__16323, G__16324, G__16325, G__16326, G__16327, G__16328, G__16329, G__16330);
  };
  var G__17081__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16331 = a;
      var G__16332 = b;
      var G__16333 = c;
      var G__16334 = d;
      var G__16335 = e;
      var G__16336 = f;
      var G__16337 = g;
      var G__16338 = h;
      var G__16339 = i;
      var G__16340 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__16331, G__16332, G__16333, G__16334, G__16335, G__16336, G__16337, G__16338, G__16339, G__16340) : self__.dispatch_fn.call(null, G__16331, G__16332, G__16333, G__16334, G__16335, G__16336, G__16337, G__16338, G__16339, G__16340);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16341 = a;
    var G__16342 = b;
    var G__16343 = c;
    var G__16344 = d;
    var G__16345 = e;
    var G__16346 = f;
    var G__16347 = g;
    var G__16348 = h;
    var G__16349 = i;
    var G__16350 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__16341, G__16342, G__16343, G__16344, G__16345, G__16346, G__16347, G__16348, G__16349, G__16350) : target_fn.call(null, G__16341, G__16342, G__16343, G__16344, G__16345, G__16346, G__16347, G__16348, G__16349, G__16350);
  };
  var G__17081__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16351 = a;
      var G__16352 = b;
      var G__16353 = c;
      var G__16354 = d;
      var G__16355 = e;
      var G__16356 = f;
      var G__16357 = g;
      var G__16358 = h;
      var G__16359 = i;
      var G__16360 = j;
      var G__16361 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__16351, G__16352, G__16353, G__16354, G__16355, G__16356, G__16357, G__16358, G__16359, G__16360, G__16361) : self__.dispatch_fn.call(null, G__16351, G__16352, G__16353, G__16354, G__16355, G__16356, G__16357, G__16358, G__16359, G__16360, G__16361);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16362 = a;
    var G__16363 = b;
    var G__16364 = c;
    var G__16365 = d;
    var G__16366 = e;
    var G__16367 = f;
    var G__16368 = g;
    var G__16369 = h;
    var G__16370 = i;
    var G__16371 = j;
    var G__16372 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__16362, G__16363, G__16364, G__16365, G__16366, G__16367, G__16368, G__16369, G__16370, G__16371, G__16372) : target_fn.call(null, G__16362, G__16363, G__16364, G__16365, G__16366, G__16367, G__16368, G__16369, G__16370, G__16371, G__16372);
  };
  var G__17081__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16373 = a;
      var G__16374 = b;
      var G__16375 = c;
      var G__16376 = d;
      var G__16377 = e;
      var G__16378 = f;
      var G__16379 = g;
      var G__16380 = h;
      var G__16381 = i;
      var G__16382 = j;
      var G__16383 = k;
      var G__16384 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__16373, G__16374, G__16375, G__16376, G__16377, G__16378, G__16379, G__16380, G__16381, G__16382, G__16383, G__16384) : self__.dispatch_fn.call(null, G__16373, G__16374, G__16375, G__16376, G__16377, G__16378, G__16379, G__16380, G__16381, G__16382, G__16383, G__16384);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16385 = a;
    var G__16386 = b;
    var G__16387 = c;
    var G__16388 = d;
    var G__16389 = e;
    var G__16390 = f;
    var G__16391 = g;
    var G__16392 = h;
    var G__16393 = i;
    var G__16394 = j;
    var G__16395 = k;
    var G__16396 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__16385, G__16386, G__16387, G__16388, G__16389, G__16390, G__16391, G__16392, G__16393, G__16394, G__16395, G__16396) : target_fn.call(null, G__16385, G__16386, G__16387, G__16388, G__16389, G__16390, G__16391, G__16392, G__16393, G__16394, G__16395, G__16396);
  };
  var G__17081__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16397 = a;
      var G__16398 = b;
      var G__16399 = c;
      var G__16400 = d;
      var G__16401 = e;
      var G__16402 = f;
      var G__16403 = g;
      var G__16404 = h;
      var G__16405 = i;
      var G__16406 = j;
      var G__16407 = k;
      var G__16408 = l;
      var G__16409 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__16397, G__16398, G__16399, G__16400, G__16401, G__16402, G__16403, G__16404, G__16405, G__16406, G__16407, G__16408, G__16409) : self__.dispatch_fn.call(null, G__16397, G__16398, G__16399, G__16400, G__16401, G__16402, G__16403, G__16404, G__16405, G__16406, G__16407, G__16408, G__16409);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16410 = a;
    var G__16411 = b;
    var G__16412 = c;
    var G__16413 = d;
    var G__16414 = e;
    var G__16415 = f;
    var G__16416 = g;
    var G__16417 = h;
    var G__16418 = i;
    var G__16419 = j;
    var G__16420 = k;
    var G__16421 = l;
    var G__16422 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__16410, G__16411, G__16412, G__16413, G__16414, G__16415, G__16416, G__16417, G__16418, G__16419, G__16420, G__16421, G__16422) : target_fn.call(null, G__16410, G__16411, G__16412, G__16413, G__16414, G__16415, G__16416, G__16417, G__16418, G__16419, G__16420, G__16421, G__16422);
  };
  var G__17081__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16423 = a;
      var G__16424 = b;
      var G__16425 = c;
      var G__16426 = d;
      var G__16427 = e;
      var G__16428 = f;
      var G__16429 = g;
      var G__16430 = h;
      var G__16431 = i;
      var G__16432 = j;
      var G__16433 = k;
      var G__16434 = l;
      var G__16435 = m;
      var G__16436 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__16423, G__16424, G__16425, G__16426, G__16427, G__16428, G__16429, G__16430, G__16431, G__16432, G__16433, G__16434, G__16435, G__16436) : self__.dispatch_fn.call(null, G__16423, G__16424, G__16425, G__16426, G__16427, G__16428, G__16429, G__16430, G__16431, G__16432, G__16433, G__16434, G__16435, G__16436);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16437 = a;
    var G__16438 = b;
    var G__16439 = c;
    var G__16440 = d;
    var G__16441 = e;
    var G__16442 = f;
    var G__16443 = g;
    var G__16444 = h;
    var G__16445 = i;
    var G__16446 = j;
    var G__16447 = k;
    var G__16448 = l;
    var G__16449 = m;
    var G__16450 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__16437, G__16438, G__16439, G__16440, G__16441, G__16442, G__16443, G__16444, G__16445, G__16446, G__16447, G__16448, G__16449, G__16450) : target_fn.call(null, G__16437, G__16438, G__16439, G__16440, G__16441, G__16442, G__16443, G__16444, G__16445, G__16446, G__16447, G__16448, G__16449, G__16450);
  };
  var G__17081__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16451 = a;
      var G__16452 = b;
      var G__16453 = c;
      var G__16454 = d;
      var G__16455 = e;
      var G__16456 = f;
      var G__16457 = g;
      var G__16458 = h;
      var G__16459 = i;
      var G__16460 = j;
      var G__16461 = k;
      var G__16462 = l;
      var G__16463 = m;
      var G__16464 = n;
      var G__16465 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__16451, G__16452, G__16453, G__16454, G__16455, G__16456, G__16457, G__16458, G__16459, G__16460, G__16461, G__16462, G__16463, G__16464, G__16465) : self__.dispatch_fn.call(null, G__16451, G__16452, G__16453, G__16454, G__16455, G__16456, G__16457, G__16458, G__16459, G__16460, G__16461, G__16462, G__16463, G__16464, G__16465);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16466 = a;
    var G__16467 = b;
    var G__16468 = c;
    var G__16469 = d;
    var G__16470 = e;
    var G__16471 = f;
    var G__16472 = g;
    var G__16473 = h;
    var G__16474 = i;
    var G__16475 = j;
    var G__16476 = k;
    var G__16477 = l;
    var G__16478 = m;
    var G__16479 = n;
    var G__16480 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__16466, G__16467, G__16468, G__16469, G__16470, G__16471, G__16472, G__16473, G__16474, G__16475, G__16476, G__16477, G__16478, G__16479, G__16480) : target_fn.call(null, G__16466, G__16467, G__16468, G__16469, G__16470, G__16471, G__16472, G__16473, G__16474, G__16475, G__16476, G__16477, G__16478, G__16479, G__16480);
  };
  var G__17081__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16481 = a;
      var G__16482 = b;
      var G__16483 = c;
      var G__16484 = d;
      var G__16485 = e;
      var G__16486 = f;
      var G__16487 = g;
      var G__16488 = h;
      var G__16489 = i;
      var G__16490 = j;
      var G__16491 = k;
      var G__16492 = l;
      var G__16493 = m;
      var G__16494 = n;
      var G__16495 = o;
      var G__16496 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__16481, G__16482, G__16483, G__16484, G__16485, G__16486, G__16487, G__16488, G__16489, G__16490, G__16491, G__16492, G__16493, G__16494, G__16495, G__16496) : self__.dispatch_fn.call(null, G__16481, G__16482, G__16483, G__16484, G__16485, G__16486, G__16487, G__16488, G__16489, G__16490, G__16491, G__16492, G__16493, G__16494, G__16495, G__16496);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16497 = a;
    var G__16498 = b;
    var G__16499 = c;
    var G__16500 = d;
    var G__16501 = e;
    var G__16502 = f;
    var G__16503 = g;
    var G__16504 = h;
    var G__16505 = i;
    var G__16506 = j;
    var G__16507 = k;
    var G__16508 = l;
    var G__16509 = m;
    var G__16510 = n;
    var G__16511 = o;
    var G__16512 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__16497, G__16498, G__16499, G__16500, G__16501, G__16502, G__16503, G__16504, G__16505, G__16506, G__16507, G__16508, G__16509, G__16510, G__16511, G__16512) : target_fn.call(null, G__16497, G__16498, G__16499, G__16500, G__16501, G__16502, G__16503, G__16504, G__16505, G__16506, G__16507, G__16508, G__16509, G__16510, G__16511, G__16512);
  };
  var G__17081__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16513 = a;
      var G__16514 = b;
      var G__16515 = c;
      var G__16516 = d;
      var G__16517 = e;
      var G__16518 = f;
      var G__16519 = g;
      var G__16520 = h;
      var G__16521 = i;
      var G__16522 = j;
      var G__16523 = k;
      var G__16524 = l;
      var G__16525 = m;
      var G__16526 = n;
      var G__16527 = o;
      var G__16528 = p;
      var G__16529 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__16513, G__16514, G__16515, G__16516, G__16517, G__16518, G__16519, G__16520, G__16521, G__16522, G__16523, G__16524, G__16525, G__16526, G__16527, G__16528, G__16529) : self__.dispatch_fn.call(null, G__16513, G__16514, G__16515, G__16516, G__16517, G__16518, G__16519, G__16520, G__16521, G__16522, G__16523, G__16524, G__16525, G__16526, G__16527, G__16528, G__16529);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16530 = a;
    var G__16531 = b;
    var G__16532 = c;
    var G__16533 = d;
    var G__16534 = e;
    var G__16535 = f;
    var G__16536 = g;
    var G__16537 = h;
    var G__16538 = i;
    var G__16539 = j;
    var G__16540 = k;
    var G__16541 = l;
    var G__16542 = m;
    var G__16543 = n;
    var G__16544 = o;
    var G__16545 = p;
    var G__16546 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__16530, G__16531, G__16532, G__16533, G__16534, G__16535, G__16536, G__16537, G__16538, G__16539, G__16540, G__16541, G__16542, G__16543, G__16544, G__16545, G__16546) : target_fn.call(null, G__16530, G__16531, G__16532, G__16533, G__16534, G__16535, G__16536, G__16537, G__16538, G__16539, G__16540, G__16541, G__16542, G__16543, G__16544, G__16545, G__16546);
  };
  var G__17081__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16547 = a;
      var G__16548 = b;
      var G__16549 = c;
      var G__16550 = d;
      var G__16551 = e;
      var G__16552 = f;
      var G__16553 = g;
      var G__16554 = h;
      var G__16555 = i;
      var G__16556 = j;
      var G__16557 = k;
      var G__16558 = l;
      var G__16559 = m;
      var G__16560 = n;
      var G__16561 = o;
      var G__16562 = p;
      var G__16563 = q;
      var G__16564 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__16547, G__16548, G__16549, G__16550, G__16551, G__16552, G__16553, G__16554, G__16555, G__16556, G__16557, G__16558, G__16559, G__16560, G__16561, G__16562, G__16563, G__16564) : self__.dispatch_fn.call(null, G__16547, G__16548, G__16549, G__16550, G__16551, G__16552, G__16553, G__16554, G__16555, G__16556, G__16557, G__16558, G__16559, G__16560, G__16561, G__16562, G__16563, G__16564);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16565 = a;
    var G__16566 = b;
    var G__16567 = c;
    var G__16568 = d;
    var G__16569 = e;
    var G__16570 = f;
    var G__16571 = g;
    var G__16572 = h;
    var G__16573 = i;
    var G__16574 = j;
    var G__16575 = k;
    var G__16576 = l;
    var G__16577 = m;
    var G__16578 = n;
    var G__16579 = o;
    var G__16580 = p;
    var G__16581 = q;
    var G__16582 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__16565, G__16566, G__16567, G__16568, G__16569, G__16570, G__16571, G__16572, G__16573, G__16574, G__16575, G__16576, G__16577, G__16578, G__16579, G__16580, G__16581, G__16582) : target_fn.call(null, G__16565, G__16566, G__16567, G__16568, G__16569, G__16570, G__16571, G__16572, G__16573, G__16574, G__16575, G__16576, G__16577, G__16578, G__16579, G__16580, G__16581, G__16582);
  };
  var G__17081__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16583 = a;
      var G__16584 = b;
      var G__16585 = c;
      var G__16586 = d;
      var G__16587 = e;
      var G__16588 = f;
      var G__16589 = g;
      var G__16590 = h;
      var G__16591 = i;
      var G__16592 = j;
      var G__16593 = k;
      var G__16594 = l;
      var G__16595 = m;
      var G__16596 = n;
      var G__16597 = o;
      var G__16598 = p;
      var G__16599 = q;
      var G__16600 = r;
      var G__16601 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__16583, G__16584, G__16585, G__16586, G__16587, G__16588, G__16589, G__16590, G__16591, G__16592, G__16593, G__16594, G__16595, G__16596, G__16597, G__16598, G__16599, G__16600, G__16601) : self__.dispatch_fn.call(null, G__16583, G__16584, G__16585, G__16586, G__16587, G__16588, G__16589, G__16590, G__16591, G__16592, G__16593, G__16594, G__16595, G__16596, G__16597, G__16598, G__16599, 
      G__16600, G__16601);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16602 = a;
    var G__16603 = b;
    var G__16604 = c;
    var G__16605 = d;
    var G__16606 = e;
    var G__16607 = f;
    var G__16608 = g;
    var G__16609 = h;
    var G__16610 = i;
    var G__16611 = j;
    var G__16612 = k;
    var G__16613 = l;
    var G__16614 = m;
    var G__16615 = n;
    var G__16616 = o;
    var G__16617 = p;
    var G__16618 = q;
    var G__16619 = r;
    var G__16620 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__16602, G__16603, G__16604, G__16605, G__16606, G__16607, G__16608, G__16609, G__16610, G__16611, G__16612, G__16613, G__16614, G__16615, G__16616, G__16617, G__16618, G__16619, G__16620) : target_fn.call(null, G__16602, G__16603, G__16604, G__16605, G__16606, G__16607, G__16608, G__16609, G__16610, G__16611, G__16612, G__16613, G__16614, G__16615, G__16616, G__16617, G__16618, G__16619, G__16620);
  };
  var G__17081__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__16621 = a;
      var G__16622 = b;
      var G__16623 = c;
      var G__16624 = d;
      var G__16625 = e;
      var G__16626 = f;
      var G__16627 = g;
      var G__16628 = h;
      var G__16629 = i;
      var G__16630 = j;
      var G__16631 = k;
      var G__16632 = l;
      var G__16633 = m;
      var G__16634 = n;
      var G__16635 = o;
      var G__16636 = p;
      var G__16637 = q;
      var G__16638 = r;
      var G__16639 = s;
      var G__16640 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__16621, G__16622, G__16623, G__16624, G__16625, G__16626, G__16627, G__16628, G__16629, G__16630, G__16631, G__16632, G__16633, G__16634, G__16635, G__16636, G__16637, G__16638, G__16639, G__16640) : self__.dispatch_fn.call(null, G__16621, G__16622, G__16623, G__16624, G__16625, G__16626, G__16627, G__16628, G__16629, G__16630, G__16631, G__16632, G__16633, G__16634, G__16635, G__16636, 
      G__16637, G__16638, G__16639, G__16640);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__16641 = a;
    var G__16642 = b;
    var G__16643 = c;
    var G__16644 = d;
    var G__16645 = e;
    var G__16646 = f;
    var G__16647 = g;
    var G__16648 = h;
    var G__16649 = i;
    var G__16650 = j;
    var G__16651 = k;
    var G__16652 = l;
    var G__16653 = m;
    var G__16654 = n;
    var G__16655 = o;
    var G__16656 = p;
    var G__16657 = q;
    var G__16658 = r;
    var G__16659 = s;
    var G__16660 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__16641, G__16642, G__16643, G__16644, G__16645, G__16646, G__16647, G__16648, G__16649, G__16650, G__16651, G__16652, G__16653, G__16654, G__16655, G__16656, G__16657, G__16658, G__16659, G__16660) : target_fn.call(null, G__16641, G__16642, G__16643, G__16644, G__16645, G__16646, G__16647, G__16648, G__16649, G__16650, G__16651, G__16652, G__16653, G__16654, G__16655, G__16656, G__16657, G__16658, G__16659, 
    G__16660);
  };
  var G__17081__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__17081 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__17081__1.call(this, self__);
      case 2:
        return G__17081__2.call(this, self__, a);
      case 3:
        return G__17081__3.call(this, self__, a, b);
      case 4:
        return G__17081__4.call(this, self__, a, b, c);
      case 5:
        return G__17081__5.call(this, self__, a, b, c, d);
      case 6:
        return G__17081__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__17081__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__17081__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__17081__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__17081__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__17081__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__17081__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__17081__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__17081__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__17081__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__17081__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__17081__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__17081__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__17081__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__17081__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__17081__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__17081__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17081.cljs$core$IFn$_invoke$arity$1 = G__17081__1;
  G__17081.cljs$core$IFn$_invoke$arity$2 = G__17081__2;
  G__17081.cljs$core$IFn$_invoke$arity$3 = G__17081__3;
  G__17081.cljs$core$IFn$_invoke$arity$4 = G__17081__4;
  G__17081.cljs$core$IFn$_invoke$arity$5 = G__17081__5;
  G__17081.cljs$core$IFn$_invoke$arity$6 = G__17081__6;
  G__17081.cljs$core$IFn$_invoke$arity$7 = G__17081__7;
  G__17081.cljs$core$IFn$_invoke$arity$8 = G__17081__8;
  G__17081.cljs$core$IFn$_invoke$arity$9 = G__17081__9;
  G__17081.cljs$core$IFn$_invoke$arity$10 = G__17081__10;
  G__17081.cljs$core$IFn$_invoke$arity$11 = G__17081__11;
  G__17081.cljs$core$IFn$_invoke$arity$12 = G__17081__12;
  G__17081.cljs$core$IFn$_invoke$arity$13 = G__17081__13;
  G__17081.cljs$core$IFn$_invoke$arity$14 = G__17081__14;
  G__17081.cljs$core$IFn$_invoke$arity$15 = G__17081__15;
  G__17081.cljs$core$IFn$_invoke$arity$16 = G__17081__16;
  G__17081.cljs$core$IFn$_invoke$arity$17 = G__17081__17;
  G__17081.cljs$core$IFn$_invoke$arity$18 = G__17081__18;
  G__17081.cljs$core$IFn$_invoke$arity$19 = G__17081__19;
  G__17081.cljs$core$IFn$_invoke$arity$20 = G__17081__20;
  G__17081.cljs$core$IFn$_invoke$arity$21 = G__17081__21;
  G__17081.cljs$core$IFn$_invoke$arity$22 = G__17081__22;
  return G__17081;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args16233) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16233)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16661 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__16661) : self__.dispatch_fn.call(null, G__16661);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16662 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__16662) : target_fn.call(null, G__16662);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16663 = a;
    var G__16664 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__16663, G__16664) : self__.dispatch_fn.call(null, G__16663, G__16664);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16665 = a;
  var G__16666 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__16665, G__16666) : target_fn.call(null, G__16665, G__16666);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16667 = a;
    var G__16668 = b;
    var G__16669 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__16667, G__16668, G__16669) : self__.dispatch_fn.call(null, G__16667, G__16668, G__16669);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16670 = a;
  var G__16671 = b;
  var G__16672 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__16670, G__16671, G__16672) : target_fn.call(null, G__16670, G__16671, G__16672);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16673 = a;
    var G__16674 = b;
    var G__16675 = c;
    var G__16676 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__16673, G__16674, G__16675, G__16676) : self__.dispatch_fn.call(null, G__16673, G__16674, G__16675, G__16676);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16677 = a;
  var G__16678 = b;
  var G__16679 = c;
  var G__16680 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__16677, G__16678, G__16679, G__16680) : target_fn.call(null, G__16677, G__16678, G__16679, G__16680);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16681 = a;
    var G__16682 = b;
    var G__16683 = c;
    var G__16684 = d;
    var G__16685 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__16681, G__16682, G__16683, G__16684, G__16685) : self__.dispatch_fn.call(null, G__16681, G__16682, G__16683, G__16684, G__16685);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16686 = a;
  var G__16687 = b;
  var G__16688 = c;
  var G__16689 = d;
  var G__16690 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__16686, G__16687, G__16688, G__16689, G__16690) : target_fn.call(null, G__16686, G__16687, G__16688, G__16689, G__16690);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16691 = a;
    var G__16692 = b;
    var G__16693 = c;
    var G__16694 = d;
    var G__16695 = e;
    var G__16696 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__16691, G__16692, G__16693, G__16694, G__16695, G__16696) : self__.dispatch_fn.call(null, G__16691, G__16692, G__16693, G__16694, G__16695, G__16696);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16697 = a;
  var G__16698 = b;
  var G__16699 = c;
  var G__16700 = d;
  var G__16701 = e;
  var G__16702 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__16697, G__16698, G__16699, G__16700, G__16701, G__16702) : target_fn.call(null, G__16697, G__16698, G__16699, G__16700, G__16701, G__16702);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16703 = a;
    var G__16704 = b;
    var G__16705 = c;
    var G__16706 = d;
    var G__16707 = e;
    var G__16708 = f;
    var G__16709 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__16703, G__16704, G__16705, G__16706, G__16707, G__16708, G__16709) : self__.dispatch_fn.call(null, G__16703, G__16704, G__16705, G__16706, G__16707, G__16708, G__16709);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16710 = a;
  var G__16711 = b;
  var G__16712 = c;
  var G__16713 = d;
  var G__16714 = e;
  var G__16715 = f;
  var G__16716 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__16710, G__16711, G__16712, G__16713, G__16714, G__16715, G__16716) : target_fn.call(null, G__16710, G__16711, G__16712, G__16713, G__16714, G__16715, G__16716);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16717 = a;
    var G__16718 = b;
    var G__16719 = c;
    var G__16720 = d;
    var G__16721 = e;
    var G__16722 = f;
    var G__16723 = g;
    var G__16724 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__16717, G__16718, G__16719, G__16720, G__16721, G__16722, G__16723, G__16724) : self__.dispatch_fn.call(null, G__16717, G__16718, G__16719, G__16720, G__16721, G__16722, G__16723, G__16724);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16725 = a;
  var G__16726 = b;
  var G__16727 = c;
  var G__16728 = d;
  var G__16729 = e;
  var G__16730 = f;
  var G__16731 = g;
  var G__16732 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__16725, G__16726, G__16727, G__16728, G__16729, G__16730, G__16731, G__16732) : target_fn.call(null, G__16725, G__16726, G__16727, G__16728, G__16729, G__16730, G__16731, G__16732);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16733 = a;
    var G__16734 = b;
    var G__16735 = c;
    var G__16736 = d;
    var G__16737 = e;
    var G__16738 = f;
    var G__16739 = g;
    var G__16740 = h;
    var G__16741 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739, G__16740, G__16741) : self__.dispatch_fn.call(null, G__16733, G__16734, G__16735, G__16736, G__16737, G__16738, G__16739, G__16740, G__16741);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16742 = a;
  var G__16743 = b;
  var G__16744 = c;
  var G__16745 = d;
  var G__16746 = e;
  var G__16747 = f;
  var G__16748 = g;
  var G__16749 = h;
  var G__16750 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__16742, G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750) : target_fn.call(null, G__16742, G__16743, G__16744, G__16745, G__16746, G__16747, G__16748, G__16749, G__16750);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16751 = a;
    var G__16752 = b;
    var G__16753 = c;
    var G__16754 = d;
    var G__16755 = e;
    var G__16756 = f;
    var G__16757 = g;
    var G__16758 = h;
    var G__16759 = i;
    var G__16760 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__16751, G__16752, G__16753, G__16754, G__16755, G__16756, G__16757, G__16758, G__16759, G__16760) : self__.dispatch_fn.call(null, G__16751, G__16752, G__16753, G__16754, G__16755, G__16756, G__16757, G__16758, G__16759, G__16760);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16761 = a;
  var G__16762 = b;
  var G__16763 = c;
  var G__16764 = d;
  var G__16765 = e;
  var G__16766 = f;
  var G__16767 = g;
  var G__16768 = h;
  var G__16769 = i;
  var G__16770 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__16761, G__16762, G__16763, G__16764, G__16765, G__16766, G__16767, G__16768, G__16769, G__16770) : target_fn.call(null, G__16761, G__16762, G__16763, G__16764, G__16765, G__16766, G__16767, G__16768, G__16769, G__16770);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16771 = a;
    var G__16772 = b;
    var G__16773 = c;
    var G__16774 = d;
    var G__16775 = e;
    var G__16776 = f;
    var G__16777 = g;
    var G__16778 = h;
    var G__16779 = i;
    var G__16780 = j;
    var G__16781 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__16771, G__16772, G__16773, G__16774, G__16775, G__16776, G__16777, G__16778, G__16779, G__16780, G__16781) : self__.dispatch_fn.call(null, G__16771, G__16772, G__16773, G__16774, G__16775, G__16776, G__16777, G__16778, G__16779, G__16780, G__16781);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16782 = a;
  var G__16783 = b;
  var G__16784 = c;
  var G__16785 = d;
  var G__16786 = e;
  var G__16787 = f;
  var G__16788 = g;
  var G__16789 = h;
  var G__16790 = i;
  var G__16791 = j;
  var G__16792 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792) : target_fn.call(null, G__16782, G__16783, G__16784, G__16785, G__16786, G__16787, G__16788, G__16789, G__16790, G__16791, G__16792);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16793 = a;
    var G__16794 = b;
    var G__16795 = c;
    var G__16796 = d;
    var G__16797 = e;
    var G__16798 = f;
    var G__16799 = g;
    var G__16800 = h;
    var G__16801 = i;
    var G__16802 = j;
    var G__16803 = k;
    var G__16804 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__16793, G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804) : self__.dispatch_fn.call(null, G__16793, G__16794, G__16795, G__16796, G__16797, G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, G__16804);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16805 = a;
  var G__16806 = b;
  var G__16807 = c;
  var G__16808 = d;
  var G__16809 = e;
  var G__16810 = f;
  var G__16811 = g;
  var G__16812 = h;
  var G__16813 = i;
  var G__16814 = j;
  var G__16815 = k;
  var G__16816 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__16805, G__16806, G__16807, G__16808, G__16809, G__16810, G__16811, G__16812, G__16813, G__16814, G__16815, G__16816) : target_fn.call(null, G__16805, G__16806, G__16807, G__16808, G__16809, G__16810, G__16811, G__16812, G__16813, G__16814, G__16815, G__16816);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16817 = a;
    var G__16818 = b;
    var G__16819 = c;
    var G__16820 = d;
    var G__16821 = e;
    var G__16822 = f;
    var G__16823 = g;
    var G__16824 = h;
    var G__16825 = i;
    var G__16826 = j;
    var G__16827 = k;
    var G__16828 = l;
    var G__16829 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823, G__16824, G__16825, G__16826, G__16827, G__16828, G__16829) : self__.dispatch_fn.call(null, G__16817, G__16818, G__16819, G__16820, G__16821, G__16822, G__16823, G__16824, G__16825, G__16826, G__16827, G__16828, G__16829);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16830 = a;
  var G__16831 = b;
  var G__16832 = c;
  var G__16833 = d;
  var G__16834 = e;
  var G__16835 = f;
  var G__16836 = g;
  var G__16837 = h;
  var G__16838 = i;
  var G__16839 = j;
  var G__16840 = k;
  var G__16841 = l;
  var G__16842 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__16830, G__16831, G__16832, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840, G__16841, G__16842) : target_fn.call(null, G__16830, G__16831, G__16832, G__16833, G__16834, G__16835, G__16836, G__16837, G__16838, G__16839, G__16840, G__16841, G__16842);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16843 = a;
    var G__16844 = b;
    var G__16845 = c;
    var G__16846 = d;
    var G__16847 = e;
    var G__16848 = f;
    var G__16849 = g;
    var G__16850 = h;
    var G__16851 = i;
    var G__16852 = j;
    var G__16853 = k;
    var G__16854 = l;
    var G__16855 = m;
    var G__16856 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__16843, G__16844, G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854, G__16855, G__16856) : self__.dispatch_fn.call(null, G__16843, G__16844, G__16845, G__16846, G__16847, G__16848, G__16849, G__16850, G__16851, G__16852, G__16853, G__16854, G__16855, G__16856);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16857 = a;
  var G__16858 = b;
  var G__16859 = c;
  var G__16860 = d;
  var G__16861 = e;
  var G__16862 = f;
  var G__16863 = g;
  var G__16864 = h;
  var G__16865 = i;
  var G__16866 = j;
  var G__16867 = k;
  var G__16868 = l;
  var G__16869 = m;
  var G__16870 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__16857, G__16858, G__16859, G__16860, G__16861, G__16862, G__16863, G__16864, G__16865, G__16866, G__16867, G__16868, G__16869, G__16870) : target_fn.call(null, G__16857, G__16858, G__16859, G__16860, G__16861, G__16862, G__16863, G__16864, G__16865, G__16866, G__16867, G__16868, G__16869, G__16870);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16871 = a;
    var G__16872 = b;
    var G__16873 = c;
    var G__16874 = d;
    var G__16875 = e;
    var G__16876 = f;
    var G__16877 = g;
    var G__16878 = h;
    var G__16879 = i;
    var G__16880 = j;
    var G__16881 = k;
    var G__16882 = l;
    var G__16883 = m;
    var G__16884 = n;
    var G__16885 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__16871, G__16872, G__16873, G__16874, G__16875, G__16876, G__16877, G__16878, G__16879, G__16880, G__16881, G__16882, G__16883, G__16884, G__16885) : self__.dispatch_fn.call(null, G__16871, G__16872, G__16873, G__16874, G__16875, G__16876, G__16877, G__16878, G__16879, G__16880, G__16881, G__16882, G__16883, G__16884, G__16885);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16886 = a;
  var G__16887 = b;
  var G__16888 = c;
  var G__16889 = d;
  var G__16890 = e;
  var G__16891 = f;
  var G__16892 = g;
  var G__16893 = h;
  var G__16894 = i;
  var G__16895 = j;
  var G__16896 = k;
  var G__16897 = l;
  var G__16898 = m;
  var G__16899 = n;
  var G__16900 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__16886, G__16887, G__16888, G__16889, G__16890, G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897, G__16898, G__16899, G__16900) : target_fn.call(null, G__16886, G__16887, G__16888, G__16889, G__16890, G__16891, G__16892, G__16893, G__16894, G__16895, G__16896, G__16897, G__16898, G__16899, G__16900);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16901 = a;
    var G__16902 = b;
    var G__16903 = c;
    var G__16904 = d;
    var G__16905 = e;
    var G__16906 = f;
    var G__16907 = g;
    var G__16908 = h;
    var G__16909 = i;
    var G__16910 = j;
    var G__16911 = k;
    var G__16912 = l;
    var G__16913 = m;
    var G__16914 = n;
    var G__16915 = o;
    var G__16916 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__16901, G__16902, G__16903, G__16904, G__16905, G__16906, G__16907, G__16908, G__16909, G__16910, G__16911, G__16912, G__16913, G__16914, G__16915, G__16916) : self__.dispatch_fn.call(null, G__16901, G__16902, G__16903, G__16904, G__16905, G__16906, G__16907, G__16908, G__16909, G__16910, G__16911, G__16912, G__16913, G__16914, G__16915, G__16916);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16917 = a;
  var G__16918 = b;
  var G__16919 = c;
  var G__16920 = d;
  var G__16921 = e;
  var G__16922 = f;
  var G__16923 = g;
  var G__16924 = h;
  var G__16925 = i;
  var G__16926 = j;
  var G__16927 = k;
  var G__16928 = l;
  var G__16929 = m;
  var G__16930 = n;
  var G__16931 = o;
  var G__16932 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__16917, G__16918, G__16919, G__16920, G__16921, G__16922, G__16923, G__16924, G__16925, G__16926, G__16927, G__16928, G__16929, G__16930, G__16931, G__16932) : target_fn.call(null, G__16917, G__16918, G__16919, G__16920, G__16921, G__16922, G__16923, G__16924, G__16925, G__16926, G__16927, G__16928, G__16929, G__16930, G__16931, G__16932);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16933 = a;
    var G__16934 = b;
    var G__16935 = c;
    var G__16936 = d;
    var G__16937 = e;
    var G__16938 = f;
    var G__16939 = g;
    var G__16940 = h;
    var G__16941 = i;
    var G__16942 = j;
    var G__16943 = k;
    var G__16944 = l;
    var G__16945 = m;
    var G__16946 = n;
    var G__16947 = o;
    var G__16948 = p;
    var G__16949 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__16933, G__16934, G__16935, G__16936, G__16937, G__16938, G__16939, G__16940, G__16941, G__16942, G__16943, G__16944, G__16945, G__16946, G__16947, G__16948, G__16949) : self__.dispatch_fn.call(null, G__16933, G__16934, G__16935, G__16936, G__16937, G__16938, G__16939, G__16940, G__16941, G__16942, G__16943, G__16944, G__16945, G__16946, G__16947, G__16948, G__16949);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16950 = a;
  var G__16951 = b;
  var G__16952 = c;
  var G__16953 = d;
  var G__16954 = e;
  var G__16955 = f;
  var G__16956 = g;
  var G__16957 = h;
  var G__16958 = i;
  var G__16959 = j;
  var G__16960 = k;
  var G__16961 = l;
  var G__16962 = m;
  var G__16963 = n;
  var G__16964 = o;
  var G__16965 = p;
  var G__16966 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__16950, G__16951, G__16952, G__16953, G__16954, G__16955, G__16956, G__16957, G__16958, G__16959, G__16960, G__16961, G__16962, G__16963, G__16964, G__16965, G__16966) : target_fn.call(null, G__16950, G__16951, G__16952, G__16953, G__16954, G__16955, G__16956, G__16957, G__16958, G__16959, G__16960, G__16961, G__16962, G__16963, G__16964, G__16965, G__16966);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__16967 = a;
    var G__16968 = b;
    var G__16969 = c;
    var G__16970 = d;
    var G__16971 = e;
    var G__16972 = f;
    var G__16973 = g;
    var G__16974 = h;
    var G__16975 = i;
    var G__16976 = j;
    var G__16977 = k;
    var G__16978 = l;
    var G__16979 = m;
    var G__16980 = n;
    var G__16981 = o;
    var G__16982 = p;
    var G__16983 = q;
    var G__16984 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__16967, G__16968, G__16969, G__16970, G__16971, G__16972, G__16973, G__16974, G__16975, G__16976, G__16977, G__16978, G__16979, G__16980, G__16981, G__16982, G__16983, G__16984) : self__.dispatch_fn.call(null, G__16967, G__16968, G__16969, G__16970, G__16971, G__16972, G__16973, G__16974, G__16975, G__16976, G__16977, G__16978, G__16979, G__16980, G__16981, G__16982, G__16983, G__16984);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__16985 = a;
  var G__16986 = b;
  var G__16987 = c;
  var G__16988 = d;
  var G__16989 = e;
  var G__16990 = f;
  var G__16991 = g;
  var G__16992 = h;
  var G__16993 = i;
  var G__16994 = j;
  var G__16995 = k;
  var G__16996 = l;
  var G__16997 = m;
  var G__16998 = n;
  var G__16999 = o;
  var G__17000 = p;
  var G__17001 = q;
  var G__17002 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__16985, G__16986, G__16987, G__16988, G__16989, G__16990, G__16991, G__16992, G__16993, G__16994, G__16995, G__16996, G__16997, G__16998, G__16999, G__17000, G__17001, G__17002) : target_fn.call(null, G__16985, G__16986, G__16987, G__16988, G__16989, G__16990, G__16991, G__16992, G__16993, G__16994, G__16995, G__16996, G__16997, G__16998, G__16999, G__17000, G__17001, G__17002);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17003 = a;
    var G__17004 = b;
    var G__17005 = c;
    var G__17006 = d;
    var G__17007 = e;
    var G__17008 = f;
    var G__17009 = g;
    var G__17010 = h;
    var G__17011 = i;
    var G__17012 = j;
    var G__17013 = k;
    var G__17014 = l;
    var G__17015 = m;
    var G__17016 = n;
    var G__17017 = o;
    var G__17018 = p;
    var G__17019 = q;
    var G__17020 = r;
    var G__17021 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__17003, G__17004, G__17005, G__17006, G__17007, G__17008, G__17009, G__17010, G__17011, G__17012, G__17013, G__17014, G__17015, G__17016, G__17017, G__17018, G__17019, G__17020, G__17021) : self__.dispatch_fn.call(null, G__17003, G__17004, G__17005, G__17006, G__17007, G__17008, G__17009, G__17010, G__17011, G__17012, G__17013, G__17014, G__17015, G__17016, G__17017, G__17018, G__17019, 
    G__17020, G__17021);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17022 = a;
  var G__17023 = b;
  var G__17024 = c;
  var G__17025 = d;
  var G__17026 = e;
  var G__17027 = f;
  var G__17028 = g;
  var G__17029 = h;
  var G__17030 = i;
  var G__17031 = j;
  var G__17032 = k;
  var G__17033 = l;
  var G__17034 = m;
  var G__17035 = n;
  var G__17036 = o;
  var G__17037 = p;
  var G__17038 = q;
  var G__17039 = r;
  var G__17040 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__17022, G__17023, G__17024, G__17025, G__17026, G__17027, G__17028, G__17029, G__17030, G__17031, G__17032, G__17033, G__17034, G__17035, G__17036, G__17037, G__17038, G__17039, G__17040) : target_fn.call(null, G__17022, G__17023, G__17024, G__17025, G__17026, G__17027, G__17028, G__17029, G__17030, G__17031, G__17032, G__17033, G__17034, G__17035, G__17036, G__17037, G__17038, G__17039, G__17040);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17041 = a;
    var G__17042 = b;
    var G__17043 = c;
    var G__17044 = d;
    var G__17045 = e;
    var G__17046 = f;
    var G__17047 = g;
    var G__17048 = h;
    var G__17049 = i;
    var G__17050 = j;
    var G__17051 = k;
    var G__17052 = l;
    var G__17053 = m;
    var G__17054 = n;
    var G__17055 = o;
    var G__17056 = p;
    var G__17057 = q;
    var G__17058 = r;
    var G__17059 = s;
    var G__17060 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__17041, G__17042, G__17043, G__17044, G__17045, G__17046, G__17047, G__17048, G__17049, G__17050, G__17051, G__17052, G__17053, G__17054, G__17055, G__17056, G__17057, G__17058, G__17059, G__17060) : self__.dispatch_fn.call(null, G__17041, G__17042, G__17043, G__17044, G__17045, G__17046, G__17047, G__17048, G__17049, G__17050, G__17051, G__17052, G__17053, G__17054, G__17055, G__17056, 
    G__17057, G__17058, G__17059, G__17060);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17061 = a;
  var G__17062 = b;
  var G__17063 = c;
  var G__17064 = d;
  var G__17065 = e;
  var G__17066 = f;
  var G__17067 = g;
  var G__17068 = h;
  var G__17069 = i;
  var G__17070 = j;
  var G__17071 = k;
  var G__17072 = l;
  var G__17073 = m;
  var G__17074 = n;
  var G__17075 = o;
  var G__17076 = p;
  var G__17077 = q;
  var G__17078 = r;
  var G__17079 = s;
  var G__17080 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__17061, G__17062, G__17063, G__17064, G__17065, G__17066, G__17067, G__17068, G__17069, G__17070, G__17071, G__17072, G__17073, G__17074, G__17075, G__17076, G__17077, G__17078, G__17079, G__17080) : target_fn.call(null, G__17061, G__17062, G__17063, G__17064, G__17065, G__17066, G__17067, G__17068, G__17069, G__17070, G__17071, G__17072, G__17073, G__17074, G__17075, G__17076, G__17077, G__17078, G__17079, 
  G__17080);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__17082 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__17082);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write(writer__4813__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.pr_writer_ex_info = function pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, data) {
    return ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var ex_info__3 = function(msg, data, cause) {
    cljs.core.ExceptionInfo.prototype = function() {
      var G__17087 = msg;
      return Error(G__17087);
    }();
    cljs.core.ExceptionInfo.prototype.name = "ExceptionInfo";
    cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
    cljs.core.ExceptionInfo.prototype.toString = cljs.core.pr_str_STAR_;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
      var obj__$1 = this;
      return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
    };
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, data);
      case 3:
        return ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__17092 = x;
      var G__17093 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__17092, G__17093) : pred.call(null, G__17092, G__17093);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__17094 = y;
        var G__17095 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__17094, G__17095) : pred.call(null, G__17094, G__17095);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("prone.ui.utils");
goog.require("cljs.core");
prone.ui.utils.action = function action(f) {
  return function(e) {
    e.preventDefault();
    return f.call(null);
  };
};
prone.ui.utils.update_in_STAR_ = function update_in_STAR_(m, path, f) {
  if (cljs.core.vector_QMARK_.call(null, cljs.core.last.call(null, path))) {
    var nested_path = cljs.core.last.call(null, path);
    var this_path = cljs.core.drop_last.call(null, path);
    if (cljs.core.empty_QMARK_.call(null, nested_path)) {
      return cljs.core.update_in.call(null, m, this_path, cljs.core.partial.call(null, cljs.core.map, f));
    } else {
      return cljs.core.update_in.call(null, m, this_path, cljs.core.partial.call(null, cljs.core.map, function(nested_path, this_path) {
        return function(p1__10960_SHARP_) {
          return update_in_STAR_.call(null, p1__10960_SHARP_, nested_path, f);
        };
      }(nested_path, this_path)));
    }
  } else {
    return cljs.core.update_in.call(null, m, path, f);
  }
};
prone.ui.utils.get_in_STAR_ = function get_in_STAR_(data, path) {
  var data__$1 = data;
  var path__$1 = path;
  while (true) {
    if (cljs.core.seq.call(null, path__$1)) {
      var G__10961 = cljs.core.list_QMARK_.call(null, data__$1) && typeof cljs.core.first.call(null, path__$1) === "number" ? cljs.core.nth.call(null, data__$1, cljs.core.first.call(null, path__$1)) : cljs.core.get.call(null, data__$1, cljs.core.first.call(null, path__$1));
      var G__10962 = cljs.core.rest.call(null, path__$1);
      data__$1 = G__10961;
      path__$1 = G__10962;
      continue;
    } else {
      return data__$1;
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj20261 = {};
  return obj20261;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4213__auto__ = port;
    if (and__4213__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4869__auto__ = port == null ? null : port;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj20263 = {};
  return obj20263;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4213__auto__ = port;
    if (and__4213__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4869__auto__ = port == null ? null : port;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj20265 = {};
  return obj20265;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__4213__auto__ = chan;
    if (and__4213__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4869__auto__ = chan == null ? null : chan;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__4213__auto__ = chan;
    if (and__4213__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4869__auto__ = chan == null ? null : chan;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj20267 = {};
  return obj20267;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__4213__auto__ = h;
    if (and__4213__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4869__auto__ = h == null ? null : h;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__4213__auto__ = h;
    if (and__4213__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4869__auto__ = h == null ? null : h;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj20269 = {};
  return obj20269;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__4213__auto__ = b;
    if (and__4213__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4869__auto__ = b == null ? null : b;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__4213__auto__ = b;
    if (and__4213__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4869__auto__ = b == null ? null : b;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4213__auto__ = b;
    if (and__4213__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4869__auto__ = b == null ? null : b;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var add_BANG_ = null;
  var add_BANG___1 = function(b) {
    return b;
  };
  var add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return add_BANG___1.call(this, b);
      case 2:
        return add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_BANG_.cljs$core$IFn$_invoke$arity$1 = add_BANG___1;
  add_BANG_.cljs$core$IFn$_invoke$arity$2 = add_BANG___2;
  return add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj20271 = {};
  return obj20271;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__20274 = cnt + 1;
      cnt = G__20274;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5112__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5112__auto__) {
      var v_20275 = this$.pop();
      if (keep_QMARK_.call(null, v_20275)) {
        this$.unshift(v_20275);
      } else {
      }
      var G__20276 = x + 1;
      x = G__20276;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_20279 = 0;
  while (true) {
    var m_20280 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_20280 == null) {
    } else {
      m_20280.call(null);
      if (count_20279 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__20281 = count_20279 + 1;
        count_20279 = G__20281;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4213__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4213__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4213__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t20287 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t20287 = function(val, box, meta20288) {
      this.val = val;
      this.box = box;
      this.meta20288 = meta20288;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t20287.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t20287.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20289) {
      var self__ = this;
      var _20289__$1 = this;
      return self__.meta20288;
    };
    cljs.core.async.impl.channels.t20287.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20289, meta20288__$1) {
      var self__ = this;
      var _20289__$1 = this;
      return new cljs.core.async.impl.channels.t20287(self__.val, self__.box, meta20288__$1);
    };
    cljs.core.async.impl.channels.t20287.cljs$lang$type = true;
    cljs.core.async.impl.channels.t20287.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t20287";
    cljs.core.async.impl.channels.t20287.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.channels/t20287");
    };
    cljs.core.async.impl.channels.__GT_t20287 = function __GT_t20287(val__$1, box__$1, meta20288) {
      return new cljs.core.async.impl.channels.t20287(val__$1, box__$1, meta20288);
    };
  }
  return new cljs.core.async.impl.channels.t20287(val, box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj20291 = {};
  return obj20291;
}();
cljs.core.async.impl.channels.abort = function abort(this$) {
  if (function() {
    var and__4213__auto__ = this$;
    if (and__4213__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4869__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4225__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = self__.buf;
      if (cljs.core.truth_(and__4213__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4213__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_20292 = self__.takes.pop();
      if (taker_20292 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_20292)) {
          var take_cb_20293 = cljs.core.async.impl.protocols.commit.call(null, taker_20292);
          var val_20294 = cljs.core.truth_(function() {
            var and__4213__auto__ = self__.buf;
            if (cljs.core.truth_(and__4213__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4213__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_20293, val_20294, taker_20292, this$__$1) {
            return function() {
              return take_cb_20293.call(null, val_20294);
            };
          }(take_cb_20293, val_20294, taker_20292, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_20295 = self__.puts.pop();
          if (putter_20295 == null) {
          } else {
            var put_handler_20296 = putter_20295.handler;
            var val_20297 = putter_20295.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_20296)) {
              var put_cb_20298 = cljs.core.async.impl.protocols.commit.call(null, put_handler_20296);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_20298, put_handler_20296, val_20297, putter_20295, _, retval, this$__$1) {
                return function() {
                  return put_cb_20298.call(null, true);
                };
              }(put_cb_20298, put_handler_20296, val_20297, putter_20295, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_20297))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4213__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4213__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4213__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4213__auto__ = self__.buf;
              if (cljs.core.truth_(and__4213__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4213__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = self__.buf;
      if (cljs.core.truth_(and__4213__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4213__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_20299 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_20299)) {
            var take_cb_20300 = cljs.core.async.impl.protocols.commit.call(null, taker_20299);
            var val_20301__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_20300, val_20301__$1, taker_20299, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_20300.call(null, val_20301__$1);
              };
            }(take_cb_20300, val_20301__$1, taker_20299, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_20302 = self__.puts.pop();
    if (putter_20302 == null) {
    } else {
      var put_handler_20303 = putter_20302.handler;
      var val_20304 = putter_20302.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_20303)) {
        var put_cb_20305 = cljs.core.async.impl.protocols.commit.call(null, put_handler_20303);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_20305, put_handler_20303, val_20304, putter_20302, this$__$1) {
          return function() {
            return put_cb_20305.call(null, true);
          };
        }(put_cb_20305, put_handler_20303, val_20304, putter_20302, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function handle(buf, exh, t) {
  var else$ = function() {
    var or__4225__auto__ = exh;
    if (cljs.core.truth_(or__4225__auto__)) {
      return or__4225__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var chan = null;
  var chan__1 = function(buf) {
    return chan.call(null, buf, null);
  };
  var chan__2 = function(buf, xform) {
    return chan.call(null, buf, xform, null);
  };
  var chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__20310 = null;
          var G__20310__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e20308) {
              var t = e20308;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__20310__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e20309) {
              var t = e20309;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__20310 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__20310__1.call(this, buf__$1);
              case 2:
                return G__20310__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__20310.cljs$core$IFn$_invoke$arity$1 = G__20310__1;
          G__20310.cljs$core$IFn$_invoke$arity$2 = G__20310__2;
          return G__20310;
        }();
      }(add_BANG_);
    }());
  };
  chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return chan__1.call(this, buf);
      case 2:
        return chan__2.call(this, buf, xform);
      case 3:
        return chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t20219 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t20219 = function(f, fn_handler, meta20220) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta20220 = meta20220;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t20219.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t20219.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t20219.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t20219.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20221) {
      var self__ = this;
      var _20221__$1 = this;
      return self__.meta20220;
    };
    cljs.core.async.impl.ioc_helpers.t20219.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20221, meta20220__$1) {
      var self__ = this;
      var _20221__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t20219(self__.f, self__.fn_handler, meta20220__$1);
    };
    cljs.core.async.impl.ioc_helpers.t20219.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t20219.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t20219";
    cljs.core.async.impl.ioc_helpers.t20219.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.ioc-helpers/t20219");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t20219 = function __GT_t20219(f__$1, fn_handler__$1, meta20220) {
      return new cljs.core.async.impl.ioc_helpers.t20219(f__$1, fn_handler__$1, meta20220);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t20219(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e20223) {
    if (e20223 instanceof Object) {
      var ex = e20223;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e20223;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_20226_20228 = state;
    statearr_20226_20228[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_20226_20228[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_20227_20229 = state;
    statearr_20227_20229[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_20227_20229[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_20232_20234 = state;
    statearr_20232_20234[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_20232_20234[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_20233_20235 = state;
    statearr_20233_20235[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_20233_20235[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4828__auto__, k__4829__auto__) {
  var self__ = this;
  var this__4828__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4828__auto____$1, k__4829__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4830__auto__, k20237, else__4831__auto__) {
  var self__ = this;
  var this__4830__auto____$1 = this;
  var G__20239 = k20237 instanceof cljs.core.Keyword ? k20237.fqn : null;
  switch(G__20239) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k20237, else__4831__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4842__auto__, writer__4843__auto__, opts__4844__auto__) {
  var self__ = this;
  var this__4842__auto____$1 = this;
  var pr_pair__4845__auto__ = function(this__4842__auto____$1) {
    return function(keyval__4846__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4843__auto__, cljs.core.pr_writer, "", " ", "", opts__4844__auto__, keyval__4846__auto__);
    };
  }(this__4842__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4843__auto__, pr_pair__4845__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4844__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4826__auto__) {
  var self__ = this;
  var this__4826__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4822__auto__) {
  var self__ = this;
  var this__4822__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4832__auto__) {
  var self__ = this;
  var this__4832__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4823__auto__) {
  var self__ = this;
  var this__4823__auto____$1 = this;
  var h__4646__auto__ = self__.__hash;
  if (!(h__4646__auto__ == null)) {
    return h__4646__auto__;
  } else {
    var h__4646__auto____$1 = cljs.core.hash_imap.call(null, this__4823__auto____$1);
    self__.__hash = h__4646__auto____$1;
    return h__4646__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4824__auto__, other__4825__auto__) {
  var self__ = this;
  var this__4824__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4213__auto__ = other__4825__auto__;
    if (cljs.core.truth_(and__4213__auto__)) {
      return this__4824__auto____$1.constructor === other__4825__auto__.constructor && cljs.core.equiv_map.call(null, this__4824__auto____$1, other__4825__auto__);
    } else {
      return and__4213__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4837__auto__, k__4838__auto__) {
  var self__ = this;
  var this__4837__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4838__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4837__auto____$1), self__.__meta), k__4838__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4838__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4835__auto__, k__4836__auto__, G__20236) {
  var self__ = this;
  var this__4835__auto____$1 = this;
  var pred__20240 = cljs.core.keyword_identical_QMARK_;
  var expr__20241 = k__4836__auto__;
  if (cljs.core.truth_(pred__20240.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__20241))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__20236, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__20240.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__20241))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__20236, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__20240.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__20241))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__20236, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__20240.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__20241))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__20236, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__20240.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__20241))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__20236, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4836__auto__, G__20236), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4840__auto__) {
  var self__ = this;
  var this__4840__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4827__auto__, G__20236) {
  var self__ = this;
  var this__4827__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__20236, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4833__auto__, entry__4834__auto__) {
  var self__ = this;
  var this__4833__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4834__auto__)) {
    return cljs.core._assoc.call(null, this__4833__auto____$1, cljs.core._nth.call(null, entry__4834__auto__, 0), cljs.core._nth.call(null, entry__4834__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4833__auto____$1, entry__4834__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4862__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4862__auto__, writer__4863__auto__) {
  return cljs.core._write.call(null, writer__4863__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__20238) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__20238), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__20238), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__20238), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__20238), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__20238), null, cljs.core.dissoc.call(null, G__20238, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_20245 = state;
  statearr_20245[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_20245;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4213__auto__ = exception;
      if (cljs.core.truth_(and__4213__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4213__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4213__auto__ = exception;
        if (cljs.core.truth_(and__4213__auto__)) {
          var and__4213__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4213__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4213__auto____$1;
          }
        } else {
          return and__4213__auto__;
        }
      }())) {
        var statearr_20251 = state;
        statearr_20251[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_20251[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_20251[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_20251[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_20251;
      } else {
        if (cljs.core.truth_(function() {
          var and__4213__auto__ = exception;
          if (cljs.core.truth_(and__4213__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4213__auto__;
          }
        }())) {
          var statearr_20252_20256 = state;
          statearr_20252_20256[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__20257 = state;
          state = G__20257;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4213__auto__ = exception;
            if (cljs.core.truth_(and__4213__auto__)) {
              var and__4213__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4213__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4213__auto____$1;
              }
            } else {
              return and__4213__auto__;
            }
          }())) {
            var statearr_20253 = state;
            statearr_20253[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_20253[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_20253;
          } else {
            if (cljs.core.truth_(function() {
              var and__4213__auto__ = cljs.core.not.call(null, exception);
              if (and__4213__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4213__auto__;
              }
            }())) {
              var statearr_20254 = state;
              statearr_20254[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_20254[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_20254;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_20255 = state;
                statearr_20255[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_20255[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_20255;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__20190 = level + 1;
        level = G__20190;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_20191 = 0;
    while (true) {
      if (i_20191 < arr.length) {
        arr[i_20191] = null;
        var G__20192 = i_20191 + 1;
        i_20191 = G__20192;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__20193 = x_SINGLEQUOTE_;
                x__$1 = G__20193;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__20194 = x__$1;
        var G__20195 = k;
        var G__20196 = level - 1;
        var G__20197 = update;
        x = G__20194;
        k = G__20195;
        level = G__20196;
        update = G__20197;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_20198 = self__.level + 1;
      while (true) {
        if (i_20198 <= new_level + 1) {
          update[i_20198] = self__.header;
          var G__20199 = i_20198 + 1;
          i_20198 = G__20199;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_20200 = 0;
    while (true) {
      if (i_20200 <= self__.level) {
        var links_20201 = update[i_20200].forward;
        if (links_20201[i_20200] === x__$1) {
          links_20201[i_20200] = x__$1.forward[i_20200];
          var G__20202 = i_20200 + 1;
          i_20200 = G__20202;
          continue;
        } else {
          var G__20203 = i_20200 + 1;
          i_20200 = G__20203;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__20204 = x_SINGLEQUOTE_;
              x__$1 = G__20204;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__20205 = nx;
        var G__20206 = level__$1 - 1;
        x = G__20205;
        level__$1 = G__20206;
        continue;
      } else {
        var G__20207 = x;
        var G__20208 = level__$1 - 1;
        x = G__20207;
        level__$1 = G__20208;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__20209 = x_SINGLEQUOTE_;
              x__$1 = G__20209;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__20210 = nx;
        var G__20211 = level__$1 - 1;
        x = G__20210;
        level__$1 = G__20211;
        continue;
      } else {
        var G__20212 = x;
        var G__20213 = level__$1 - 1;
        x = G__20212;
        level__$1 = G__20213;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4225__auto__ = cljs.core.truth_(function() {
    var and__4213__auto__ = me;
    if (cljs.core.truth_(and__4213__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4213__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4225__auto__)) {
    return or__4225__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4225__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4225__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t17101 !== "undefined") {
  } else {
    cljs.core.async.t17101 = function(f, fn_handler, meta17102) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta17102 = meta17102;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17101.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17101.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t17101.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t17101.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17103) {
      var self__ = this;
      var _17103__$1 = this;
      return self__.meta17102;
    };
    cljs.core.async.t17101.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17103, meta17102__$1) {
      var self__ = this;
      var _17103__$1 = this;
      return new cljs.core.async.t17101(self__.f, self__.fn_handler, meta17102__$1);
    };
    cljs.core.async.t17101.cljs$lang$type = true;
    cljs.core.async.t17101.cljs$lang$ctorStr = "cljs.core.async/t17101";
    cljs.core.async.t17101.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t17101");
    };
    cljs.core.async.__GT_t17101 = function __GT_t17101(f__$1, fn_handler__$1, meta17102) {
      return new cljs.core.async.t17101(f__$1, fn_handler__$1, meta17102);
    };
  }
  return new cljs.core.async.t17101(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__17105 = buff;
  if (G__17105) {
    var bit__4906__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4225__auto__ = bit__4906__auto__;
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return G__17105.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__17105.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__17105);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__17105);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    return chan.call(null, buf_or_n, null, null);
  };
  var chan__2 = function(buf_or_n, xform) {
    return chan.call(null, buf_or_n, xform, null);
  };
  var chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
      case 2:
        return chan__2.call(this, buf_or_n, xform);
      case 3:
        return chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_17106 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_17106);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_17106, ret) {
          return function() {
            return fn1.call(null, val_17106);
          };
        }(val_17106, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__5112__auto___17107 = n;
  var x_17108 = 0;
  while (true) {
    if (x_17108 < n__5112__auto___17107) {
      a[x_17108] = 0;
      var G__17109 = x_17108 + 1;
      x_17108 = G__17109;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__17110 = i + 1;
      i = G__17110;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t17114 !== "undefined") {
  } else {
    cljs.core.async.t17114 = function(flag, alt_flag, meta17115) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta17115 = meta17115;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17114.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17114.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t17114.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t17114.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_17116) {
        var self__ = this;
        var _17116__$1 = this;
        return self__.meta17115;
      };
    }(flag);
    cljs.core.async.t17114.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_17116, meta17115__$1) {
        var self__ = this;
        var _17116__$1 = this;
        return new cljs.core.async.t17114(self__.flag, self__.alt_flag, meta17115__$1);
      };
    }(flag);
    cljs.core.async.t17114.cljs$lang$type = true;
    cljs.core.async.t17114.cljs$lang$ctorStr = "cljs.core.async/t17114";
    cljs.core.async.t17114.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
        return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t17114");
      };
    }(flag);
    cljs.core.async.__GT_t17114 = function(flag) {
      return function __GT_t17114(flag__$1, alt_flag__$1, meta17115) {
        return new cljs.core.async.t17114(flag__$1, alt_flag__$1, meta17115);
      };
    }(flag);
  }
  return new cljs.core.async.t17114(flag, alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t17120 !== "undefined") {
  } else {
    cljs.core.async.t17120 = function(cb, flag, alt_handler, meta17121) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta17121 = meta17121;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t17120.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t17120.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t17120.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t17120.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17122) {
      var self__ = this;
      var _17122__$1 = this;
      return self__.meta17121;
    };
    cljs.core.async.t17120.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17122, meta17121__$1) {
      var self__ = this;
      var _17122__$1 = this;
      return new cljs.core.async.t17120(self__.cb, self__.flag, self__.alt_handler, meta17121__$1);
    };
    cljs.core.async.t17120.cljs$lang$type = true;
    cljs.core.async.t17120.cljs$lang$ctorStr = "cljs.core.async/t17120";
    cljs.core.async.t17120.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t17120");
    };
    cljs.core.async.__GT_t17120 = function __GT_t17120(cb__$1, flag__$1, alt_handler__$1, meta17121) {
      return new cljs.core.async.t17120(cb__$1, flag__$1, alt_handler__$1, meta17121);
    };
  }
  return new cljs.core.async.t17120(cb, flag, alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__17123_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17123_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__17124_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17124_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4225__auto__ = wport;
            if (cljs.core.truth_(or__4225__auto__)) {
              return or__4225__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__17125 = i + 1;
          i = G__17125;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4225__auto__ = ret;
  if (cljs.core.truth_(or__4225__auto__)) {
    return or__4225__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__4213__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4213__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4213__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__17126) {
    var map__17128 = p__17126;
    var map__17128__$1 = cljs.core.seq_QMARK_.call(null, map__17128) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17128) : map__17128;
    var opts = map__17128__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__17126 = null;
    if (arguments.length > 1) {
      var G__17129__i = 0, G__17129__a = new Array(arguments.length - 1);
      while (G__17129__i < G__17129__a.length) {
        G__17129__a[G__17129__i] = arguments[G__17129__i + 1];
        ++G__17129__i;
      }
      p__17126 = new cljs.core.IndexedSeq(G__17129__a, 0);
    }
    return alts_BANG___delegate.call(this, ports, p__17126);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__17130) {
    var ports = cljs.core.first(arglist__17130);
    var p__17126 = cljs.core.rest(arglist__17130);
    return alts_BANG___delegate(ports, p__17126);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__8013__auto___17225 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___17225) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___17225) {
            return function(state_17201) {
              var state_val_17202 = state_17201[1];
              if (state_val_17202 === 7) {
                var inst_17197 = state_17201[2];
                var state_17201__$1 = state_17201;
                var statearr_17203_17226 = state_17201__$1;
                statearr_17203_17226[2] = inst_17197;
                statearr_17203_17226[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17202 === 1) {
                  var state_17201__$1 = state_17201;
                  var statearr_17204_17227 = state_17201__$1;
                  statearr_17204_17227[2] = null;
                  statearr_17204_17227[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17202 === 4) {
                    var inst_17180 = state_17201[7];
                    var inst_17180__$1 = state_17201[2];
                    var inst_17181 = inst_17180__$1 == null;
                    var state_17201__$1 = function() {
                      var statearr_17205 = state_17201;
                      statearr_17205[7] = inst_17180__$1;
                      return statearr_17205;
                    }();
                    if (cljs.core.truth_(inst_17181)) {
                      var statearr_17206_17228 = state_17201__$1;
                      statearr_17206_17228[1] = 5;
                    } else {
                      var statearr_17207_17229 = state_17201__$1;
                      statearr_17207_17229[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17202 === 13) {
                      var state_17201__$1 = state_17201;
                      var statearr_17208_17230 = state_17201__$1;
                      statearr_17208_17230[2] = null;
                      statearr_17208_17230[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17202 === 6) {
                        var inst_17180 = state_17201[7];
                        var state_17201__$1 = state_17201;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17201__$1, 11, to, inst_17180);
                      } else {
                        if (state_val_17202 === 3) {
                          var inst_17199 = state_17201[2];
                          var state_17201__$1 = state_17201;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17201__$1, inst_17199);
                        } else {
                          if (state_val_17202 === 12) {
                            var state_17201__$1 = state_17201;
                            var statearr_17209_17231 = state_17201__$1;
                            statearr_17209_17231[2] = null;
                            statearr_17209_17231[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17202 === 2) {
                              var state_17201__$1 = state_17201;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17201__$1, 4, from);
                            } else {
                              if (state_val_17202 === 11) {
                                var inst_17190 = state_17201[2];
                                var state_17201__$1 = state_17201;
                                if (cljs.core.truth_(inst_17190)) {
                                  var statearr_17210_17232 = state_17201__$1;
                                  statearr_17210_17232[1] = 12;
                                } else {
                                  var statearr_17211_17233 = state_17201__$1;
                                  statearr_17211_17233[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17202 === 9) {
                                  var state_17201__$1 = state_17201;
                                  var statearr_17212_17234 = state_17201__$1;
                                  statearr_17212_17234[2] = null;
                                  statearr_17212_17234[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17202 === 5) {
                                    var state_17201__$1 = state_17201;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_17213_17235 = state_17201__$1;
                                      statearr_17213_17235[1] = 8;
                                    } else {
                                      var statearr_17214_17236 = state_17201__$1;
                                      statearr_17214_17236[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17202 === 14) {
                                      var inst_17195 = state_17201[2];
                                      var state_17201__$1 = state_17201;
                                      var statearr_17215_17237 = state_17201__$1;
                                      statearr_17215_17237[2] = inst_17195;
                                      statearr_17215_17237[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17202 === 10) {
                                        var inst_17187 = state_17201[2];
                                        var state_17201__$1 = state_17201;
                                        var statearr_17216_17238 = state_17201__$1;
                                        statearr_17216_17238[2] = inst_17187;
                                        statearr_17216_17238[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17202 === 8) {
                                          var inst_17184 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_17201__$1 = state_17201;
                                          var statearr_17217_17239 = state_17201__$1;
                                          statearr_17217_17239[2] = inst_17184;
                                          statearr_17217_17239[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___17225);
          return function(switch__7957__auto__, c__8013__auto___17225) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_17221 = [null, null, null, null, null, null, null, null];
                statearr_17221[0] = state_machine__7958__auto__;
                statearr_17221[1] = 1;
                return statearr_17221;
              };
              var state_machine__7958__auto____1 = function(state_17201) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_17201);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e17222) {
                      if (e17222 instanceof Object) {
                        var ex__7961__auto__ = e17222;
                        var statearr_17223_17240 = state_17201;
                        statearr_17223_17240[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17201);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e17222;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17241 = state_17201;
                    state_17201 = G__17241;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_17201) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_17201);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___17225);
        }();
        var state__8015__auto__ = function() {
          var statearr_17224 = f__8014__auto__.call(null);
          statearr_17224[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___17225;
          return statearr_17224;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___17225));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.pipeline_STAR_ = function pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__17425) {
      var vec__17426 = p__17425;
      var v = cljs.core.nth.call(null, vec__17426, 0, null);
      var p = cljs.core.nth.call(null, vec__17426, 1, null);
      var job = vec__17426;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__8013__auto___17608 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___17608, res, vec__17426, v, p, job, jobs, results) {
          return function() {
            var f__8014__auto__ = function() {
              var switch__7957__auto__ = function(c__8013__auto___17608, res, vec__17426, v, p, job, jobs, results) {
                return function(state_17431) {
                  var state_val_17432 = state_17431[1];
                  if (state_val_17432 === 2) {
                    var inst_17428 = state_17431[2];
                    var inst_17429 = cljs.core.async.close_BANG_.call(null, res);
                    var state_17431__$1 = function() {
                      var statearr_17433 = state_17431;
                      statearr_17433[7] = inst_17428;
                      return statearr_17433;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17431__$1, inst_17429);
                  } else {
                    if (state_val_17432 === 1) {
                      var state_17431__$1 = state_17431;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17431__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__8013__auto___17608, res, vec__17426, v, p, job, jobs, results);
              return function(switch__7957__auto__, c__8013__auto___17608, res, vec__17426, v, p, job, jobs, results) {
                return function() {
                  var state_machine__7958__auto__ = null;
                  var state_machine__7958__auto____0 = function() {
                    var statearr_17437 = [null, null, null, null, null, null, null, null];
                    statearr_17437[0] = state_machine__7958__auto__;
                    statearr_17437[1] = 1;
                    return statearr_17437;
                  };
                  var state_machine__7958__auto____1 = function(state_17431) {
                    while (true) {
                      var ret_value__7959__auto__ = function() {
                        try {
                          while (true) {
                            var result__7960__auto__ = switch__7957__auto__.call(null, state_17431);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7960__auto__;
                            }
                            break;
                          }
                        } catch (e17438) {
                          if (e17438 instanceof Object) {
                            var ex__7961__auto__ = e17438;
                            var statearr_17439_17609 = state_17431;
                            statearr_17439_17609[5] = ex__7961__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17431);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e17438;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__17610 = state_17431;
                        state_17431 = G__17610;
                        continue;
                      } else {
                        return ret_value__7959__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__7958__auto__ = function(state_17431) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__7958__auto____0.call(this);
                      case 1:
                        return state_machine__7958__auto____1.call(this, state_17431);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
                  state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
                  return state_machine__7958__auto__;
                }();
              }(switch__7957__auto__, c__8013__auto___17608, res, vec__17426, v, p, job, jobs, results);
            }();
            var state__8015__auto__ = function() {
              var statearr_17440 = f__8014__auto__.call(null);
              statearr_17440[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___17608;
              return statearr_17440;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
          };
        }(c__8013__auto___17608, res, vec__17426, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__17441) {
      var vec__17442 = p__17441;
      var v = cljs.core.nth.call(null, vec__17442, 0, null);
      var p = cljs.core.nth.call(null, vec__17442, 1, null);
      var job = vec__17442;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5112__auto___17611 = n;
  var __17612 = 0;
  while (true) {
    if (__17612 < n__5112__auto___17611) {
      var G__17443_17613 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__17443_17613) {
        case "async":
          var c__8013__auto___17615 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__17612, c__8013__auto___17615, G__17443_17613, n__5112__auto___17611, jobs, results, process, async) {
            return function() {
              var f__8014__auto__ = function() {
                var switch__7957__auto__ = function(__17612, c__8013__auto___17615, G__17443_17613, n__5112__auto___17611, jobs, results, process, async) {
                  return function(state_17456) {
                    var state_val_17457 = state_17456[1];
                    if (state_val_17457 === 7) {
                      var inst_17452 = state_17456[2];
                      var state_17456__$1 = state_17456;
                      var statearr_17458_17616 = state_17456__$1;
                      statearr_17458_17616[2] = inst_17452;
                      statearr_17458_17616[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17457 === 6) {
                        var state_17456__$1 = state_17456;
                        var statearr_17459_17617 = state_17456__$1;
                        statearr_17459_17617[2] = null;
                        statearr_17459_17617[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17457 === 5) {
                          var state_17456__$1 = state_17456;
                          var statearr_17460_17618 = state_17456__$1;
                          statearr_17460_17618[2] = null;
                          statearr_17460_17618[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17457 === 4) {
                            var inst_17446 = state_17456[2];
                            var inst_17447 = async.call(null, inst_17446);
                            var state_17456__$1 = state_17456;
                            if (cljs.core.truth_(inst_17447)) {
                              var statearr_17461_17619 = state_17456__$1;
                              statearr_17461_17619[1] = 5;
                            } else {
                              var statearr_17462_17620 = state_17456__$1;
                              statearr_17462_17620[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17457 === 3) {
                              var inst_17454 = state_17456[2];
                              var state_17456__$1 = state_17456;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17456__$1, inst_17454);
                            } else {
                              if (state_val_17457 === 2) {
                                var state_17456__$1 = state_17456;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17456__$1, 4, jobs);
                              } else {
                                if (state_val_17457 === 1) {
                                  var state_17456__$1 = state_17456;
                                  var statearr_17463_17621 = state_17456__$1;
                                  statearr_17463_17621[2] = null;
                                  statearr_17463_17621[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__17612, c__8013__auto___17615, G__17443_17613, n__5112__auto___17611, jobs, results, process, async);
                return function(__17612, switch__7957__auto__, c__8013__auto___17615, G__17443_17613, n__5112__auto___17611, jobs, results, process, async) {
                  return function() {
                    var state_machine__7958__auto__ = null;
                    var state_machine__7958__auto____0 = function() {
                      var statearr_17467 = [null, null, null, null, null, null, null];
                      statearr_17467[0] = state_machine__7958__auto__;
                      statearr_17467[1] = 1;
                      return statearr_17467;
                    };
                    var state_machine__7958__auto____1 = function(state_17456) {
                      while (true) {
                        var ret_value__7959__auto__ = function() {
                          try {
                            while (true) {
                              var result__7960__auto__ = switch__7957__auto__.call(null, state_17456);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7960__auto__;
                              }
                              break;
                            }
                          } catch (e17468) {
                            if (e17468 instanceof Object) {
                              var ex__7961__auto__ = e17468;
                              var statearr_17469_17622 = state_17456;
                              statearr_17469_17622[5] = ex__7961__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17456);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e17468;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__17623 = state_17456;
                          state_17456 = G__17623;
                          continue;
                        } else {
                          return ret_value__7959__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__7958__auto__ = function(state_17456) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__7958__auto____0.call(this);
                        case 1:
                          return state_machine__7958__auto____1.call(this, state_17456);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
                    state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
                    return state_machine__7958__auto__;
                  }();
                }(__17612, switch__7957__auto__, c__8013__auto___17615, G__17443_17613, n__5112__auto___17611, jobs, results, process, async);
              }();
              var state__8015__auto__ = function() {
                var statearr_17470 = f__8014__auto__.call(null);
                statearr_17470[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___17615;
                return statearr_17470;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
            };
          }(__17612, c__8013__auto___17615, G__17443_17613, n__5112__auto___17611, jobs, results, process, async));
          break;
        case "compute":
          var c__8013__auto___17624 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__17612, c__8013__auto___17624, G__17443_17613, n__5112__auto___17611, jobs, results, process, async) {
            return function() {
              var f__8014__auto__ = function() {
                var switch__7957__auto__ = function(__17612, c__8013__auto___17624, G__17443_17613, n__5112__auto___17611, jobs, results, process, async) {
                  return function(state_17483) {
                    var state_val_17484 = state_17483[1];
                    if (state_val_17484 === 7) {
                      var inst_17479 = state_17483[2];
                      var state_17483__$1 = state_17483;
                      var statearr_17485_17625 = state_17483__$1;
                      statearr_17485_17625[2] = inst_17479;
                      statearr_17485_17625[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17484 === 6) {
                        var state_17483__$1 = state_17483;
                        var statearr_17486_17626 = state_17483__$1;
                        statearr_17486_17626[2] = null;
                        statearr_17486_17626[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17484 === 5) {
                          var state_17483__$1 = state_17483;
                          var statearr_17487_17627 = state_17483__$1;
                          statearr_17487_17627[2] = null;
                          statearr_17487_17627[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17484 === 4) {
                            var inst_17473 = state_17483[2];
                            var inst_17474 = process.call(null, inst_17473);
                            var state_17483__$1 = state_17483;
                            if (cljs.core.truth_(inst_17474)) {
                              var statearr_17488_17628 = state_17483__$1;
                              statearr_17488_17628[1] = 5;
                            } else {
                              var statearr_17489_17629 = state_17483__$1;
                              statearr_17489_17629[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17484 === 3) {
                              var inst_17481 = state_17483[2];
                              var state_17483__$1 = state_17483;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17483__$1, inst_17481);
                            } else {
                              if (state_val_17484 === 2) {
                                var state_17483__$1 = state_17483;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17483__$1, 4, jobs);
                              } else {
                                if (state_val_17484 === 1) {
                                  var state_17483__$1 = state_17483;
                                  var statearr_17490_17630 = state_17483__$1;
                                  statearr_17490_17630[2] = null;
                                  statearr_17490_17630[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__17612, c__8013__auto___17624, G__17443_17613, n__5112__auto___17611, jobs, results, process, async);
                return function(__17612, switch__7957__auto__, c__8013__auto___17624, G__17443_17613, n__5112__auto___17611, jobs, results, process, async) {
                  return function() {
                    var state_machine__7958__auto__ = null;
                    var state_machine__7958__auto____0 = function() {
                      var statearr_17494 = [null, null, null, null, null, null, null];
                      statearr_17494[0] = state_machine__7958__auto__;
                      statearr_17494[1] = 1;
                      return statearr_17494;
                    };
                    var state_machine__7958__auto____1 = function(state_17483) {
                      while (true) {
                        var ret_value__7959__auto__ = function() {
                          try {
                            while (true) {
                              var result__7960__auto__ = switch__7957__auto__.call(null, state_17483);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7960__auto__;
                              }
                              break;
                            }
                          } catch (e17495) {
                            if (e17495 instanceof Object) {
                              var ex__7961__auto__ = e17495;
                              var statearr_17496_17631 = state_17483;
                              statearr_17496_17631[5] = ex__7961__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17483);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e17495;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__17632 = state_17483;
                          state_17483 = G__17632;
                          continue;
                        } else {
                          return ret_value__7959__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__7958__auto__ = function(state_17483) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__7958__auto____0.call(this);
                        case 1:
                          return state_machine__7958__auto____1.call(this, state_17483);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
                    state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
                    return state_machine__7958__auto__;
                  }();
                }(__17612, switch__7957__auto__, c__8013__auto___17624, G__17443_17613, n__5112__auto___17611, jobs, results, process, async);
              }();
              var state__8015__auto__ = function() {
                var statearr_17497 = f__8014__auto__.call(null);
                statearr_17497[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___17624;
                return statearr_17497;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
            };
          }(__17612, c__8013__auto___17624, G__17443_17613, n__5112__auto___17611, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__17633 = __17612 + 1;
      __17612 = G__17633;
      continue;
    } else {
    }
    break;
  }
  var c__8013__auto___17634 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___17634, jobs, results, process, async) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto___17634, jobs, results, process, async) {
          return function(state_17519) {
            var state_val_17520 = state_17519[1];
            if (state_val_17520 === 9) {
              var inst_17512 = state_17519[2];
              var state_17519__$1 = function() {
                var statearr_17521 = state_17519;
                statearr_17521[7] = inst_17512;
                return statearr_17521;
              }();
              var statearr_17522_17635 = state_17519__$1;
              statearr_17522_17635[2] = null;
              statearr_17522_17635[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17520 === 8) {
                var inst_17505 = state_17519[8];
                var inst_17510 = state_17519[2];
                var state_17519__$1 = function() {
                  var statearr_17523 = state_17519;
                  statearr_17523[9] = inst_17510;
                  return statearr_17523;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17519__$1, 9, results, inst_17505);
              } else {
                if (state_val_17520 === 7) {
                  var inst_17515 = state_17519[2];
                  var state_17519__$1 = state_17519;
                  var statearr_17524_17636 = state_17519__$1;
                  statearr_17524_17636[2] = inst_17515;
                  statearr_17524_17636[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17520 === 6) {
                    var inst_17505 = state_17519[8];
                    var inst_17500 = state_17519[10];
                    var inst_17505__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_17506 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_17507 = [inst_17500, inst_17505__$1];
                    var inst_17508 = new cljs.core.PersistentVector(null, 2, 5, inst_17506, inst_17507, null);
                    var state_17519__$1 = function() {
                      var statearr_17525 = state_17519;
                      statearr_17525[8] = inst_17505__$1;
                      return statearr_17525;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17519__$1, 8, jobs, inst_17508);
                  } else {
                    if (state_val_17520 === 5) {
                      var inst_17503 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_17519__$1 = state_17519;
                      var statearr_17526_17637 = state_17519__$1;
                      statearr_17526_17637[2] = inst_17503;
                      statearr_17526_17637[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17520 === 4) {
                        var inst_17500 = state_17519[10];
                        var inst_17500__$1 = state_17519[2];
                        var inst_17501 = inst_17500__$1 == null;
                        var state_17519__$1 = function() {
                          var statearr_17527 = state_17519;
                          statearr_17527[10] = inst_17500__$1;
                          return statearr_17527;
                        }();
                        if (cljs.core.truth_(inst_17501)) {
                          var statearr_17528_17638 = state_17519__$1;
                          statearr_17528_17638[1] = 5;
                        } else {
                          var statearr_17529_17639 = state_17519__$1;
                          statearr_17529_17639[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17520 === 3) {
                          var inst_17517 = state_17519[2];
                          var state_17519__$1 = state_17519;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17519__$1, inst_17517);
                        } else {
                          if (state_val_17520 === 2) {
                            var state_17519__$1 = state_17519;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17519__$1, 4, from);
                          } else {
                            if (state_val_17520 === 1) {
                              var state_17519__$1 = state_17519;
                              var statearr_17530_17640 = state_17519__$1;
                              statearr_17530_17640[2] = null;
                              statearr_17530_17640[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto___17634, jobs, results, process, async);
        return function(switch__7957__auto__, c__8013__auto___17634, jobs, results, process, async) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_17534 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_17534[0] = state_machine__7958__auto__;
              statearr_17534[1] = 1;
              return statearr_17534;
            };
            var state_machine__7958__auto____1 = function(state_17519) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_17519);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e17535) {
                    if (e17535 instanceof Object) {
                      var ex__7961__auto__ = e17535;
                      var statearr_17536_17641 = state_17519;
                      statearr_17536_17641[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17519);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17535;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17642 = state_17519;
                  state_17519 = G__17642;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_17519) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_17519);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto___17634, jobs, results, process, async);
      }();
      var state__8015__auto__ = function() {
        var statearr_17537 = f__8014__auto__.call(null);
        statearr_17537[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___17634;
        return statearr_17537;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto___17634, jobs, results, process, async));
  var c__8013__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto__, jobs, results, process, async) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto__, jobs, results, process, async) {
          return function(state_17575) {
            var state_val_17576 = state_17575[1];
            if (state_val_17576 === 7) {
              var inst_17571 = state_17575[2];
              var state_17575__$1 = state_17575;
              var statearr_17577_17643 = state_17575__$1;
              statearr_17577_17643[2] = inst_17571;
              statearr_17577_17643[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17576 === 20) {
                var state_17575__$1 = state_17575;
                var statearr_17578_17644 = state_17575__$1;
                statearr_17578_17644[2] = null;
                statearr_17578_17644[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17576 === 1) {
                  var state_17575__$1 = state_17575;
                  var statearr_17579_17645 = state_17575__$1;
                  statearr_17579_17645[2] = null;
                  statearr_17579_17645[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17576 === 4) {
                    var inst_17540 = state_17575[7];
                    var inst_17540__$1 = state_17575[2];
                    var inst_17541 = inst_17540__$1 == null;
                    var state_17575__$1 = function() {
                      var statearr_17580 = state_17575;
                      statearr_17580[7] = inst_17540__$1;
                      return statearr_17580;
                    }();
                    if (cljs.core.truth_(inst_17541)) {
                      var statearr_17581_17646 = state_17575__$1;
                      statearr_17581_17646[1] = 5;
                    } else {
                      var statearr_17582_17647 = state_17575__$1;
                      statearr_17582_17647[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17576 === 15) {
                      var inst_17553 = state_17575[8];
                      var state_17575__$1 = state_17575;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17575__$1, 18, to, inst_17553);
                    } else {
                      if (state_val_17576 === 21) {
                        var inst_17566 = state_17575[2];
                        var state_17575__$1 = state_17575;
                        var statearr_17583_17648 = state_17575__$1;
                        statearr_17583_17648[2] = inst_17566;
                        statearr_17583_17648[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17576 === 13) {
                          var inst_17568 = state_17575[2];
                          var state_17575__$1 = function() {
                            var statearr_17584 = state_17575;
                            statearr_17584[9] = inst_17568;
                            return statearr_17584;
                          }();
                          var statearr_17585_17649 = state_17575__$1;
                          statearr_17585_17649[2] = null;
                          statearr_17585_17649[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17576 === 6) {
                            var inst_17540 = state_17575[7];
                            var state_17575__$1 = state_17575;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17575__$1, 11, inst_17540);
                          } else {
                            if (state_val_17576 === 17) {
                              var inst_17561 = state_17575[2];
                              var state_17575__$1 = state_17575;
                              if (cljs.core.truth_(inst_17561)) {
                                var statearr_17586_17650 = state_17575__$1;
                                statearr_17586_17650[1] = 19;
                              } else {
                                var statearr_17587_17651 = state_17575__$1;
                                statearr_17587_17651[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17576 === 3) {
                                var inst_17573 = state_17575[2];
                                var state_17575__$1 = state_17575;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17575__$1, inst_17573);
                              } else {
                                if (state_val_17576 === 12) {
                                  var inst_17550 = state_17575[10];
                                  var state_17575__$1 = state_17575;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17575__$1, 14, inst_17550);
                                } else {
                                  if (state_val_17576 === 2) {
                                    var state_17575__$1 = state_17575;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17575__$1, 4, results);
                                  } else {
                                    if (state_val_17576 === 19) {
                                      var state_17575__$1 = state_17575;
                                      var statearr_17588_17652 = state_17575__$1;
                                      statearr_17588_17652[2] = null;
                                      statearr_17588_17652[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17576 === 11) {
                                        var inst_17550 = state_17575[2];
                                        var state_17575__$1 = function() {
                                          var statearr_17589 = state_17575;
                                          statearr_17589[10] = inst_17550;
                                          return statearr_17589;
                                        }();
                                        var statearr_17590_17653 = state_17575__$1;
                                        statearr_17590_17653[2] = null;
                                        statearr_17590_17653[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17576 === 9) {
                                          var state_17575__$1 = state_17575;
                                          var statearr_17591_17654 = state_17575__$1;
                                          statearr_17591_17654[2] = null;
                                          statearr_17591_17654[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17576 === 5) {
                                            var state_17575__$1 = state_17575;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_17592_17655 = state_17575__$1;
                                              statearr_17592_17655[1] = 8;
                                            } else {
                                              var statearr_17593_17656 = state_17575__$1;
                                              statearr_17593_17656[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17576 === 14) {
                                              var inst_17555 = state_17575[11];
                                              var inst_17553 = state_17575[8];
                                              var inst_17553__$1 = state_17575[2];
                                              var inst_17554 = inst_17553__$1 == null;
                                              var inst_17555__$1 = cljs.core.not.call(null, inst_17554);
                                              var state_17575__$1 = function() {
                                                var statearr_17594 = state_17575;
                                                statearr_17594[11] = inst_17555__$1;
                                                statearr_17594[8] = inst_17553__$1;
                                                return statearr_17594;
                                              }();
                                              if (inst_17555__$1) {
                                                var statearr_17595_17657 = state_17575__$1;
                                                statearr_17595_17657[1] = 15;
                                              } else {
                                                var statearr_17596_17658 = state_17575__$1;
                                                statearr_17596_17658[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17576 === 16) {
                                                var inst_17555 = state_17575[11];
                                                var state_17575__$1 = state_17575;
                                                var statearr_17597_17659 = state_17575__$1;
                                                statearr_17597_17659[2] = inst_17555;
                                                statearr_17597_17659[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17576 === 10) {
                                                  var inst_17547 = state_17575[2];
                                                  var state_17575__$1 = state_17575;
                                                  var statearr_17598_17660 = state_17575__$1;
                                                  statearr_17598_17660[2] = inst_17547;
                                                  statearr_17598_17660[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17576 === 18) {
                                                    var inst_17558 = state_17575[2];
                                                    var state_17575__$1 = state_17575;
                                                    var statearr_17599_17661 = state_17575__$1;
                                                    statearr_17599_17661[2] = inst_17558;
                                                    statearr_17599_17661[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17576 === 8) {
                                                      var inst_17544 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_17575__$1 = state_17575;
                                                      var statearr_17600_17662 = state_17575__$1;
                                                      statearr_17600_17662[2] = inst_17544;
                                                      statearr_17600_17662[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto__, jobs, results, process, async);
        return function(switch__7957__auto__, c__8013__auto__, jobs, results, process, async) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_17604 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17604[0] = state_machine__7958__auto__;
              statearr_17604[1] = 1;
              return statearr_17604;
            };
            var state_machine__7958__auto____1 = function(state_17575) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_17575);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e17605) {
                    if (e17605 instanceof Object) {
                      var ex__7961__auto__ = e17605;
                      var statearr_17606_17663 = state_17575;
                      statearr_17606_17663[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17575);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17605;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17664 = state_17575;
                  state_17575 = G__17664;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_17575) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_17575);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto__, jobs, results, process, async);
      }();
      var state__8015__auto__ = function() {
        var statearr_17607 = f__8014__auto__.call(null);
        statearr_17607[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto__;
        return statearr_17607;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto__, jobs, results, process, async));
  return c__8013__auto__;
};
cljs.core.async.pipeline_async = function() {
  var pipeline_async = null;
  var pipeline_async__4 = function(n, to, af, from) {
    return pipeline_async.call(null, n, to, af, from, true);
  };
  var pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline_async.cljs$core$IFn$_invoke$arity$4 = pipeline_async__4;
  pipeline_async.cljs$core$IFn$_invoke$arity$5 = pipeline_async__5;
  return pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var pipeline = null;
  var pipeline__4 = function(n, to, xf, from) {
    return pipeline.call(null, n, to, xf, from, true);
  };
  var pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return pipeline__4.call(this, n, to, xf, from);
      case 5:
        return pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline.cljs$core$IFn$_invoke$arity$4 = pipeline__4;
  pipeline.cljs$core$IFn$_invoke$arity$5 = pipeline__5;
  pipeline.cljs$core$IFn$_invoke$arity$6 = pipeline__6;
  return pipeline;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__8013__auto___17765 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___17765, tc, fc) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___17765, tc, fc) {
            return function(state_17740) {
              var state_val_17741 = state_17740[1];
              if (state_val_17741 === 7) {
                var inst_17736 = state_17740[2];
                var state_17740__$1 = state_17740;
                var statearr_17742_17766 = state_17740__$1;
                statearr_17742_17766[2] = inst_17736;
                statearr_17742_17766[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17741 === 1) {
                  var state_17740__$1 = state_17740;
                  var statearr_17743_17767 = state_17740__$1;
                  statearr_17743_17767[2] = null;
                  statearr_17743_17767[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17741 === 4) {
                    var inst_17717 = state_17740[7];
                    var inst_17717__$1 = state_17740[2];
                    var inst_17718 = inst_17717__$1 == null;
                    var state_17740__$1 = function() {
                      var statearr_17744 = state_17740;
                      statearr_17744[7] = inst_17717__$1;
                      return statearr_17744;
                    }();
                    if (cljs.core.truth_(inst_17718)) {
                      var statearr_17745_17768 = state_17740__$1;
                      statearr_17745_17768[1] = 5;
                    } else {
                      var statearr_17746_17769 = state_17740__$1;
                      statearr_17746_17769[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17741 === 13) {
                      var state_17740__$1 = state_17740;
                      var statearr_17747_17770 = state_17740__$1;
                      statearr_17747_17770[2] = null;
                      statearr_17747_17770[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17741 === 6) {
                        var inst_17717 = state_17740[7];
                        var inst_17723 = p.call(null, inst_17717);
                        var state_17740__$1 = state_17740;
                        if (cljs.core.truth_(inst_17723)) {
                          var statearr_17748_17771 = state_17740__$1;
                          statearr_17748_17771[1] = 9;
                        } else {
                          var statearr_17749_17772 = state_17740__$1;
                          statearr_17749_17772[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17741 === 3) {
                          var inst_17738 = state_17740[2];
                          var state_17740__$1 = state_17740;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17740__$1, inst_17738);
                        } else {
                          if (state_val_17741 === 12) {
                            var state_17740__$1 = state_17740;
                            var statearr_17750_17773 = state_17740__$1;
                            statearr_17750_17773[2] = null;
                            statearr_17750_17773[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17741 === 2) {
                              var state_17740__$1 = state_17740;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17740__$1, 4, ch);
                            } else {
                              if (state_val_17741 === 11) {
                                var inst_17717 = state_17740[7];
                                var inst_17727 = state_17740[2];
                                var state_17740__$1 = state_17740;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17740__$1, 8, inst_17727, inst_17717);
                              } else {
                                if (state_val_17741 === 9) {
                                  var state_17740__$1 = state_17740;
                                  var statearr_17751_17774 = state_17740__$1;
                                  statearr_17751_17774[2] = tc;
                                  statearr_17751_17774[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17741 === 5) {
                                    var inst_17720 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_17721 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_17740__$1 = function() {
                                      var statearr_17752 = state_17740;
                                      statearr_17752[8] = inst_17720;
                                      return statearr_17752;
                                    }();
                                    var statearr_17753_17775 = state_17740__$1;
                                    statearr_17753_17775[2] = inst_17721;
                                    statearr_17753_17775[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17741 === 14) {
                                      var inst_17734 = state_17740[2];
                                      var state_17740__$1 = state_17740;
                                      var statearr_17754_17776 = state_17740__$1;
                                      statearr_17754_17776[2] = inst_17734;
                                      statearr_17754_17776[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17741 === 10) {
                                        var state_17740__$1 = state_17740;
                                        var statearr_17755_17777 = state_17740__$1;
                                        statearr_17755_17777[2] = fc;
                                        statearr_17755_17777[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17741 === 8) {
                                          var inst_17729 = state_17740[2];
                                          var state_17740__$1 = state_17740;
                                          if (cljs.core.truth_(inst_17729)) {
                                            var statearr_17756_17778 = state_17740__$1;
                                            statearr_17756_17778[1] = 12;
                                          } else {
                                            var statearr_17757_17779 = state_17740__$1;
                                            statearr_17757_17779[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___17765, tc, fc);
          return function(switch__7957__auto__, c__8013__auto___17765, tc, fc) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_17761 = [null, null, null, null, null, null, null, null, null];
                statearr_17761[0] = state_machine__7958__auto__;
                statearr_17761[1] = 1;
                return statearr_17761;
              };
              var state_machine__7958__auto____1 = function(state_17740) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_17740);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e17762) {
                      if (e17762 instanceof Object) {
                        var ex__7961__auto__ = e17762;
                        var statearr_17763_17780 = state_17740;
                        statearr_17763_17780[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17740);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e17762;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17781 = state_17740;
                    state_17740 = G__17781;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_17740) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_17740);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___17765, tc, fc);
        }();
        var state__8015__auto__ = function() {
          var statearr_17764 = f__8014__auto__.call(null);
          statearr_17764[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___17765;
          return statearr_17764;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___17765, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__8013__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto__) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto__) {
          return function(state_17828) {
            var state_val_17829 = state_17828[1];
            if (state_val_17829 === 7) {
              var inst_17824 = state_17828[2];
              var state_17828__$1 = state_17828;
              var statearr_17830_17846 = state_17828__$1;
              statearr_17830_17846[2] = inst_17824;
              statearr_17830_17846[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17829 === 6) {
                var inst_17817 = state_17828[7];
                var inst_17814 = state_17828[8];
                var inst_17821 = f.call(null, inst_17814, inst_17817);
                var inst_17814__$1 = inst_17821;
                var state_17828__$1 = function() {
                  var statearr_17831 = state_17828;
                  statearr_17831[8] = inst_17814__$1;
                  return statearr_17831;
                }();
                var statearr_17832_17847 = state_17828__$1;
                statearr_17832_17847[2] = null;
                statearr_17832_17847[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17829 === 5) {
                  var inst_17814 = state_17828[8];
                  var state_17828__$1 = state_17828;
                  var statearr_17833_17848 = state_17828__$1;
                  statearr_17833_17848[2] = inst_17814;
                  statearr_17833_17848[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17829 === 4) {
                    var inst_17817 = state_17828[7];
                    var inst_17817__$1 = state_17828[2];
                    var inst_17818 = inst_17817__$1 == null;
                    var state_17828__$1 = function() {
                      var statearr_17834 = state_17828;
                      statearr_17834[7] = inst_17817__$1;
                      return statearr_17834;
                    }();
                    if (cljs.core.truth_(inst_17818)) {
                      var statearr_17835_17849 = state_17828__$1;
                      statearr_17835_17849[1] = 5;
                    } else {
                      var statearr_17836_17850 = state_17828__$1;
                      statearr_17836_17850[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17829 === 3) {
                      var inst_17826 = state_17828[2];
                      var state_17828__$1 = state_17828;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17828__$1, inst_17826);
                    } else {
                      if (state_val_17829 === 2) {
                        var state_17828__$1 = state_17828;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17828__$1, 4, ch);
                      } else {
                        if (state_val_17829 === 1) {
                          var inst_17814 = init;
                          var state_17828__$1 = function() {
                            var statearr_17837 = state_17828;
                            statearr_17837[8] = inst_17814;
                            return statearr_17837;
                          }();
                          var statearr_17838_17851 = state_17828__$1;
                          statearr_17838_17851[2] = null;
                          statearr_17838_17851[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto__);
        return function(switch__7957__auto__, c__8013__auto__) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_17842 = [null, null, null, null, null, null, null, null, null];
              statearr_17842[0] = state_machine__7958__auto__;
              statearr_17842[1] = 1;
              return statearr_17842;
            };
            var state_machine__7958__auto____1 = function(state_17828) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_17828);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e17843) {
                    if (e17843 instanceof Object) {
                      var ex__7961__auto__ = e17843;
                      var statearr_17844_17852 = state_17828;
                      statearr_17844_17852[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17828);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17843;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17853 = state_17828;
                  state_17828 = G__17853;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_17828) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_17828);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto__);
      }();
      var state__8015__auto__ = function() {
        var statearr_17845 = f__8014__auto__.call(null);
        statearr_17845[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto__;
        return statearr_17845;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto__));
  return c__8013__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__8013__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto__) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto__) {
            return function(state_17927) {
              var state_val_17928 = state_17927[1];
              if (state_val_17928 === 7) {
                var inst_17909 = state_17927[2];
                var state_17927__$1 = state_17927;
                var statearr_17929_17952 = state_17927__$1;
                statearr_17929_17952[2] = inst_17909;
                statearr_17929_17952[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17928 === 1) {
                  var inst_17903 = cljs.core.seq.call(null, coll);
                  var inst_17904 = inst_17903;
                  var state_17927__$1 = function() {
                    var statearr_17930 = state_17927;
                    statearr_17930[7] = inst_17904;
                    return statearr_17930;
                  }();
                  var statearr_17931_17953 = state_17927__$1;
                  statearr_17931_17953[2] = null;
                  statearr_17931_17953[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17928 === 4) {
                    var inst_17904 = state_17927[7];
                    var inst_17907 = cljs.core.first.call(null, inst_17904);
                    var state_17927__$1 = state_17927;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17927__$1, 7, ch, inst_17907);
                  } else {
                    if (state_val_17928 === 13) {
                      var inst_17921 = state_17927[2];
                      var state_17927__$1 = state_17927;
                      var statearr_17932_17954 = state_17927__$1;
                      statearr_17932_17954[2] = inst_17921;
                      statearr_17932_17954[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17928 === 6) {
                        var inst_17912 = state_17927[2];
                        var state_17927__$1 = state_17927;
                        if (cljs.core.truth_(inst_17912)) {
                          var statearr_17933_17955 = state_17927__$1;
                          statearr_17933_17955[1] = 8;
                        } else {
                          var statearr_17934_17956 = state_17927__$1;
                          statearr_17934_17956[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17928 === 3) {
                          var inst_17925 = state_17927[2];
                          var state_17927__$1 = state_17927;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17927__$1, inst_17925);
                        } else {
                          if (state_val_17928 === 12) {
                            var state_17927__$1 = state_17927;
                            var statearr_17935_17957 = state_17927__$1;
                            statearr_17935_17957[2] = null;
                            statearr_17935_17957[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17928 === 2) {
                              var inst_17904 = state_17927[7];
                              var state_17927__$1 = state_17927;
                              if (cljs.core.truth_(inst_17904)) {
                                var statearr_17936_17958 = state_17927__$1;
                                statearr_17936_17958[1] = 4;
                              } else {
                                var statearr_17937_17959 = state_17927__$1;
                                statearr_17937_17959[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17928 === 11) {
                                var inst_17918 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_17927__$1 = state_17927;
                                var statearr_17938_17960 = state_17927__$1;
                                statearr_17938_17960[2] = inst_17918;
                                statearr_17938_17960[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17928 === 9) {
                                  var state_17927__$1 = state_17927;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_17939_17961 = state_17927__$1;
                                    statearr_17939_17961[1] = 11;
                                  } else {
                                    var statearr_17940_17962 = state_17927__$1;
                                    statearr_17940_17962[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_17928 === 5) {
                                    var inst_17904 = state_17927[7];
                                    var state_17927__$1 = state_17927;
                                    var statearr_17941_17963 = state_17927__$1;
                                    statearr_17941_17963[2] = inst_17904;
                                    statearr_17941_17963[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17928 === 10) {
                                      var inst_17923 = state_17927[2];
                                      var state_17927__$1 = state_17927;
                                      var statearr_17942_17964 = state_17927__$1;
                                      statearr_17942_17964[2] = inst_17923;
                                      statearr_17942_17964[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17928 === 8) {
                                        var inst_17904 = state_17927[7];
                                        var inst_17914 = cljs.core.next.call(null, inst_17904);
                                        var inst_17904__$1 = inst_17914;
                                        var state_17927__$1 = function() {
                                          var statearr_17943 = state_17927;
                                          statearr_17943[7] = inst_17904__$1;
                                          return statearr_17943;
                                        }();
                                        var statearr_17944_17965 = state_17927__$1;
                                        statearr_17944_17965[2] = null;
                                        statearr_17944_17965[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto__);
          return function(switch__7957__auto__, c__8013__auto__) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_17948 = [null, null, null, null, null, null, null, null];
                statearr_17948[0] = state_machine__7958__auto__;
                statearr_17948[1] = 1;
                return statearr_17948;
              };
              var state_machine__7958__auto____1 = function(state_17927) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_17927);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e17949) {
                      if (e17949 instanceof Object) {
                        var ex__7961__auto__ = e17949;
                        var statearr_17950_17966 = state_17927;
                        statearr_17950_17966[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17927);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e17949;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__17967 = state_17927;
                    state_17927 = G__17967;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_17927) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_17927);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto__);
        }();
        var state__8015__auto__ = function() {
          var statearr_17951 = f__8014__auto__.call(null);
          statearr_17951[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto__;
          return statearr_17951;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto__));
    return c__8013__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj17969 = {};
  return obj17969;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__4213__auto__ = _;
    if (and__4213__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4869__auto__ = _ == null ? null : _;
    return function() {
      var or__4225__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj17971 = {};
  return obj17971;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t18193 !== "undefined") {
    } else {
      cljs.core.async.t18193 = function(cs, ch, mult, meta18194) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta18194 = meta18194;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18193.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t18193.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t18193.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t18193.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t18193.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18193.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t18193.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_18195) {
          var self__ = this;
          var _18195__$1 = this;
          return self__.meta18194;
        };
      }(cs);
      cljs.core.async.t18193.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_18195, meta18194__$1) {
          var self__ = this;
          var _18195__$1 = this;
          return new cljs.core.async.t18193(self__.cs, self__.ch, self__.mult, meta18194__$1);
        };
      }(cs);
      cljs.core.async.t18193.cljs$lang$type = true;
      cljs.core.async.t18193.cljs$lang$ctorStr = "cljs.core.async/t18193";
      cljs.core.async.t18193.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
          return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t18193");
        };
      }(cs);
      cljs.core.async.__GT_t18193 = function(cs) {
        return function __GT_t18193(cs__$1, ch__$1, mult__$1, meta18194) {
          return new cljs.core.async.t18193(cs__$1, ch__$1, mult__$1, meta18194);
        };
      }(cs);
    }
    return new cljs.core.async.t18193(cs, ch, mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__8013__auto___18414 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___18414, cs, m, dchan, dctr, done) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto___18414, cs, m, dchan, dctr, done) {
          return function(state_18326) {
            var state_val_18327 = state_18326[1];
            if (state_val_18327 === 7) {
              var inst_18322 = state_18326[2];
              var state_18326__$1 = state_18326;
              var statearr_18328_18415 = state_18326__$1;
              statearr_18328_18415[2] = inst_18322;
              statearr_18328_18415[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18327 === 20) {
                var inst_18227 = state_18326[7];
                var inst_18237 = cljs.core.first.call(null, inst_18227);
                var inst_18238 = cljs.core.nth.call(null, inst_18237, 0, null);
                var inst_18239 = cljs.core.nth.call(null, inst_18237, 1, null);
                var state_18326__$1 = function() {
                  var statearr_18329 = state_18326;
                  statearr_18329[8] = inst_18238;
                  return statearr_18329;
                }();
                if (cljs.core.truth_(inst_18239)) {
                  var statearr_18330_18416 = state_18326__$1;
                  statearr_18330_18416[1] = 22;
                } else {
                  var statearr_18331_18417 = state_18326__$1;
                  statearr_18331_18417[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18327 === 27) {
                  var inst_18269 = state_18326[9];
                  var inst_18198 = state_18326[10];
                  var inst_18274 = state_18326[11];
                  var inst_18267 = state_18326[12];
                  var inst_18274__$1 = cljs.core._nth.call(null, inst_18267, inst_18269);
                  var inst_18275 = cljs.core.async.put_BANG_.call(null, inst_18274__$1, inst_18198, done);
                  var state_18326__$1 = function() {
                    var statearr_18332 = state_18326;
                    statearr_18332[11] = inst_18274__$1;
                    return statearr_18332;
                  }();
                  if (cljs.core.truth_(inst_18275)) {
                    var statearr_18333_18418 = state_18326__$1;
                    statearr_18333_18418[1] = 30;
                  } else {
                    var statearr_18334_18419 = state_18326__$1;
                    statearr_18334_18419[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18327 === 1) {
                    var state_18326__$1 = state_18326;
                    var statearr_18335_18420 = state_18326__$1;
                    statearr_18335_18420[2] = null;
                    statearr_18335_18420[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18327 === 24) {
                      var inst_18227 = state_18326[7];
                      var inst_18244 = state_18326[2];
                      var inst_18245 = cljs.core.next.call(null, inst_18227);
                      var inst_18207 = inst_18245;
                      var inst_18208 = null;
                      var inst_18209 = 0;
                      var inst_18210 = 0;
                      var state_18326__$1 = function() {
                        var statearr_18336 = state_18326;
                        statearr_18336[13] = inst_18208;
                        statearr_18336[14] = inst_18209;
                        statearr_18336[15] = inst_18207;
                        statearr_18336[16] = inst_18244;
                        statearr_18336[17] = inst_18210;
                        return statearr_18336;
                      }();
                      var statearr_18337_18421 = state_18326__$1;
                      statearr_18337_18421[2] = null;
                      statearr_18337_18421[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18327 === 39) {
                        var state_18326__$1 = state_18326;
                        var statearr_18341_18422 = state_18326__$1;
                        statearr_18341_18422[2] = null;
                        statearr_18341_18422[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18327 === 4) {
                          var inst_18198 = state_18326[10];
                          var inst_18198__$1 = state_18326[2];
                          var inst_18199 = inst_18198__$1 == null;
                          var state_18326__$1 = function() {
                            var statearr_18342 = state_18326;
                            statearr_18342[10] = inst_18198__$1;
                            return statearr_18342;
                          }();
                          if (cljs.core.truth_(inst_18199)) {
                            var statearr_18343_18423 = state_18326__$1;
                            statearr_18343_18423[1] = 5;
                          } else {
                            var statearr_18344_18424 = state_18326__$1;
                            statearr_18344_18424[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18327 === 15) {
                            var inst_18208 = state_18326[13];
                            var inst_18209 = state_18326[14];
                            var inst_18207 = state_18326[15];
                            var inst_18210 = state_18326[17];
                            var inst_18223 = state_18326[2];
                            var inst_18224 = inst_18210 + 1;
                            var tmp18338 = inst_18208;
                            var tmp18339 = inst_18209;
                            var tmp18340 = inst_18207;
                            var inst_18207__$1 = tmp18340;
                            var inst_18208__$1 = tmp18338;
                            var inst_18209__$1 = tmp18339;
                            var inst_18210__$1 = inst_18224;
                            var state_18326__$1 = function() {
                              var statearr_18345 = state_18326;
                              statearr_18345[13] = inst_18208__$1;
                              statearr_18345[14] = inst_18209__$1;
                              statearr_18345[15] = inst_18207__$1;
                              statearr_18345[18] = inst_18223;
                              statearr_18345[17] = inst_18210__$1;
                              return statearr_18345;
                            }();
                            var statearr_18346_18425 = state_18326__$1;
                            statearr_18346_18425[2] = null;
                            statearr_18346_18425[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18327 === 21) {
                              var inst_18248 = state_18326[2];
                              var state_18326__$1 = state_18326;
                              var statearr_18350_18426 = state_18326__$1;
                              statearr_18350_18426[2] = inst_18248;
                              statearr_18350_18426[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18327 === 31) {
                                var inst_18274 = state_18326[11];
                                var inst_18278 = done.call(null, null);
                                var inst_18279 = cljs.core.async.untap_STAR_.call(null, m, inst_18274);
                                var state_18326__$1 = function() {
                                  var statearr_18351 = state_18326;
                                  statearr_18351[19] = inst_18278;
                                  return statearr_18351;
                                }();
                                var statearr_18352_18427 = state_18326__$1;
                                statearr_18352_18427[2] = inst_18279;
                                statearr_18352_18427[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18327 === 32) {
                                  var inst_18269 = state_18326[9];
                                  var inst_18268 = state_18326[20];
                                  var inst_18266 = state_18326[21];
                                  var inst_18267 = state_18326[12];
                                  var inst_18281 = state_18326[2];
                                  var inst_18282 = inst_18269 + 1;
                                  var tmp18347 = inst_18268;
                                  var tmp18348 = inst_18266;
                                  var tmp18349 = inst_18267;
                                  var inst_18266__$1 = tmp18348;
                                  var inst_18267__$1 = tmp18349;
                                  var inst_18268__$1 = tmp18347;
                                  var inst_18269__$1 = inst_18282;
                                  var state_18326__$1 = function() {
                                    var statearr_18353 = state_18326;
                                    statearr_18353[22] = inst_18281;
                                    statearr_18353[9] = inst_18269__$1;
                                    statearr_18353[20] = inst_18268__$1;
                                    statearr_18353[21] = inst_18266__$1;
                                    statearr_18353[12] = inst_18267__$1;
                                    return statearr_18353;
                                  }();
                                  var statearr_18354_18428 = state_18326__$1;
                                  statearr_18354_18428[2] = null;
                                  statearr_18354_18428[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18327 === 40) {
                                    var inst_18294 = state_18326[23];
                                    var inst_18298 = done.call(null, null);
                                    var inst_18299 = cljs.core.async.untap_STAR_.call(null, m, inst_18294);
                                    var state_18326__$1 = function() {
                                      var statearr_18355 = state_18326;
                                      statearr_18355[24] = inst_18298;
                                      return statearr_18355;
                                    }();
                                    var statearr_18356_18429 = state_18326__$1;
                                    statearr_18356_18429[2] = inst_18299;
                                    statearr_18356_18429[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18327 === 33) {
                                      var inst_18285 = state_18326[25];
                                      var inst_18287 = cljs.core.chunked_seq_QMARK_.call(null, inst_18285);
                                      var state_18326__$1 = state_18326;
                                      if (inst_18287) {
                                        var statearr_18357_18430 = state_18326__$1;
                                        statearr_18357_18430[1] = 36;
                                      } else {
                                        var statearr_18358_18431 = state_18326__$1;
                                        statearr_18358_18431[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18327 === 13) {
                                        var inst_18217 = state_18326[26];
                                        var inst_18220 = cljs.core.async.close_BANG_.call(null, inst_18217);
                                        var state_18326__$1 = state_18326;
                                        var statearr_18359_18432 = state_18326__$1;
                                        statearr_18359_18432[2] = inst_18220;
                                        statearr_18359_18432[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18327 === 22) {
                                          var inst_18238 = state_18326[8];
                                          var inst_18241 = cljs.core.async.close_BANG_.call(null, inst_18238);
                                          var state_18326__$1 = state_18326;
                                          var statearr_18360_18433 = state_18326__$1;
                                          statearr_18360_18433[2] = inst_18241;
                                          statearr_18360_18433[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18327 === 36) {
                                            var inst_18285 = state_18326[25];
                                            var inst_18289 = cljs.core.chunk_first.call(null, inst_18285);
                                            var inst_18290 = cljs.core.chunk_rest.call(null, inst_18285);
                                            var inst_18291 = cljs.core.count.call(null, inst_18289);
                                            var inst_18266 = inst_18290;
                                            var inst_18267 = inst_18289;
                                            var inst_18268 = inst_18291;
                                            var inst_18269 = 0;
                                            var state_18326__$1 = function() {
                                              var statearr_18361 = state_18326;
                                              statearr_18361[9] = inst_18269;
                                              statearr_18361[20] = inst_18268;
                                              statearr_18361[21] = inst_18266;
                                              statearr_18361[12] = inst_18267;
                                              return statearr_18361;
                                            }();
                                            var statearr_18362_18434 = state_18326__$1;
                                            statearr_18362_18434[2] = null;
                                            statearr_18362_18434[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18327 === 41) {
                                              var inst_18285 = state_18326[25];
                                              var inst_18301 = state_18326[2];
                                              var inst_18302 = cljs.core.next.call(null, inst_18285);
                                              var inst_18266 = inst_18302;
                                              var inst_18267 = null;
                                              var inst_18268 = 0;
                                              var inst_18269 = 0;
                                              var state_18326__$1 = function() {
                                                var statearr_18363 = state_18326;
                                                statearr_18363[27] = inst_18301;
                                                statearr_18363[9] = inst_18269;
                                                statearr_18363[20] = inst_18268;
                                                statearr_18363[21] = inst_18266;
                                                statearr_18363[12] = inst_18267;
                                                return statearr_18363;
                                              }();
                                              var statearr_18364_18435 = state_18326__$1;
                                              statearr_18364_18435[2] = null;
                                              statearr_18364_18435[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18327 === 43) {
                                                var state_18326__$1 = state_18326;
                                                var statearr_18365_18436 = state_18326__$1;
                                                statearr_18365_18436[2] = null;
                                                statearr_18365_18436[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18327 === 29) {
                                                  var inst_18310 = state_18326[2];
                                                  var state_18326__$1 = state_18326;
                                                  var statearr_18366_18437 = state_18326__$1;
                                                  statearr_18366_18437[2] = inst_18310;
                                                  statearr_18366_18437[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18327 === 44) {
                                                    var inst_18319 = state_18326[2];
                                                    var state_18326__$1 = function() {
                                                      var statearr_18367 = state_18326;
                                                      statearr_18367[28] = inst_18319;
                                                      return statearr_18367;
                                                    }();
                                                    var statearr_18368_18438 = state_18326__$1;
                                                    statearr_18368_18438[2] = null;
                                                    statearr_18368_18438[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18327 === 6) {
                                                      var inst_18258 = state_18326[29];
                                                      var inst_18257 = cljs.core.deref.call(null, cs);
                                                      var inst_18258__$1 = cljs.core.keys.call(null, inst_18257);
                                                      var inst_18259 = cljs.core.count.call(null, inst_18258__$1);
                                                      var inst_18260 = cljs.core.reset_BANG_.call(null, dctr, inst_18259);
                                                      var inst_18265 = cljs.core.seq.call(null, inst_18258__$1);
                                                      var inst_18266 = inst_18265;
                                                      var inst_18267 = null;
                                                      var inst_18268 = 0;
                                                      var inst_18269 = 0;
                                                      var state_18326__$1 = function() {
                                                        var statearr_18369 = state_18326;
                                                        statearr_18369[30] = inst_18260;
                                                        statearr_18369[9] = inst_18269;
                                                        statearr_18369[20] = inst_18268;
                                                        statearr_18369[21] = inst_18266;
                                                        statearr_18369[29] = inst_18258__$1;
                                                        statearr_18369[12] = inst_18267;
                                                        return statearr_18369;
                                                      }();
                                                      var statearr_18370_18439 = state_18326__$1;
                                                      statearr_18370_18439[2] = null;
                                                      statearr_18370_18439[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18327 === 28) {
                                                        var inst_18285 = state_18326[25];
                                                        var inst_18266 = state_18326[21];
                                                        var inst_18285__$1 = cljs.core.seq.call(null, inst_18266);
                                                        var state_18326__$1 = function() {
                                                          var statearr_18371 = state_18326;
                                                          statearr_18371[25] = inst_18285__$1;
                                                          return statearr_18371;
                                                        }();
                                                        if (inst_18285__$1) {
                                                          var statearr_18372_18440 = state_18326__$1;
                                                          statearr_18372_18440[1] = 33;
                                                        } else {
                                                          var statearr_18373_18441 = state_18326__$1;
                                                          statearr_18373_18441[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18327 === 25) {
                                                          var inst_18269 = state_18326[9];
                                                          var inst_18268 = state_18326[20];
                                                          var inst_18271 = inst_18269 < inst_18268;
                                                          var inst_18272 = inst_18271;
                                                          var state_18326__$1 = state_18326;
                                                          if (cljs.core.truth_(inst_18272)) {
                                                            var statearr_18374_18442 = state_18326__$1;
                                                            statearr_18374_18442[1] = 27;
                                                          } else {
                                                            var statearr_18375_18443 = state_18326__$1;
                                                            statearr_18375_18443[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18327 === 34) {
                                                            var state_18326__$1 = state_18326;
                                                            var statearr_18376_18444 = state_18326__$1;
                                                            statearr_18376_18444[2] = null;
                                                            statearr_18376_18444[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18327 === 17) {
                                                              var state_18326__$1 = state_18326;
                                                              var statearr_18377_18445 = state_18326__$1;
                                                              statearr_18377_18445[2] = null;
                                                              statearr_18377_18445[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18327 === 3) {
                                                                var inst_18324 = state_18326[2];
                                                                var state_18326__$1 = state_18326;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18326__$1, inst_18324);
                                                              } else {
                                                                if (state_val_18327 === 12) {
                                                                  var inst_18253 = state_18326[2];
                                                                  var state_18326__$1 = state_18326;
                                                                  var statearr_18378_18446 = state_18326__$1;
                                                                  statearr_18378_18446[2] = inst_18253;
                                                                  statearr_18378_18446[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_18327 === 2) {
                                                                    var state_18326__$1 = state_18326;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18326__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_18327 === 23) {
                                                                      var state_18326__$1 = state_18326;
                                                                      var statearr_18379_18447 = state_18326__$1;
                                                                      statearr_18379_18447[2] = null;
                                                                      statearr_18379_18447[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_18327 === 35) {
                                                                        var inst_18308 = state_18326[2];
                                                                        var state_18326__$1 = state_18326;
                                                                        var statearr_18380_18448 = state_18326__$1;
                                                                        statearr_18380_18448[2] = inst_18308;
                                                                        statearr_18380_18448[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_18327 === 19) {
                                                                          var inst_18227 = state_18326[7];
                                                                          var inst_18231 = cljs.core.chunk_first.call(null, inst_18227);
                                                                          var inst_18232 = cljs.core.chunk_rest.call(null, inst_18227);
                                                                          var inst_18233 = cljs.core.count.call(null, inst_18231);
                                                                          var inst_18207 = inst_18232;
                                                                          var inst_18208 = inst_18231;
                                                                          var inst_18209 = inst_18233;
                                                                          var inst_18210 = 0;
                                                                          var state_18326__$1 = function() {
                                                                            var statearr_18381 = state_18326;
                                                                            statearr_18381[13] = inst_18208;
                                                                            statearr_18381[14] = inst_18209;
                                                                            statearr_18381[15] = inst_18207;
                                                                            statearr_18381[17] = inst_18210;
                                                                            return statearr_18381;
                                                                          }();
                                                                          var statearr_18382_18449 = state_18326__$1;
                                                                          statearr_18382_18449[2] = null;
                                                                          statearr_18382_18449[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_18327 === 11) {
                                                                            var inst_18207 = state_18326[15];
                                                                            var inst_18227 = state_18326[7];
                                                                            var inst_18227__$1 = cljs.core.seq.call(null, inst_18207);
                                                                            var state_18326__$1 = function() {
                                                                              var statearr_18383 = state_18326;
                                                                              statearr_18383[7] = inst_18227__$1;
                                                                              return statearr_18383;
                                                                            }();
                                                                            if (inst_18227__$1) {
                                                                              var statearr_18384_18450 = state_18326__$1;
                                                                              statearr_18384_18450[1] = 16;
                                                                            } else {
                                                                              var statearr_18385_18451 = state_18326__$1;
                                                                              statearr_18385_18451[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_18327 === 9) {
                                                                              var inst_18255 = state_18326[2];
                                                                              var state_18326__$1 = state_18326;
                                                                              var statearr_18386_18452 = state_18326__$1;
                                                                              statearr_18386_18452[2] = inst_18255;
                                                                              statearr_18386_18452[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_18327 === 5) {
                                                                                var inst_18205 = cljs.core.deref.call(null, cs);
                                                                                var inst_18206 = cljs.core.seq.call(null, inst_18205);
                                                                                var inst_18207 = inst_18206;
                                                                                var inst_18208 = null;
                                                                                var inst_18209 = 0;
                                                                                var inst_18210 = 0;
                                                                                var state_18326__$1 = function() {
                                                                                  var statearr_18387 = state_18326;
                                                                                  statearr_18387[13] = inst_18208;
                                                                                  statearr_18387[14] = inst_18209;
                                                                                  statearr_18387[15] = inst_18207;
                                                                                  statearr_18387[17] = inst_18210;
                                                                                  return statearr_18387;
                                                                                }();
                                                                                var statearr_18388_18453 = state_18326__$1;
                                                                                statearr_18388_18453[2] = null;
                                                                                statearr_18388_18453[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_18327 === 14) {
                                                                                  var state_18326__$1 = state_18326;
                                                                                  var statearr_18389_18454 = state_18326__$1;
                                                                                  statearr_18389_18454[2] = null;
                                                                                  statearr_18389_18454[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_18327 === 45) {
                                                                                    var inst_18316 = state_18326[2];
                                                                                    var state_18326__$1 = state_18326;
                                                                                    var statearr_18390_18455 = state_18326__$1;
                                                                                    statearr_18390_18455[2] = inst_18316;
                                                                                    statearr_18390_18455[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_18327 === 26) {
                                                                                      var inst_18258 = state_18326[29];
                                                                                      var inst_18312 = state_18326[2];
                                                                                      var inst_18313 = cljs.core.seq.call(null, inst_18258);
                                                                                      var state_18326__$1 = function() {
                                                                                        var statearr_18391 = state_18326;
                                                                                        statearr_18391[31] = inst_18312;
                                                                                        return statearr_18391;
                                                                                      }();
                                                                                      if (inst_18313) {
                                                                                        var statearr_18392_18456 = state_18326__$1;
                                                                                        statearr_18392_18456[1] = 42;
                                                                                      } else {
                                                                                        var statearr_18393_18457 = state_18326__$1;
                                                                                        statearr_18393_18457[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_18327 === 16) {
                                                                                        var inst_18227 = state_18326[7];
                                                                                        var inst_18229 = cljs.core.chunked_seq_QMARK_.call(null, inst_18227);
                                                                                        var state_18326__$1 = state_18326;
                                                                                        if (inst_18229) {
                                                                                          var statearr_18394_18458 = state_18326__$1;
                                                                                          statearr_18394_18458[1] = 19;
                                                                                        } else {
                                                                                          var statearr_18395_18459 = state_18326__$1;
                                                                                          statearr_18395_18459[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_18327 === 38) {
                                                                                          var inst_18305 = state_18326[2];
                                                                                          var state_18326__$1 = state_18326;
                                                                                          var statearr_18396_18460 = state_18326__$1;
                                                                                          statearr_18396_18460[2] = inst_18305;
                                                                                          statearr_18396_18460[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_18327 === 30) {
                                                                                            var state_18326__$1 = state_18326;
                                                                                            var statearr_18397_18461 = state_18326__$1;
                                                                                            statearr_18397_18461[2] = null;
                                                                                            statearr_18397_18461[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_18327 === 10) {
                                                                                              var inst_18208 = state_18326[13];
                                                                                              var inst_18210 = state_18326[17];
                                                                                              var inst_18216 = cljs.core._nth.call(null, inst_18208, inst_18210);
                                                                                              var inst_18217 = cljs.core.nth.call(null, inst_18216, 0, null);
                                                                                              var inst_18218 = cljs.core.nth.call(null, inst_18216, 1, null);
                                                                                              var state_18326__$1 = function() {
                                                                                                var statearr_18398 = state_18326;
                                                                                                statearr_18398[26] = inst_18217;
                                                                                                return statearr_18398;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_18218)) {
                                                                                                var statearr_18399_18462 = state_18326__$1;
                                                                                                statearr_18399_18462[1] = 13;
                                                                                              } else {
                                                                                                var statearr_18400_18463 = state_18326__$1;
                                                                                                statearr_18400_18463[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_18327 === 18) {
                                                                                                var inst_18251 = state_18326[2];
                                                                                                var state_18326__$1 = state_18326;
                                                                                                var statearr_18401_18464 = state_18326__$1;
                                                                                                statearr_18401_18464[2] = inst_18251;
                                                                                                statearr_18401_18464[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_18327 === 42) {
                                                                                                  var state_18326__$1 = state_18326;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18326__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_18327 === 37) {
                                                                                                    var inst_18285 = state_18326[25];
                                                                                                    var inst_18294 = state_18326[23];
                                                                                                    var inst_18198 = state_18326[10];
                                                                                                    var inst_18294__$1 = cljs.core.first.call(null, inst_18285);
                                                                                                    var inst_18295 = cljs.core.async.put_BANG_.call(null, inst_18294__$1, inst_18198, done);
                                                                                                    var state_18326__$1 = function() {
                                                                                                      var statearr_18402 = state_18326;
                                                                                                      statearr_18402[23] = inst_18294__$1;
                                                                                                      return statearr_18402;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_18295)) {
                                                                                                      var statearr_18403_18465 = state_18326__$1;
                                                                                                      statearr_18403_18465[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_18404_18466 = state_18326__$1;
                                                                                                      statearr_18404_18466[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_18327 === 8) {
                                                                                                      var inst_18209 = state_18326[14];
                                                                                                      var inst_18210 = state_18326[17];
                                                                                                      var inst_18212 = inst_18210 < inst_18209;
                                                                                                      var inst_18213 = inst_18212;
                                                                                                      var state_18326__$1 = state_18326;
                                                                                                      if (cljs.core.truth_(inst_18213)) {
                                                                                                        var statearr_18405_18467 = state_18326__$1;
                                                                                                        statearr_18405_18467[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_18406_18468 = state_18326__$1;
                                                                                                        statearr_18406_18468[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto___18414, cs, m, dchan, dctr, done);
        return function(switch__7957__auto__, c__8013__auto___18414, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_18410 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18410[0] = state_machine__7958__auto__;
              statearr_18410[1] = 1;
              return statearr_18410;
            };
            var state_machine__7958__auto____1 = function(state_18326) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_18326);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e18411) {
                    if (e18411 instanceof Object) {
                      var ex__7961__auto__ = e18411;
                      var statearr_18412_18469 = state_18326;
                      statearr_18412_18469[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18326);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e18411;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18470 = state_18326;
                  state_18326 = G__18470;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_18326) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_18326);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto___18414, cs, m, dchan, dctr, done);
      }();
      var state__8015__auto__ = function() {
        var statearr_18413 = f__8014__auto__.call(null);
        statearr_18413[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___18414;
        return statearr_18413;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto___18414, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj18472 = {};
  return obj18472;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4213__auto__ = m;
    if (and__4213__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4869__auto__ = m == null ? null : m;
    return function() {
      var or__4225__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__18473) {
    var map__18478 = p__18473;
    var map__18478__$1 = cljs.core.seq_QMARK_.call(null, map__18478) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18478) : map__18478;
    var opts = map__18478__$1;
    var statearr_18479_18482 = state;
    statearr_18479_18482[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__18478, map__18478__$1, opts) {
      return function(val) {
        var statearr_18480_18483 = state;
        statearr_18480_18483[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__18478, map__18478__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_18481_18484 = state;
      statearr_18481_18484[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__18473 = null;
    if (arguments.length > 3) {
      var G__18485__i = 0, G__18485__a = new Array(arguments.length - 3);
      while (G__18485__i < G__18485__a.length) {
        G__18485__a[G__18485__i] = arguments[G__18485__i + 3];
        ++G__18485__i;
      }
      p__18473 = new cljs.core.IndexedSeq(G__18485__a, 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__18473);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__18486) {
    var state = cljs.core.first(arglist__18486);
    arglist__18486 = cljs.core.next(arglist__18486);
    var cont_block = cljs.core.first(arglist__18486);
    arglist__18486 = cljs.core.next(arglist__18486);
    var ports = cljs.core.first(arglist__18486);
    var p__18473 = cljs.core.rest(arglist__18486);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__18473);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t18606 !== "undefined") {
    } else {
      cljs.core.async.t18606 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta18607) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta18607 = meta18607;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t18606.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t18606.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t18606.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18608) {
          var self__ = this;
          var _18608__$1 = this;
          return self__.meta18607;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_18608, meta18607__$1) {
          var self__ = this;
          var _18608__$1 = this;
          return new cljs.core.async.t18606(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta18607__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t18606.cljs$lang$type = true;
      cljs.core.async.t18606.cljs$lang$ctorStr = "cljs.core.async/t18606";
      cljs.core.async.t18606.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
          return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t18606");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t18606 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t18606(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18607) {
          return new cljs.core.async.t18606(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta18607);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t18606(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__8013__auto___18725 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___18725, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto___18725, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_18678) {
            var state_val_18679 = state_18678[1];
            if (state_val_18679 === 7) {
              var inst_18622 = state_18678[7];
              var inst_18627 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18622);
              var state_18678__$1 = state_18678;
              var statearr_18680_18726 = state_18678__$1;
              statearr_18680_18726[2] = inst_18627;
              statearr_18680_18726[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18679 === 20) {
                var inst_18637 = state_18678[8];
                var state_18678__$1 = state_18678;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18678__$1, 23, out, inst_18637);
              } else {
                if (state_val_18679 === 1) {
                  var inst_18612 = state_18678[9];
                  var inst_18612__$1 = calc_state.call(null);
                  var inst_18613 = cljs.core.seq_QMARK_.call(null, inst_18612__$1);
                  var state_18678__$1 = function() {
                    var statearr_18681 = state_18678;
                    statearr_18681[9] = inst_18612__$1;
                    return statearr_18681;
                  }();
                  if (inst_18613) {
                    var statearr_18682_18727 = state_18678__$1;
                    statearr_18682_18727[1] = 2;
                  } else {
                    var statearr_18683_18728 = state_18678__$1;
                    statearr_18683_18728[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18679 === 24) {
                    var inst_18630 = state_18678[10];
                    var inst_18622 = inst_18630;
                    var state_18678__$1 = function() {
                      var statearr_18684 = state_18678;
                      statearr_18684[7] = inst_18622;
                      return statearr_18684;
                    }();
                    var statearr_18685_18729 = state_18678__$1;
                    statearr_18685_18729[2] = null;
                    statearr_18685_18729[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18679 === 4) {
                      var inst_18612 = state_18678[9];
                      var inst_18618 = state_18678[2];
                      var inst_18619 = cljs.core.get.call(null, inst_18618, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_18620 = cljs.core.get.call(null, inst_18618, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_18621 = cljs.core.get.call(null, inst_18618, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_18622 = inst_18612;
                      var state_18678__$1 = function() {
                        var statearr_18686 = state_18678;
                        statearr_18686[11] = inst_18621;
                        statearr_18686[7] = inst_18622;
                        statearr_18686[12] = inst_18620;
                        statearr_18686[13] = inst_18619;
                        return statearr_18686;
                      }();
                      var statearr_18687_18730 = state_18678__$1;
                      statearr_18687_18730[2] = null;
                      statearr_18687_18730[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18679 === 15) {
                        var state_18678__$1 = state_18678;
                        var statearr_18688_18731 = state_18678__$1;
                        statearr_18688_18731[2] = null;
                        statearr_18688_18731[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18679 === 21) {
                          var inst_18630 = state_18678[10];
                          var inst_18622 = inst_18630;
                          var state_18678__$1 = function() {
                            var statearr_18689 = state_18678;
                            statearr_18689[7] = inst_18622;
                            return statearr_18689;
                          }();
                          var statearr_18690_18732 = state_18678__$1;
                          statearr_18690_18732[2] = null;
                          statearr_18690_18732[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18679 === 13) {
                            var inst_18674 = state_18678[2];
                            var state_18678__$1 = state_18678;
                            var statearr_18691_18733 = state_18678__$1;
                            statearr_18691_18733[2] = inst_18674;
                            statearr_18691_18733[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18679 === 22) {
                              var inst_18672 = state_18678[2];
                              var state_18678__$1 = state_18678;
                              var statearr_18692_18734 = state_18678__$1;
                              statearr_18692_18734[2] = inst_18672;
                              statearr_18692_18734[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18679 === 6) {
                                var inst_18676 = state_18678[2];
                                var state_18678__$1 = state_18678;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18678__$1, inst_18676);
                              } else {
                                if (state_val_18679 === 25) {
                                  var state_18678__$1 = state_18678;
                                  var statearr_18693_18735 = state_18678__$1;
                                  statearr_18693_18735[2] = null;
                                  statearr_18693_18735[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18679 === 17) {
                                    var inst_18652 = state_18678[14];
                                    var state_18678__$1 = state_18678;
                                    var statearr_18694_18736 = state_18678__$1;
                                    statearr_18694_18736[2] = inst_18652;
                                    statearr_18694_18736[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18679 === 3) {
                                      var inst_18612 = state_18678[9];
                                      var state_18678__$1 = state_18678;
                                      var statearr_18695_18737 = state_18678__$1;
                                      statearr_18695_18737[2] = inst_18612;
                                      statearr_18695_18737[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18679 === 12) {
                                        var inst_18633 = state_18678[15];
                                        var inst_18652 = state_18678[14];
                                        var inst_18638 = state_18678[16];
                                        var inst_18652__$1 = inst_18633.call(null, inst_18638);
                                        var state_18678__$1 = function() {
                                          var statearr_18696 = state_18678;
                                          statearr_18696[14] = inst_18652__$1;
                                          return statearr_18696;
                                        }();
                                        if (cljs.core.truth_(inst_18652__$1)) {
                                          var statearr_18697_18738 = state_18678__$1;
                                          statearr_18697_18738[1] = 17;
                                        } else {
                                          var statearr_18698_18739 = state_18678__$1;
                                          statearr_18698_18739[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18679 === 2) {
                                          var inst_18612 = state_18678[9];
                                          var inst_18615 = cljs.core.apply.call(null, cljs.core.hash_map, inst_18612);
                                          var state_18678__$1 = state_18678;
                                          var statearr_18699_18740 = state_18678__$1;
                                          statearr_18699_18740[2] = inst_18615;
                                          statearr_18699_18740[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18679 === 23) {
                                            var inst_18663 = state_18678[2];
                                            var state_18678__$1 = state_18678;
                                            if (cljs.core.truth_(inst_18663)) {
                                              var statearr_18700_18741 = state_18678__$1;
                                              statearr_18700_18741[1] = 24;
                                            } else {
                                              var statearr_18701_18742 = state_18678__$1;
                                              statearr_18701_18742[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18679 === 19) {
                                              var inst_18660 = state_18678[2];
                                              var state_18678__$1 = state_18678;
                                              if (cljs.core.truth_(inst_18660)) {
                                                var statearr_18702_18743 = state_18678__$1;
                                                statearr_18702_18743[1] = 20;
                                              } else {
                                                var statearr_18703_18744 = state_18678__$1;
                                                statearr_18703_18744[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18679 === 11) {
                                                var inst_18637 = state_18678[8];
                                                var inst_18643 = inst_18637 == null;
                                                var state_18678__$1 = state_18678;
                                                if (cljs.core.truth_(inst_18643)) {
                                                  var statearr_18704_18745 = state_18678__$1;
                                                  statearr_18704_18745[1] = 14;
                                                } else {
                                                  var statearr_18705_18746 = state_18678__$1;
                                                  statearr_18705_18746[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18679 === 9) {
                                                  var inst_18630 = state_18678[10];
                                                  var inst_18630__$1 = state_18678[2];
                                                  var inst_18631 = cljs.core.get.call(null, inst_18630__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_18632 = cljs.core.get.call(null, inst_18630__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_18633 = cljs.core.get.call(null, inst_18630__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_18678__$1 = function() {
                                                    var statearr_18706 = state_18678;
                                                    statearr_18706[15] = inst_18633;
                                                    statearr_18706[17] = inst_18632;
                                                    statearr_18706[10] = inst_18630__$1;
                                                    return statearr_18706;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_18678__$1, 10, inst_18631);
                                                } else {
                                                  if (state_val_18679 === 5) {
                                                    var inst_18622 = state_18678[7];
                                                    var inst_18625 = cljs.core.seq_QMARK_.call(null, inst_18622);
                                                    var state_18678__$1 = state_18678;
                                                    if (inst_18625) {
                                                      var statearr_18707_18747 = state_18678__$1;
                                                      statearr_18707_18747[1] = 7;
                                                    } else {
                                                      var statearr_18708_18748 = state_18678__$1;
                                                      statearr_18708_18748[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18679 === 14) {
                                                      var inst_18638 = state_18678[16];
                                                      var inst_18645 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_18638);
                                                      var state_18678__$1 = state_18678;
                                                      var statearr_18709_18749 = state_18678__$1;
                                                      statearr_18709_18749[2] = inst_18645;
                                                      statearr_18709_18749[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18679 === 26) {
                                                        var inst_18668 = state_18678[2];
                                                        var state_18678__$1 = state_18678;
                                                        var statearr_18710_18750 = state_18678__$1;
                                                        statearr_18710_18750[2] = inst_18668;
                                                        statearr_18710_18750[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18679 === 16) {
                                                          var inst_18648 = state_18678[2];
                                                          var inst_18649 = calc_state.call(null);
                                                          var inst_18622 = inst_18649;
                                                          var state_18678__$1 = function() {
                                                            var statearr_18711 = state_18678;
                                                            statearr_18711[7] = inst_18622;
                                                            statearr_18711[18] = inst_18648;
                                                            return statearr_18711;
                                                          }();
                                                          var statearr_18712_18751 = state_18678__$1;
                                                          statearr_18712_18751[2] = null;
                                                          statearr_18712_18751[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18679 === 10) {
                                                            var inst_18637 = state_18678[8];
                                                            var inst_18638 = state_18678[16];
                                                            var inst_18636 = state_18678[2];
                                                            var inst_18637__$1 = cljs.core.nth.call(null, inst_18636, 0, null);
                                                            var inst_18638__$1 = cljs.core.nth.call(null, inst_18636, 1, null);
                                                            var inst_18639 = inst_18637__$1 == null;
                                                            var inst_18640 = cljs.core._EQ_.call(null, inst_18638__$1, change);
                                                            var inst_18641 = inst_18639 || inst_18640;
                                                            var state_18678__$1 = function() {
                                                              var statearr_18713 = state_18678;
                                                              statearr_18713[8] = inst_18637__$1;
                                                              statearr_18713[16] = inst_18638__$1;
                                                              return statearr_18713;
                                                            }();
                                                            if (cljs.core.truth_(inst_18641)) {
                                                              var statearr_18714_18752 = state_18678__$1;
                                                              statearr_18714_18752[1] = 11;
                                                            } else {
                                                              var statearr_18715_18753 = state_18678__$1;
                                                              statearr_18715_18753[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18679 === 18) {
                                                              var inst_18633 = state_18678[15];
                                                              var inst_18638 = state_18678[16];
                                                              var inst_18632 = state_18678[17];
                                                              var inst_18655 = cljs.core.empty_QMARK_.call(null, inst_18633);
                                                              var inst_18656 = inst_18632.call(null, inst_18638);
                                                              var inst_18657 = cljs.core.not.call(null, inst_18656);
                                                              var inst_18658 = inst_18655 && inst_18657;
                                                              var state_18678__$1 = state_18678;
                                                              var statearr_18716_18754 = state_18678__$1;
                                                              statearr_18716_18754[2] = inst_18658;
                                                              statearr_18716_18754[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18679 === 8) {
                                                                var inst_18622 = state_18678[7];
                                                                var state_18678__$1 = state_18678;
                                                                var statearr_18717_18755 = state_18678__$1;
                                                                statearr_18717_18755[2] = inst_18622;
                                                                statearr_18717_18755[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto___18725, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7957__auto__, c__8013__auto___18725, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_18721 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18721[0] = state_machine__7958__auto__;
              statearr_18721[1] = 1;
              return statearr_18721;
            };
            var state_machine__7958__auto____1 = function(state_18678) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_18678);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e18722) {
                    if (e18722 instanceof Object) {
                      var ex__7961__auto__ = e18722;
                      var statearr_18723_18756 = state_18678;
                      statearr_18723_18756[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18678);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e18722;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18757 = state_18678;
                  state_18678 = G__18757;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_18678) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_18678);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto___18725, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__8015__auto__ = function() {
        var statearr_18724 = f__8014__auto__.call(null);
        statearr_18724[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___18725;
        return statearr_18724;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto___18725, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj18759 = {};
  return obj18759;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4213__auto__ = p;
    if (and__4213__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4869__auto__ = p == null ? null : p;
    return function() {
      var or__4225__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4213__auto__ = p;
    if (and__4213__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4869__auto__ = p == null ? null : p;
    return function() {
      var or__4225__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__4213__auto__ = p;
      if (and__4213__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4869__auto__ = p == null ? null : p;
      return function() {
        var or__4225__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4869__auto__)];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__4213__auto__ = p;
      if (and__4213__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__4213__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4869__auto__ = p == null ? null : p;
      return function() {
        var or__4225__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4869__auto__)];
        if (or__4225__auto__) {
          return or__4225__auto__;
        } else {
          var or__4225__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__4225__auto____$1) {
            return or__4225__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__4225__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__4225__auto__)) {
          return or__4225__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4225__auto__, mults) {
            return function(p1__18760_SHARP_) {
              if (cljs.core.truth_(p1__18760_SHARP_.call(null, topic))) {
                return p1__18760_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__18760_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__4225__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t18883 !== "undefined") {
      } else {
        cljs.core.async.t18883 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta18884) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta18884 = meta18884;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t18883.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t18883.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t18883.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_18885) {
            var self__ = this;
            var _18885__$1 = this;
            return self__.meta18884;
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_18885, meta18884__$1) {
            var self__ = this;
            var _18885__$1 = this;
            return new cljs.core.async.t18883(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta18884__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t18883.cljs$lang$type = true;
        cljs.core.async.t18883.cljs$lang$ctorStr = "cljs.core.async/t18883";
        cljs.core.async.t18883.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
            return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t18883");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t18883 = function(mults, ensure_mult) {
          return function __GT_t18883(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18884) {
            return new cljs.core.async.t18883(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta18884);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t18883(ensure_mult, mults, buf_fn, topic_fn, ch, pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__8013__auto___19005 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___19005, mults, ensure_mult, p) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___19005, mults, ensure_mult, p) {
            return function(state_18957) {
              var state_val_18958 = state_18957[1];
              if (state_val_18958 === 7) {
                var inst_18953 = state_18957[2];
                var state_18957__$1 = state_18957;
                var statearr_18959_19006 = state_18957__$1;
                statearr_18959_19006[2] = inst_18953;
                statearr_18959_19006[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18958 === 20) {
                  var state_18957__$1 = state_18957;
                  var statearr_18960_19007 = state_18957__$1;
                  statearr_18960_19007[2] = null;
                  statearr_18960_19007[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18958 === 1) {
                    var state_18957__$1 = state_18957;
                    var statearr_18961_19008 = state_18957__$1;
                    statearr_18961_19008[2] = null;
                    statearr_18961_19008[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18958 === 24) {
                      var inst_18936 = state_18957[7];
                      var inst_18945 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_18936);
                      var state_18957__$1 = state_18957;
                      var statearr_18962_19009 = state_18957__$1;
                      statearr_18962_19009[2] = inst_18945;
                      statearr_18962_19009[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18958 === 4) {
                        var inst_18888 = state_18957[8];
                        var inst_18888__$1 = state_18957[2];
                        var inst_18889 = inst_18888__$1 == null;
                        var state_18957__$1 = function() {
                          var statearr_18963 = state_18957;
                          statearr_18963[8] = inst_18888__$1;
                          return statearr_18963;
                        }();
                        if (cljs.core.truth_(inst_18889)) {
                          var statearr_18964_19010 = state_18957__$1;
                          statearr_18964_19010[1] = 5;
                        } else {
                          var statearr_18965_19011 = state_18957__$1;
                          statearr_18965_19011[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18958 === 15) {
                          var inst_18930 = state_18957[2];
                          var state_18957__$1 = state_18957;
                          var statearr_18966_19012 = state_18957__$1;
                          statearr_18966_19012[2] = inst_18930;
                          statearr_18966_19012[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18958 === 21) {
                            var inst_18950 = state_18957[2];
                            var state_18957__$1 = function() {
                              var statearr_18967 = state_18957;
                              statearr_18967[9] = inst_18950;
                              return statearr_18967;
                            }();
                            var statearr_18968_19013 = state_18957__$1;
                            statearr_18968_19013[2] = null;
                            statearr_18968_19013[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18958 === 13) {
                              var inst_18912 = state_18957[10];
                              var inst_18914 = cljs.core.chunked_seq_QMARK_.call(null, inst_18912);
                              var state_18957__$1 = state_18957;
                              if (inst_18914) {
                                var statearr_18969_19014 = state_18957__$1;
                                statearr_18969_19014[1] = 16;
                              } else {
                                var statearr_18970_19015 = state_18957__$1;
                                statearr_18970_19015[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18958 === 22) {
                                var inst_18942 = state_18957[2];
                                var state_18957__$1 = state_18957;
                                if (cljs.core.truth_(inst_18942)) {
                                  var statearr_18971_19016 = state_18957__$1;
                                  statearr_18971_19016[1] = 23;
                                } else {
                                  var statearr_18972_19017 = state_18957__$1;
                                  statearr_18972_19017[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18958 === 6) {
                                  var inst_18936 = state_18957[7];
                                  var inst_18888 = state_18957[8];
                                  var inst_18938 = state_18957[11];
                                  var inst_18936__$1 = topic_fn.call(null, inst_18888);
                                  var inst_18937 = cljs.core.deref.call(null, mults);
                                  var inst_18938__$1 = cljs.core.get.call(null, inst_18937, inst_18936__$1);
                                  var state_18957__$1 = function() {
                                    var statearr_18973 = state_18957;
                                    statearr_18973[7] = inst_18936__$1;
                                    statearr_18973[11] = inst_18938__$1;
                                    return statearr_18973;
                                  }();
                                  if (cljs.core.truth_(inst_18938__$1)) {
                                    var statearr_18974_19018 = state_18957__$1;
                                    statearr_18974_19018[1] = 19;
                                  } else {
                                    var statearr_18975_19019 = state_18957__$1;
                                    statearr_18975_19019[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18958 === 25) {
                                    var inst_18947 = state_18957[2];
                                    var state_18957__$1 = state_18957;
                                    var statearr_18976_19020 = state_18957__$1;
                                    statearr_18976_19020[2] = inst_18947;
                                    statearr_18976_19020[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18958 === 17) {
                                      var inst_18912 = state_18957[10];
                                      var inst_18921 = cljs.core.first.call(null, inst_18912);
                                      var inst_18922 = cljs.core.async.muxch_STAR_.call(null, inst_18921);
                                      var inst_18923 = cljs.core.async.close_BANG_.call(null, inst_18922);
                                      var inst_18924 = cljs.core.next.call(null, inst_18912);
                                      var inst_18898 = inst_18924;
                                      var inst_18899 = null;
                                      var inst_18900 = 0;
                                      var inst_18901 = 0;
                                      var state_18957__$1 = function() {
                                        var statearr_18977 = state_18957;
                                        statearr_18977[12] = inst_18898;
                                        statearr_18977[13] = inst_18900;
                                        statearr_18977[14] = inst_18923;
                                        statearr_18977[15] = inst_18899;
                                        statearr_18977[16] = inst_18901;
                                        return statearr_18977;
                                      }();
                                      var statearr_18978_19021 = state_18957__$1;
                                      statearr_18978_19021[2] = null;
                                      statearr_18978_19021[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18958 === 3) {
                                        var inst_18955 = state_18957[2];
                                        var state_18957__$1 = state_18957;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18957__$1, inst_18955);
                                      } else {
                                        if (state_val_18958 === 12) {
                                          var inst_18932 = state_18957[2];
                                          var state_18957__$1 = state_18957;
                                          var statearr_18979_19022 = state_18957__$1;
                                          statearr_18979_19022[2] = inst_18932;
                                          statearr_18979_19022[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18958 === 2) {
                                            var state_18957__$1 = state_18957;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18957__$1, 4, ch);
                                          } else {
                                            if (state_val_18958 === 23) {
                                              var state_18957__$1 = state_18957;
                                              var statearr_18980_19023 = state_18957__$1;
                                              statearr_18980_19023[2] = null;
                                              statearr_18980_19023[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18958 === 19) {
                                                var inst_18888 = state_18957[8];
                                                var inst_18938 = state_18957[11];
                                                var inst_18940 = cljs.core.async.muxch_STAR_.call(null, inst_18938);
                                                var state_18957__$1 = state_18957;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18957__$1, 22, inst_18940, inst_18888);
                                              } else {
                                                if (state_val_18958 === 11) {
                                                  var inst_18898 = state_18957[12];
                                                  var inst_18912 = state_18957[10];
                                                  var inst_18912__$1 = cljs.core.seq.call(null, inst_18898);
                                                  var state_18957__$1 = function() {
                                                    var statearr_18981 = state_18957;
                                                    statearr_18981[10] = inst_18912__$1;
                                                    return statearr_18981;
                                                  }();
                                                  if (inst_18912__$1) {
                                                    var statearr_18982_19024 = state_18957__$1;
                                                    statearr_18982_19024[1] = 13;
                                                  } else {
                                                    var statearr_18983_19025 = state_18957__$1;
                                                    statearr_18983_19025[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18958 === 9) {
                                                    var inst_18934 = state_18957[2];
                                                    var state_18957__$1 = state_18957;
                                                    var statearr_18984_19026 = state_18957__$1;
                                                    statearr_18984_19026[2] = inst_18934;
                                                    statearr_18984_19026[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18958 === 5) {
                                                      var inst_18895 = cljs.core.deref.call(null, mults);
                                                      var inst_18896 = cljs.core.vals.call(null, inst_18895);
                                                      var inst_18897 = cljs.core.seq.call(null, inst_18896);
                                                      var inst_18898 = inst_18897;
                                                      var inst_18899 = null;
                                                      var inst_18900 = 0;
                                                      var inst_18901 = 0;
                                                      var state_18957__$1 = function() {
                                                        var statearr_18985 = state_18957;
                                                        statearr_18985[12] = inst_18898;
                                                        statearr_18985[13] = inst_18900;
                                                        statearr_18985[15] = inst_18899;
                                                        statearr_18985[16] = inst_18901;
                                                        return statearr_18985;
                                                      }();
                                                      var statearr_18986_19027 = state_18957__$1;
                                                      statearr_18986_19027[2] = null;
                                                      statearr_18986_19027[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_18958 === 14) {
                                                        var state_18957__$1 = state_18957;
                                                        var statearr_18990_19028 = state_18957__$1;
                                                        statearr_18990_19028[2] = null;
                                                        statearr_18990_19028[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_18958 === 16) {
                                                          var inst_18912 = state_18957[10];
                                                          var inst_18916 = cljs.core.chunk_first.call(null, inst_18912);
                                                          var inst_18917 = cljs.core.chunk_rest.call(null, inst_18912);
                                                          var inst_18918 = cljs.core.count.call(null, inst_18916);
                                                          var inst_18898 = inst_18917;
                                                          var inst_18899 = inst_18916;
                                                          var inst_18900 = inst_18918;
                                                          var inst_18901 = 0;
                                                          var state_18957__$1 = function() {
                                                            var statearr_18991 = state_18957;
                                                            statearr_18991[12] = inst_18898;
                                                            statearr_18991[13] = inst_18900;
                                                            statearr_18991[15] = inst_18899;
                                                            statearr_18991[16] = inst_18901;
                                                            return statearr_18991;
                                                          }();
                                                          var statearr_18992_19029 = state_18957__$1;
                                                          statearr_18992_19029[2] = null;
                                                          statearr_18992_19029[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_18958 === 10) {
                                                            var inst_18898 = state_18957[12];
                                                            var inst_18900 = state_18957[13];
                                                            var inst_18899 = state_18957[15];
                                                            var inst_18901 = state_18957[16];
                                                            var inst_18906 = cljs.core._nth.call(null, inst_18899, inst_18901);
                                                            var inst_18907 = cljs.core.async.muxch_STAR_.call(null, inst_18906);
                                                            var inst_18908 = cljs.core.async.close_BANG_.call(null, inst_18907);
                                                            var inst_18909 = inst_18901 + 1;
                                                            var tmp18987 = inst_18898;
                                                            var tmp18988 = inst_18900;
                                                            var tmp18989 = inst_18899;
                                                            var inst_18898__$1 = tmp18987;
                                                            var inst_18899__$1 = tmp18989;
                                                            var inst_18900__$1 = tmp18988;
                                                            var inst_18901__$1 = inst_18909;
                                                            var state_18957__$1 = function() {
                                                              var statearr_18993 = state_18957;
                                                              statearr_18993[12] = inst_18898__$1;
                                                              statearr_18993[13] = inst_18900__$1;
                                                              statearr_18993[15] = inst_18899__$1;
                                                              statearr_18993[16] = inst_18901__$1;
                                                              statearr_18993[17] = inst_18908;
                                                              return statearr_18993;
                                                            }();
                                                            var statearr_18994_19030 = state_18957__$1;
                                                            statearr_18994_19030[2] = null;
                                                            statearr_18994_19030[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_18958 === 18) {
                                                              var inst_18927 = state_18957[2];
                                                              var state_18957__$1 = state_18957;
                                                              var statearr_18995_19031 = state_18957__$1;
                                                              statearr_18995_19031[2] = inst_18927;
                                                              statearr_18995_19031[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_18958 === 8) {
                                                                var inst_18900 = state_18957[13];
                                                                var inst_18901 = state_18957[16];
                                                                var inst_18903 = inst_18901 < inst_18900;
                                                                var inst_18904 = inst_18903;
                                                                var state_18957__$1 = state_18957;
                                                                if (cljs.core.truth_(inst_18904)) {
                                                                  var statearr_18996_19032 = state_18957__$1;
                                                                  statearr_18996_19032[1] = 10;
                                                                } else {
                                                                  var statearr_18997_19033 = state_18957__$1;
                                                                  statearr_18997_19033[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___19005, mults, ensure_mult, p);
          return function(switch__7957__auto__, c__8013__auto___19005, mults, ensure_mult, p) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_19001 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19001[0] = state_machine__7958__auto__;
                statearr_19001[1] = 1;
                return statearr_19001;
              };
              var state_machine__7958__auto____1 = function(state_18957) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_18957);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e19002) {
                      if (e19002 instanceof Object) {
                        var ex__7961__auto__ = e19002;
                        var statearr_19003_19034 = state_18957;
                        statearr_19003_19034[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18957);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19002;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19035 = state_18957;
                    state_18957 = G__19035;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_18957) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_18957);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___19005, mults, ensure_mult, p);
        }();
        var state__8015__auto__ = function() {
          var statearr_19004 = f__8014__auto__.call(null);
          statearr_19004[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___19005;
          return statearr_19004;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___19005, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__8013__auto___19172 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___19172, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___19172, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_19142) {
              var state_val_19143 = state_19142[1];
              if (state_val_19143 === 7) {
                var state_19142__$1 = state_19142;
                var statearr_19144_19173 = state_19142__$1;
                statearr_19144_19173[2] = null;
                statearr_19144_19173[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19143 === 1) {
                  var state_19142__$1 = state_19142;
                  var statearr_19145_19174 = state_19142__$1;
                  statearr_19145_19174[2] = null;
                  statearr_19145_19174[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19143 === 4) {
                    var inst_19106 = state_19142[7];
                    var inst_19108 = inst_19106 < cnt;
                    var state_19142__$1 = state_19142;
                    if (cljs.core.truth_(inst_19108)) {
                      var statearr_19146_19175 = state_19142__$1;
                      statearr_19146_19175[1] = 6;
                    } else {
                      var statearr_19147_19176 = state_19142__$1;
                      statearr_19147_19176[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19143 === 15) {
                      var inst_19138 = state_19142[2];
                      var state_19142__$1 = state_19142;
                      var statearr_19148_19177 = state_19142__$1;
                      statearr_19148_19177[2] = inst_19138;
                      statearr_19148_19177[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19143 === 13) {
                        var inst_19131 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19142__$1 = state_19142;
                        var statearr_19149_19178 = state_19142__$1;
                        statearr_19149_19178[2] = inst_19131;
                        statearr_19149_19178[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19143 === 6) {
                          var state_19142__$1 = state_19142;
                          var statearr_19150_19179 = state_19142__$1;
                          statearr_19150_19179[2] = null;
                          statearr_19150_19179[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19143 === 3) {
                            var inst_19140 = state_19142[2];
                            var state_19142__$1 = state_19142;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19142__$1, inst_19140);
                          } else {
                            if (state_val_19143 === 12) {
                              var inst_19128 = state_19142[8];
                              var inst_19128__$1 = state_19142[2];
                              var inst_19129 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_19128__$1);
                              var state_19142__$1 = function() {
                                var statearr_19151 = state_19142;
                                statearr_19151[8] = inst_19128__$1;
                                return statearr_19151;
                              }();
                              if (cljs.core.truth_(inst_19129)) {
                                var statearr_19152_19180 = state_19142__$1;
                                statearr_19152_19180[1] = 13;
                              } else {
                                var statearr_19153_19181 = state_19142__$1;
                                statearr_19153_19181[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19143 === 2) {
                                var inst_19105 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_19106 = 0;
                                var state_19142__$1 = function() {
                                  var statearr_19154 = state_19142;
                                  statearr_19154[9] = inst_19105;
                                  statearr_19154[7] = inst_19106;
                                  return statearr_19154;
                                }();
                                var statearr_19155_19182 = state_19142__$1;
                                statearr_19155_19182[2] = null;
                                statearr_19155_19182[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19143 === 11) {
                                  var inst_19106 = state_19142[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_19142, 10, Object, null, 9);
                                  var inst_19115 = chs__$1.call(null, inst_19106);
                                  var inst_19116 = done.call(null, inst_19106);
                                  var inst_19117 = cljs.core.async.take_BANG_.call(null, inst_19115, inst_19116);
                                  var state_19142__$1 = state_19142;
                                  var statearr_19156_19183 = state_19142__$1;
                                  statearr_19156_19183[2] = inst_19117;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19142__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19143 === 9) {
                                    var inst_19106 = state_19142[7];
                                    var inst_19119 = state_19142[2];
                                    var inst_19120 = inst_19106 + 1;
                                    var inst_19106__$1 = inst_19120;
                                    var state_19142__$1 = function() {
                                      var statearr_19157 = state_19142;
                                      statearr_19157[10] = inst_19119;
                                      statearr_19157[7] = inst_19106__$1;
                                      return statearr_19157;
                                    }();
                                    var statearr_19158_19184 = state_19142__$1;
                                    statearr_19158_19184[2] = null;
                                    statearr_19158_19184[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19143 === 5) {
                                      var inst_19126 = state_19142[2];
                                      var state_19142__$1 = function() {
                                        var statearr_19159 = state_19142;
                                        statearr_19159[11] = inst_19126;
                                        return statearr_19159;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19142__$1, 12, dchan);
                                    } else {
                                      if (state_val_19143 === 14) {
                                        var inst_19128 = state_19142[8];
                                        var inst_19133 = cljs.core.apply.call(null, f, inst_19128);
                                        var state_19142__$1 = state_19142;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19142__$1, 16, out, inst_19133);
                                      } else {
                                        if (state_val_19143 === 16) {
                                          var inst_19135 = state_19142[2];
                                          var state_19142__$1 = function() {
                                            var statearr_19160 = state_19142;
                                            statearr_19160[12] = inst_19135;
                                            return statearr_19160;
                                          }();
                                          var statearr_19161_19185 = state_19142__$1;
                                          statearr_19161_19185[2] = null;
                                          statearr_19161_19185[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19143 === 10) {
                                            var inst_19110 = state_19142[2];
                                            var inst_19111 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_19142__$1 = function() {
                                              var statearr_19162 = state_19142;
                                              statearr_19162[13] = inst_19110;
                                              return statearr_19162;
                                            }();
                                            var statearr_19163_19186 = state_19142__$1;
                                            statearr_19163_19186[2] = inst_19111;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19142__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19143 === 8) {
                                              var inst_19124 = state_19142[2];
                                              var state_19142__$1 = state_19142;
                                              var statearr_19164_19187 = state_19142__$1;
                                              statearr_19164_19187[2] = inst_19124;
                                              statearr_19164_19187[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___19172, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__7957__auto__, c__8013__auto___19172, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_19168 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19168[0] = state_machine__7958__auto__;
                statearr_19168[1] = 1;
                return statearr_19168;
              };
              var state_machine__7958__auto____1 = function(state_19142) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_19142);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e19169) {
                      if (e19169 instanceof Object) {
                        var ex__7961__auto__ = e19169;
                        var statearr_19170_19188 = state_19142;
                        statearr_19170_19188[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19142);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19169;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19189 = state_19142;
                    state_19142 = G__19189;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_19142) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_19142);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___19172, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__8015__auto__ = function() {
          var statearr_19171 = f__8014__auto__.call(null);
          statearr_19171[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___19172;
          return statearr_19171;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___19172, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__8013__auto___19297 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___19297, out) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___19297, out) {
            return function(state_19273) {
              var state_val_19274 = state_19273[1];
              if (state_val_19274 === 7) {
                var inst_19253 = state_19273[7];
                var inst_19252 = state_19273[8];
                var inst_19252__$1 = state_19273[2];
                var inst_19253__$1 = cljs.core.nth.call(null, inst_19252__$1, 0, null);
                var inst_19254 = cljs.core.nth.call(null, inst_19252__$1, 1, null);
                var inst_19255 = inst_19253__$1 == null;
                var state_19273__$1 = function() {
                  var statearr_19275 = state_19273;
                  statearr_19275[9] = inst_19254;
                  statearr_19275[7] = inst_19253__$1;
                  statearr_19275[8] = inst_19252__$1;
                  return statearr_19275;
                }();
                if (cljs.core.truth_(inst_19255)) {
                  var statearr_19276_19298 = state_19273__$1;
                  statearr_19276_19298[1] = 8;
                } else {
                  var statearr_19277_19299 = state_19273__$1;
                  statearr_19277_19299[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19274 === 1) {
                  var inst_19244 = cljs.core.vec.call(null, chs);
                  var inst_19245 = inst_19244;
                  var state_19273__$1 = function() {
                    var statearr_19278 = state_19273;
                    statearr_19278[10] = inst_19245;
                    return statearr_19278;
                  }();
                  var statearr_19279_19300 = state_19273__$1;
                  statearr_19279_19300[2] = null;
                  statearr_19279_19300[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19274 === 4) {
                    var inst_19245 = state_19273[10];
                    var state_19273__$1 = state_19273;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_19273__$1, 7, inst_19245);
                  } else {
                    if (state_val_19274 === 6) {
                      var inst_19269 = state_19273[2];
                      var state_19273__$1 = state_19273;
                      var statearr_19280_19301 = state_19273__$1;
                      statearr_19280_19301[2] = inst_19269;
                      statearr_19280_19301[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19274 === 3) {
                        var inst_19271 = state_19273[2];
                        var state_19273__$1 = state_19273;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19273__$1, inst_19271);
                      } else {
                        if (state_val_19274 === 2) {
                          var inst_19245 = state_19273[10];
                          var inst_19247 = cljs.core.count.call(null, inst_19245);
                          var inst_19248 = inst_19247 > 0;
                          var state_19273__$1 = state_19273;
                          if (cljs.core.truth_(inst_19248)) {
                            var statearr_19282_19302 = state_19273__$1;
                            statearr_19282_19302[1] = 4;
                          } else {
                            var statearr_19283_19303 = state_19273__$1;
                            statearr_19283_19303[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19274 === 11) {
                            var inst_19245 = state_19273[10];
                            var inst_19262 = state_19273[2];
                            var tmp19281 = inst_19245;
                            var inst_19245__$1 = tmp19281;
                            var state_19273__$1 = function() {
                              var statearr_19284 = state_19273;
                              statearr_19284[11] = inst_19262;
                              statearr_19284[10] = inst_19245__$1;
                              return statearr_19284;
                            }();
                            var statearr_19285_19304 = state_19273__$1;
                            statearr_19285_19304[2] = null;
                            statearr_19285_19304[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19274 === 9) {
                              var inst_19253 = state_19273[7];
                              var state_19273__$1 = state_19273;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19273__$1, 11, out, inst_19253);
                            } else {
                              if (state_val_19274 === 5) {
                                var inst_19267 = cljs.core.async.close_BANG_.call(null, out);
                                var state_19273__$1 = state_19273;
                                var statearr_19286_19305 = state_19273__$1;
                                statearr_19286_19305[2] = inst_19267;
                                statearr_19286_19305[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19274 === 10) {
                                  var inst_19265 = state_19273[2];
                                  var state_19273__$1 = state_19273;
                                  var statearr_19287_19306 = state_19273__$1;
                                  statearr_19287_19306[2] = inst_19265;
                                  statearr_19287_19306[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19274 === 8) {
                                    var inst_19254 = state_19273[9];
                                    var inst_19253 = state_19273[7];
                                    var inst_19245 = state_19273[10];
                                    var inst_19252 = state_19273[8];
                                    var inst_19257 = function() {
                                      var c = inst_19254;
                                      var v = inst_19253;
                                      var vec__19250 = inst_19252;
                                      var cs = inst_19245;
                                      return function(c, v, vec__19250, cs, inst_19254, inst_19253, inst_19245, inst_19252, state_val_19274, c__8013__auto___19297, out) {
                                        return function(p1__19190_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__19190_SHARP_);
                                        };
                                      }(c, v, vec__19250, cs, inst_19254, inst_19253, inst_19245, inst_19252, state_val_19274, c__8013__auto___19297, out);
                                    }();
                                    var inst_19258 = cljs.core.filterv.call(null, inst_19257, inst_19245);
                                    var inst_19245__$1 = inst_19258;
                                    var state_19273__$1 = function() {
                                      var statearr_19288 = state_19273;
                                      statearr_19288[10] = inst_19245__$1;
                                      return statearr_19288;
                                    }();
                                    var statearr_19289_19307 = state_19273__$1;
                                    statearr_19289_19307[2] = null;
                                    statearr_19289_19307[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___19297, out);
          return function(switch__7957__auto__, c__8013__auto___19297, out) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_19293 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_19293[0] = state_machine__7958__auto__;
                statearr_19293[1] = 1;
                return statearr_19293;
              };
              var state_machine__7958__auto____1 = function(state_19273) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_19273);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e19294) {
                      if (e19294 instanceof Object) {
                        var ex__7961__auto__ = e19294;
                        var statearr_19295_19308 = state_19273;
                        statearr_19295_19308[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19273);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19294;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19309 = state_19273;
                    state_19273 = G__19309;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_19273) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_19273);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___19297, out);
        }();
        var state__8015__auto__ = function() {
          var statearr_19296 = f__8014__auto__.call(null);
          statearr_19296[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___19297;
          return statearr_19296;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___19297, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__8013__auto___19402 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___19402, out) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___19402, out) {
            return function(state_19379) {
              var state_val_19380 = state_19379[1];
              if (state_val_19380 === 7) {
                var inst_19361 = state_19379[7];
                var inst_19361__$1 = state_19379[2];
                var inst_19362 = inst_19361__$1 == null;
                var inst_19363 = cljs.core.not.call(null, inst_19362);
                var state_19379__$1 = function() {
                  var statearr_19381 = state_19379;
                  statearr_19381[7] = inst_19361__$1;
                  return statearr_19381;
                }();
                if (inst_19363) {
                  var statearr_19382_19403 = state_19379__$1;
                  statearr_19382_19403[1] = 8;
                } else {
                  var statearr_19383_19404 = state_19379__$1;
                  statearr_19383_19404[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19380 === 1) {
                  var inst_19356 = 0;
                  var state_19379__$1 = function() {
                    var statearr_19384 = state_19379;
                    statearr_19384[8] = inst_19356;
                    return statearr_19384;
                  }();
                  var statearr_19385_19405 = state_19379__$1;
                  statearr_19385_19405[2] = null;
                  statearr_19385_19405[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19380 === 4) {
                    var state_19379__$1 = state_19379;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19379__$1, 7, ch);
                  } else {
                    if (state_val_19380 === 6) {
                      var inst_19374 = state_19379[2];
                      var state_19379__$1 = state_19379;
                      var statearr_19386_19406 = state_19379__$1;
                      statearr_19386_19406[2] = inst_19374;
                      statearr_19386_19406[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19380 === 3) {
                        var inst_19376 = state_19379[2];
                        var inst_19377 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19379__$1 = function() {
                          var statearr_19387 = state_19379;
                          statearr_19387[9] = inst_19376;
                          return statearr_19387;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19379__$1, inst_19377);
                      } else {
                        if (state_val_19380 === 2) {
                          var inst_19356 = state_19379[8];
                          var inst_19358 = inst_19356 < n;
                          var state_19379__$1 = state_19379;
                          if (cljs.core.truth_(inst_19358)) {
                            var statearr_19388_19407 = state_19379__$1;
                            statearr_19388_19407[1] = 4;
                          } else {
                            var statearr_19389_19408 = state_19379__$1;
                            statearr_19389_19408[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19380 === 11) {
                            var inst_19356 = state_19379[8];
                            var inst_19366 = state_19379[2];
                            var inst_19367 = inst_19356 + 1;
                            var inst_19356__$1 = inst_19367;
                            var state_19379__$1 = function() {
                              var statearr_19390 = state_19379;
                              statearr_19390[8] = inst_19356__$1;
                              statearr_19390[10] = inst_19366;
                              return statearr_19390;
                            }();
                            var statearr_19391_19409 = state_19379__$1;
                            statearr_19391_19409[2] = null;
                            statearr_19391_19409[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19380 === 9) {
                              var state_19379__$1 = state_19379;
                              var statearr_19392_19410 = state_19379__$1;
                              statearr_19392_19410[2] = null;
                              statearr_19392_19410[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19380 === 5) {
                                var state_19379__$1 = state_19379;
                                var statearr_19393_19411 = state_19379__$1;
                                statearr_19393_19411[2] = null;
                                statearr_19393_19411[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19380 === 10) {
                                  var inst_19371 = state_19379[2];
                                  var state_19379__$1 = state_19379;
                                  var statearr_19394_19412 = state_19379__$1;
                                  statearr_19394_19412[2] = inst_19371;
                                  statearr_19394_19412[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19380 === 8) {
                                    var inst_19361 = state_19379[7];
                                    var state_19379__$1 = state_19379;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19379__$1, 11, out, inst_19361);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___19402, out);
          return function(switch__7957__auto__, c__8013__auto___19402, out) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_19398 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19398[0] = state_machine__7958__auto__;
                statearr_19398[1] = 1;
                return statearr_19398;
              };
              var state_machine__7958__auto____1 = function(state_19379) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_19379);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e19399) {
                      if (e19399 instanceof Object) {
                        var ex__7961__auto__ = e19399;
                        var statearr_19400_19413 = state_19379;
                        statearr_19400_19413[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19379);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19399;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19414 = state_19379;
                    state_19379 = G__19414;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_19379) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_19379);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___19402, out);
        }();
        var state__8015__auto__ = function() {
          var statearr_19401 = f__8014__auto__.call(null);
          statearr_19401[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___19402;
          return statearr_19401;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___19402, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t19422 !== "undefined") {
  } else {
    cljs.core.async.t19422 = function(ch, f, map_LT_, meta19423) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta19423 = meta19423;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t19425 !== "undefined") {
        } else {
          cljs.core.async.t19425 = function(fn1, _, meta19423, map_LT_, f, ch, meta19426) {
            this.fn1 = fn1;
            this._ = _;
            this.meta19423 = meta19423;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta19426 = meta19426;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t19425.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t19425.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t19425.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__19415_SHARP_) {
                  return f1.call(null, p1__19415_SHARP_ == null ? null : self__.f.call(null, p1__19415_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t19425.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_19427) {
              var self__ = this;
              var _19427__$1 = this;
              return self__.meta19426;
            };
          }(___$1);
          cljs.core.async.t19425.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_19427, meta19426__$1) {
              var self__ = this;
              var _19427__$1 = this;
              return new cljs.core.async.t19425(self__.fn1, self__._, self__.meta19423, self__.map_LT_, self__.f, self__.ch, meta19426__$1);
            };
          }(___$1);
          cljs.core.async.t19425.cljs$lang$type = true;
          cljs.core.async.t19425.cljs$lang$ctorStr = "cljs.core.async/t19425";
          cljs.core.async.t19425.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
              return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t19425");
            };
          }(___$1);
          cljs.core.async.__GT_t19425 = function(___$1) {
            return function __GT_t19425(fn1__$1, ___$2, meta19423__$1, map_LT___$1, f__$1, ch__$1, meta19426) {
              return new cljs.core.async.t19425(fn1__$1, ___$2, meta19423__$1, map_LT___$1, f__$1, ch__$1, meta19426);
            };
          }(___$1);
        }
        return new cljs.core.async.t19425(fn1, ___$1, self__.meta19423, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4213__auto__ = ret;
        if (cljs.core.truth_(and__4213__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4213__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t19422.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t19422.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19424) {
      var self__ = this;
      var _19424__$1 = this;
      return self__.meta19423;
    };
    cljs.core.async.t19422.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19424, meta19423__$1) {
      var self__ = this;
      var _19424__$1 = this;
      return new cljs.core.async.t19422(self__.ch, self__.f, self__.map_LT_, meta19423__$1);
    };
    cljs.core.async.t19422.cljs$lang$type = true;
    cljs.core.async.t19422.cljs$lang$ctorStr = "cljs.core.async/t19422";
    cljs.core.async.t19422.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t19422");
    };
    cljs.core.async.__GT_t19422 = function __GT_t19422(ch__$1, f__$1, map_LT___$1, meta19423) {
      return new cljs.core.async.t19422(ch__$1, f__$1, map_LT___$1, meta19423);
    };
  }
  return new cljs.core.async.t19422(ch, f, map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t19431 !== "undefined") {
  } else {
    cljs.core.async.t19431 = function(ch, f, map_GT_, meta19432) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta19432 = meta19432;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19431.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t19431.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t19431.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t19431.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t19431.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t19431.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t19431.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19433) {
      var self__ = this;
      var _19433__$1 = this;
      return self__.meta19432;
    };
    cljs.core.async.t19431.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19433, meta19432__$1) {
      var self__ = this;
      var _19433__$1 = this;
      return new cljs.core.async.t19431(self__.ch, self__.f, self__.map_GT_, meta19432__$1);
    };
    cljs.core.async.t19431.cljs$lang$type = true;
    cljs.core.async.t19431.cljs$lang$ctorStr = "cljs.core.async/t19431";
    cljs.core.async.t19431.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t19431");
    };
    cljs.core.async.__GT_t19431 = function __GT_t19431(ch__$1, f__$1, map_GT___$1, meta19432) {
      return new cljs.core.async.t19431(ch__$1, f__$1, map_GT___$1, meta19432);
    };
  }
  return new cljs.core.async.t19431(ch, f, map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t19437 !== "undefined") {
  } else {
    cljs.core.async.t19437 = function(ch, p, filter_GT_, meta19438) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta19438 = meta19438;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t19437.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t19437.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19439) {
      var self__ = this;
      var _19439__$1 = this;
      return self__.meta19438;
    };
    cljs.core.async.t19437.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19439, meta19438__$1) {
      var self__ = this;
      var _19439__$1 = this;
      return new cljs.core.async.t19437(self__.ch, self__.p, self__.filter_GT_, meta19438__$1);
    };
    cljs.core.async.t19437.cljs$lang$type = true;
    cljs.core.async.t19437.cljs$lang$ctorStr = "cljs.core.async/t19437";
    cljs.core.async.t19437.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
      return cljs.core._write.call(null, writer__4813__auto__, "cljs.core.async/t19437");
    };
    cljs.core.async.__GT_t19437 = function __GT_t19437(ch__$1, p__$1, filter_GT___$1, meta19438) {
      return new cljs.core.async.t19437(ch__$1, p__$1, filter_GT___$1, meta19438);
    };
  }
  return new cljs.core.async.t19437(ch, p, filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__8013__auto___19522 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___19522, out) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___19522, out) {
            return function(state_19501) {
              var state_val_19502 = state_19501[1];
              if (state_val_19502 === 7) {
                var inst_19497 = state_19501[2];
                var state_19501__$1 = state_19501;
                var statearr_19503_19523 = state_19501__$1;
                statearr_19503_19523[2] = inst_19497;
                statearr_19503_19523[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19502 === 1) {
                  var state_19501__$1 = state_19501;
                  var statearr_19504_19524 = state_19501__$1;
                  statearr_19504_19524[2] = null;
                  statearr_19504_19524[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19502 === 4) {
                    var inst_19483 = state_19501[7];
                    var inst_19483__$1 = state_19501[2];
                    var inst_19484 = inst_19483__$1 == null;
                    var state_19501__$1 = function() {
                      var statearr_19505 = state_19501;
                      statearr_19505[7] = inst_19483__$1;
                      return statearr_19505;
                    }();
                    if (cljs.core.truth_(inst_19484)) {
                      var statearr_19506_19525 = state_19501__$1;
                      statearr_19506_19525[1] = 5;
                    } else {
                      var statearr_19507_19526 = state_19501__$1;
                      statearr_19507_19526[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19502 === 6) {
                      var inst_19483 = state_19501[7];
                      var inst_19488 = p.call(null, inst_19483);
                      var state_19501__$1 = state_19501;
                      if (cljs.core.truth_(inst_19488)) {
                        var statearr_19508_19527 = state_19501__$1;
                        statearr_19508_19527[1] = 8;
                      } else {
                        var statearr_19509_19528 = state_19501__$1;
                        statearr_19509_19528[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19502 === 3) {
                        var inst_19499 = state_19501[2];
                        var state_19501__$1 = state_19501;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19501__$1, inst_19499);
                      } else {
                        if (state_val_19502 === 2) {
                          var state_19501__$1 = state_19501;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19501__$1, 4, ch);
                        } else {
                          if (state_val_19502 === 11) {
                            var inst_19491 = state_19501[2];
                            var state_19501__$1 = state_19501;
                            var statearr_19510_19529 = state_19501__$1;
                            statearr_19510_19529[2] = inst_19491;
                            statearr_19510_19529[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19502 === 9) {
                              var state_19501__$1 = state_19501;
                              var statearr_19511_19530 = state_19501__$1;
                              statearr_19511_19530[2] = null;
                              statearr_19511_19530[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19502 === 5) {
                                var inst_19486 = cljs.core.async.close_BANG_.call(null, out);
                                var state_19501__$1 = state_19501;
                                var statearr_19512_19531 = state_19501__$1;
                                statearr_19512_19531[2] = inst_19486;
                                statearr_19512_19531[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19502 === 10) {
                                  var inst_19494 = state_19501[2];
                                  var state_19501__$1 = function() {
                                    var statearr_19513 = state_19501;
                                    statearr_19513[8] = inst_19494;
                                    return statearr_19513;
                                  }();
                                  var statearr_19514_19532 = state_19501__$1;
                                  statearr_19514_19532[2] = null;
                                  statearr_19514_19532[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19502 === 8) {
                                    var inst_19483 = state_19501[7];
                                    var state_19501__$1 = state_19501;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19501__$1, 11, out, inst_19483);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___19522, out);
          return function(switch__7957__auto__, c__8013__auto___19522, out) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_19518 = [null, null, null, null, null, null, null, null, null];
                statearr_19518[0] = state_machine__7958__auto__;
                statearr_19518[1] = 1;
                return statearr_19518;
              };
              var state_machine__7958__auto____1 = function(state_19501) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_19501);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e19519) {
                      if (e19519 instanceof Object) {
                        var ex__7961__auto__ = e19519;
                        var statearr_19520_19533 = state_19501;
                        statearr_19520_19533[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19501);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19519;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19534 = state_19501;
                    state_19501 = G__19534;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_19501) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_19501);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___19522, out);
        }();
        var state__8015__auto__ = function() {
          var statearr_19521 = f__8014__auto__.call(null);
          statearr_19521[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___19522;
          return statearr_19521;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___19522, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__8013__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto__) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto__) {
          return function(state_19700) {
            var state_val_19701 = state_19700[1];
            if (state_val_19701 === 7) {
              var inst_19696 = state_19700[2];
              var state_19700__$1 = state_19700;
              var statearr_19702_19743 = state_19700__$1;
              statearr_19702_19743[2] = inst_19696;
              statearr_19702_19743[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19701 === 20) {
                var inst_19666 = state_19700[7];
                var inst_19677 = state_19700[2];
                var inst_19678 = cljs.core.next.call(null, inst_19666);
                var inst_19652 = inst_19678;
                var inst_19653 = null;
                var inst_19654 = 0;
                var inst_19655 = 0;
                var state_19700__$1 = function() {
                  var statearr_19703 = state_19700;
                  statearr_19703[8] = inst_19653;
                  statearr_19703[9] = inst_19655;
                  statearr_19703[10] = inst_19652;
                  statearr_19703[11] = inst_19654;
                  statearr_19703[12] = inst_19677;
                  return statearr_19703;
                }();
                var statearr_19704_19744 = state_19700__$1;
                statearr_19704_19744[2] = null;
                statearr_19704_19744[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19701 === 1) {
                  var state_19700__$1 = state_19700;
                  var statearr_19705_19745 = state_19700__$1;
                  statearr_19705_19745[2] = null;
                  statearr_19705_19745[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19701 === 4) {
                    var inst_19641 = state_19700[13];
                    var inst_19641__$1 = state_19700[2];
                    var inst_19642 = inst_19641__$1 == null;
                    var state_19700__$1 = function() {
                      var statearr_19706 = state_19700;
                      statearr_19706[13] = inst_19641__$1;
                      return statearr_19706;
                    }();
                    if (cljs.core.truth_(inst_19642)) {
                      var statearr_19707_19746 = state_19700__$1;
                      statearr_19707_19746[1] = 5;
                    } else {
                      var statearr_19708_19747 = state_19700__$1;
                      statearr_19708_19747[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19701 === 15) {
                      var state_19700__$1 = state_19700;
                      var statearr_19712_19748 = state_19700__$1;
                      statearr_19712_19748[2] = null;
                      statearr_19712_19748[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19701 === 21) {
                        var state_19700__$1 = state_19700;
                        var statearr_19713_19749 = state_19700__$1;
                        statearr_19713_19749[2] = null;
                        statearr_19713_19749[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19701 === 13) {
                          var inst_19653 = state_19700[8];
                          var inst_19655 = state_19700[9];
                          var inst_19652 = state_19700[10];
                          var inst_19654 = state_19700[11];
                          var inst_19662 = state_19700[2];
                          var inst_19663 = inst_19655 + 1;
                          var tmp19709 = inst_19653;
                          var tmp19710 = inst_19652;
                          var tmp19711 = inst_19654;
                          var inst_19652__$1 = tmp19710;
                          var inst_19653__$1 = tmp19709;
                          var inst_19654__$1 = tmp19711;
                          var inst_19655__$1 = inst_19663;
                          var state_19700__$1 = function() {
                            var statearr_19714 = state_19700;
                            statearr_19714[8] = inst_19653__$1;
                            statearr_19714[9] = inst_19655__$1;
                            statearr_19714[14] = inst_19662;
                            statearr_19714[10] = inst_19652__$1;
                            statearr_19714[11] = inst_19654__$1;
                            return statearr_19714;
                          }();
                          var statearr_19715_19750 = state_19700__$1;
                          statearr_19715_19750[2] = null;
                          statearr_19715_19750[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19701 === 22) {
                            var state_19700__$1 = state_19700;
                            var statearr_19716_19751 = state_19700__$1;
                            statearr_19716_19751[2] = null;
                            statearr_19716_19751[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19701 === 6) {
                              var inst_19641 = state_19700[13];
                              var inst_19650 = f.call(null, inst_19641);
                              var inst_19651 = cljs.core.seq.call(null, inst_19650);
                              var inst_19652 = inst_19651;
                              var inst_19653 = null;
                              var inst_19654 = 0;
                              var inst_19655 = 0;
                              var state_19700__$1 = function() {
                                var statearr_19717 = state_19700;
                                statearr_19717[8] = inst_19653;
                                statearr_19717[9] = inst_19655;
                                statearr_19717[10] = inst_19652;
                                statearr_19717[11] = inst_19654;
                                return statearr_19717;
                              }();
                              var statearr_19718_19752 = state_19700__$1;
                              statearr_19718_19752[2] = null;
                              statearr_19718_19752[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19701 === 17) {
                                var inst_19666 = state_19700[7];
                                var inst_19670 = cljs.core.chunk_first.call(null, inst_19666);
                                var inst_19671 = cljs.core.chunk_rest.call(null, inst_19666);
                                var inst_19672 = cljs.core.count.call(null, inst_19670);
                                var inst_19652 = inst_19671;
                                var inst_19653 = inst_19670;
                                var inst_19654 = inst_19672;
                                var inst_19655 = 0;
                                var state_19700__$1 = function() {
                                  var statearr_19719 = state_19700;
                                  statearr_19719[8] = inst_19653;
                                  statearr_19719[9] = inst_19655;
                                  statearr_19719[10] = inst_19652;
                                  statearr_19719[11] = inst_19654;
                                  return statearr_19719;
                                }();
                                var statearr_19720_19753 = state_19700__$1;
                                statearr_19720_19753[2] = null;
                                statearr_19720_19753[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19701 === 3) {
                                  var inst_19698 = state_19700[2];
                                  var state_19700__$1 = state_19700;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19700__$1, inst_19698);
                                } else {
                                  if (state_val_19701 === 12) {
                                    var inst_19686 = state_19700[2];
                                    var state_19700__$1 = state_19700;
                                    var statearr_19721_19754 = state_19700__$1;
                                    statearr_19721_19754[2] = inst_19686;
                                    statearr_19721_19754[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19701 === 2) {
                                      var state_19700__$1 = state_19700;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19700__$1, 4, in$);
                                    } else {
                                      if (state_val_19701 === 23) {
                                        var inst_19694 = state_19700[2];
                                        var state_19700__$1 = state_19700;
                                        var statearr_19722_19755 = state_19700__$1;
                                        statearr_19722_19755[2] = inst_19694;
                                        statearr_19722_19755[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19701 === 19) {
                                          var inst_19681 = state_19700[2];
                                          var state_19700__$1 = state_19700;
                                          var statearr_19723_19756 = state_19700__$1;
                                          statearr_19723_19756[2] = inst_19681;
                                          statearr_19723_19756[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19701 === 11) {
                                            var inst_19652 = state_19700[10];
                                            var inst_19666 = state_19700[7];
                                            var inst_19666__$1 = cljs.core.seq.call(null, inst_19652);
                                            var state_19700__$1 = function() {
                                              var statearr_19724 = state_19700;
                                              statearr_19724[7] = inst_19666__$1;
                                              return statearr_19724;
                                            }();
                                            if (inst_19666__$1) {
                                              var statearr_19725_19757 = state_19700__$1;
                                              statearr_19725_19757[1] = 14;
                                            } else {
                                              var statearr_19726_19758 = state_19700__$1;
                                              statearr_19726_19758[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19701 === 9) {
                                              var inst_19688 = state_19700[2];
                                              var inst_19689 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_19700__$1 = function() {
                                                var statearr_19727 = state_19700;
                                                statearr_19727[15] = inst_19688;
                                                return statearr_19727;
                                              }();
                                              if (cljs.core.truth_(inst_19689)) {
                                                var statearr_19728_19759 = state_19700__$1;
                                                statearr_19728_19759[1] = 21;
                                              } else {
                                                var statearr_19729_19760 = state_19700__$1;
                                                statearr_19729_19760[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_19701 === 5) {
                                                var inst_19644 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_19700__$1 = state_19700;
                                                var statearr_19730_19761 = state_19700__$1;
                                                statearr_19730_19761[2] = inst_19644;
                                                statearr_19730_19761[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_19701 === 14) {
                                                  var inst_19666 = state_19700[7];
                                                  var inst_19668 = cljs.core.chunked_seq_QMARK_.call(null, inst_19666);
                                                  var state_19700__$1 = state_19700;
                                                  if (inst_19668) {
                                                    var statearr_19731_19762 = state_19700__$1;
                                                    statearr_19731_19762[1] = 17;
                                                  } else {
                                                    var statearr_19732_19763 = state_19700__$1;
                                                    statearr_19732_19763[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_19701 === 16) {
                                                    var inst_19684 = state_19700[2];
                                                    var state_19700__$1 = state_19700;
                                                    var statearr_19733_19764 = state_19700__$1;
                                                    statearr_19733_19764[2] = inst_19684;
                                                    statearr_19733_19764[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_19701 === 10) {
                                                      var inst_19653 = state_19700[8];
                                                      var inst_19655 = state_19700[9];
                                                      var inst_19660 = cljs.core._nth.call(null, inst_19653, inst_19655);
                                                      var state_19700__$1 = state_19700;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19700__$1, 13, out, inst_19660);
                                                    } else {
                                                      if (state_val_19701 === 18) {
                                                        var inst_19666 = state_19700[7];
                                                        var inst_19675 = cljs.core.first.call(null, inst_19666);
                                                        var state_19700__$1 = state_19700;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19700__$1, 20, out, inst_19675);
                                                      } else {
                                                        if (state_val_19701 === 8) {
                                                          var inst_19655 = state_19700[9];
                                                          var inst_19654 = state_19700[11];
                                                          var inst_19657 = inst_19655 < inst_19654;
                                                          var inst_19658 = inst_19657;
                                                          var state_19700__$1 = state_19700;
                                                          if (cljs.core.truth_(inst_19658)) {
                                                            var statearr_19734_19765 = state_19700__$1;
                                                            statearr_19734_19765[1] = 10;
                                                          } else {
                                                            var statearr_19735_19766 = state_19700__$1;
                                                            statearr_19735_19766[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto__);
        return function(switch__7957__auto__, c__8013__auto__) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_19739 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_19739[0] = state_machine__7958__auto__;
              statearr_19739[1] = 1;
              return statearr_19739;
            };
            var state_machine__7958__auto____1 = function(state_19700) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_19700);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e19740) {
                    if (e19740 instanceof Object) {
                      var ex__7961__auto__ = e19740;
                      var statearr_19741_19767 = state_19700;
                      statearr_19741_19767[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19700);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19740;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19768 = state_19700;
                  state_19700 = G__19768;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_19700) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_19700);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto__);
      }();
      var state__8015__auto__ = function() {
        var statearr_19742 = f__8014__auto__.call(null);
        statearr_19742[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto__;
        return statearr_19742;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto__));
  return c__8013__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__8013__auto___19865 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___19865, out) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___19865, out) {
            return function(state_19840) {
              var state_val_19841 = state_19840[1];
              if (state_val_19841 === 7) {
                var inst_19835 = state_19840[2];
                var state_19840__$1 = state_19840;
                var statearr_19842_19866 = state_19840__$1;
                statearr_19842_19866[2] = inst_19835;
                statearr_19842_19866[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19841 === 1) {
                  var inst_19817 = null;
                  var state_19840__$1 = function() {
                    var statearr_19843 = state_19840;
                    statearr_19843[7] = inst_19817;
                    return statearr_19843;
                  }();
                  var statearr_19844_19867 = state_19840__$1;
                  statearr_19844_19867[2] = null;
                  statearr_19844_19867[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19841 === 4) {
                    var inst_19820 = state_19840[8];
                    var inst_19820__$1 = state_19840[2];
                    var inst_19821 = inst_19820__$1 == null;
                    var inst_19822 = cljs.core.not.call(null, inst_19821);
                    var state_19840__$1 = function() {
                      var statearr_19845 = state_19840;
                      statearr_19845[8] = inst_19820__$1;
                      return statearr_19845;
                    }();
                    if (inst_19822) {
                      var statearr_19846_19868 = state_19840__$1;
                      statearr_19846_19868[1] = 5;
                    } else {
                      var statearr_19847_19869 = state_19840__$1;
                      statearr_19847_19869[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19841 === 6) {
                      var state_19840__$1 = state_19840;
                      var statearr_19848_19870 = state_19840__$1;
                      statearr_19848_19870[2] = null;
                      statearr_19848_19870[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19841 === 3) {
                        var inst_19837 = state_19840[2];
                        var inst_19838 = cljs.core.async.close_BANG_.call(null, out);
                        var state_19840__$1 = function() {
                          var statearr_19849 = state_19840;
                          statearr_19849[9] = inst_19837;
                          return statearr_19849;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19840__$1, inst_19838);
                      } else {
                        if (state_val_19841 === 2) {
                          var state_19840__$1 = state_19840;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19840__$1, 4, ch);
                        } else {
                          if (state_val_19841 === 11) {
                            var inst_19820 = state_19840[8];
                            var inst_19829 = state_19840[2];
                            var inst_19817 = inst_19820;
                            var state_19840__$1 = function() {
                              var statearr_19850 = state_19840;
                              statearr_19850[10] = inst_19829;
                              statearr_19850[7] = inst_19817;
                              return statearr_19850;
                            }();
                            var statearr_19851_19871 = state_19840__$1;
                            statearr_19851_19871[2] = null;
                            statearr_19851_19871[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19841 === 9) {
                              var inst_19820 = state_19840[8];
                              var state_19840__$1 = state_19840;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19840__$1, 11, out, inst_19820);
                            } else {
                              if (state_val_19841 === 5) {
                                var inst_19820 = state_19840[8];
                                var inst_19817 = state_19840[7];
                                var inst_19824 = cljs.core._EQ_.call(null, inst_19820, inst_19817);
                                var state_19840__$1 = state_19840;
                                if (inst_19824) {
                                  var statearr_19853_19872 = state_19840__$1;
                                  statearr_19853_19872[1] = 8;
                                } else {
                                  var statearr_19854_19873 = state_19840__$1;
                                  statearr_19854_19873[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19841 === 10) {
                                  var inst_19832 = state_19840[2];
                                  var state_19840__$1 = state_19840;
                                  var statearr_19855_19874 = state_19840__$1;
                                  statearr_19855_19874[2] = inst_19832;
                                  statearr_19855_19874[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19841 === 8) {
                                    var inst_19817 = state_19840[7];
                                    var tmp19852 = inst_19817;
                                    var inst_19817__$1 = tmp19852;
                                    var state_19840__$1 = function() {
                                      var statearr_19856 = state_19840;
                                      statearr_19856[7] = inst_19817__$1;
                                      return statearr_19856;
                                    }();
                                    var statearr_19857_19875 = state_19840__$1;
                                    statearr_19857_19875[2] = null;
                                    statearr_19857_19875[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___19865, out);
          return function(switch__7957__auto__, c__8013__auto___19865, out) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_19861 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_19861[0] = state_machine__7958__auto__;
                statearr_19861[1] = 1;
                return statearr_19861;
              };
              var state_machine__7958__auto____1 = function(state_19840) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_19840);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e19862) {
                      if (e19862 instanceof Object) {
                        var ex__7961__auto__ = e19862;
                        var statearr_19863_19876 = state_19840;
                        statearr_19863_19876[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19840);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19862;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19877 = state_19840;
                    state_19840 = G__19877;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_19840) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_19840);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___19865, out);
        }();
        var state__8015__auto__ = function() {
          var statearr_19864 = f__8014__auto__.call(null);
          statearr_19864[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___19865;
          return statearr_19864;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___19865, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__8013__auto___20012 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___20012, out) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___20012, out) {
            return function(state_19982) {
              var state_val_19983 = state_19982[1];
              if (state_val_19983 === 7) {
                var inst_19978 = state_19982[2];
                var state_19982__$1 = state_19982;
                var statearr_19984_20013 = state_19982__$1;
                statearr_19984_20013[2] = inst_19978;
                statearr_19984_20013[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19983 === 1) {
                  var inst_19945 = new Array(n);
                  var inst_19946 = inst_19945;
                  var inst_19947 = 0;
                  var state_19982__$1 = function() {
                    var statearr_19985 = state_19982;
                    statearr_19985[7] = inst_19947;
                    statearr_19985[8] = inst_19946;
                    return statearr_19985;
                  }();
                  var statearr_19986_20014 = state_19982__$1;
                  statearr_19986_20014[2] = null;
                  statearr_19986_20014[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19983 === 4) {
                    var inst_19950 = state_19982[9];
                    var inst_19950__$1 = state_19982[2];
                    var inst_19951 = inst_19950__$1 == null;
                    var inst_19952 = cljs.core.not.call(null, inst_19951);
                    var state_19982__$1 = function() {
                      var statearr_19987 = state_19982;
                      statearr_19987[9] = inst_19950__$1;
                      return statearr_19987;
                    }();
                    if (inst_19952) {
                      var statearr_19988_20015 = state_19982__$1;
                      statearr_19988_20015[1] = 5;
                    } else {
                      var statearr_19989_20016 = state_19982__$1;
                      statearr_19989_20016[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19983 === 15) {
                      var inst_19972 = state_19982[2];
                      var state_19982__$1 = state_19982;
                      var statearr_19990_20017 = state_19982__$1;
                      statearr_19990_20017[2] = inst_19972;
                      statearr_19990_20017[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19983 === 13) {
                        var state_19982__$1 = state_19982;
                        var statearr_19991_20018 = state_19982__$1;
                        statearr_19991_20018[2] = null;
                        statearr_19991_20018[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19983 === 6) {
                          var inst_19947 = state_19982[7];
                          var inst_19968 = inst_19947 > 0;
                          var state_19982__$1 = state_19982;
                          if (cljs.core.truth_(inst_19968)) {
                            var statearr_19992_20019 = state_19982__$1;
                            statearr_19992_20019[1] = 12;
                          } else {
                            var statearr_19993_20020 = state_19982__$1;
                            statearr_19993_20020[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19983 === 3) {
                            var inst_19980 = state_19982[2];
                            var state_19982__$1 = state_19982;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19982__$1, inst_19980);
                          } else {
                            if (state_val_19983 === 12) {
                              var inst_19946 = state_19982[8];
                              var inst_19970 = cljs.core.vec.call(null, inst_19946);
                              var state_19982__$1 = state_19982;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19982__$1, 15, out, inst_19970);
                            } else {
                              if (state_val_19983 === 2) {
                                var state_19982__$1 = state_19982;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19982__$1, 4, ch);
                              } else {
                                if (state_val_19983 === 11) {
                                  var inst_19962 = state_19982[2];
                                  var inst_19963 = new Array(n);
                                  var inst_19946 = inst_19963;
                                  var inst_19947 = 0;
                                  var state_19982__$1 = function() {
                                    var statearr_19994 = state_19982;
                                    statearr_19994[7] = inst_19947;
                                    statearr_19994[8] = inst_19946;
                                    statearr_19994[10] = inst_19962;
                                    return statearr_19994;
                                  }();
                                  var statearr_19995_20021 = state_19982__$1;
                                  statearr_19995_20021[2] = null;
                                  statearr_19995_20021[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19983 === 9) {
                                    var inst_19946 = state_19982[8];
                                    var inst_19960 = cljs.core.vec.call(null, inst_19946);
                                    var state_19982__$1 = state_19982;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19982__$1, 11, out, inst_19960);
                                  } else {
                                    if (state_val_19983 === 5) {
                                      var inst_19947 = state_19982[7];
                                      var inst_19946 = state_19982[8];
                                      var inst_19955 = state_19982[11];
                                      var inst_19950 = state_19982[9];
                                      var inst_19954 = inst_19946[inst_19947] = inst_19950;
                                      var inst_19955__$1 = inst_19947 + 1;
                                      var inst_19956 = inst_19955__$1 < n;
                                      var state_19982__$1 = function() {
                                        var statearr_19996 = state_19982;
                                        statearr_19996[12] = inst_19954;
                                        statearr_19996[11] = inst_19955__$1;
                                        return statearr_19996;
                                      }();
                                      if (cljs.core.truth_(inst_19956)) {
                                        var statearr_19997_20022 = state_19982__$1;
                                        statearr_19997_20022[1] = 8;
                                      } else {
                                        var statearr_19998_20023 = state_19982__$1;
                                        statearr_19998_20023[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19983 === 14) {
                                        var inst_19975 = state_19982[2];
                                        var inst_19976 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_19982__$1 = function() {
                                          var statearr_20000 = state_19982;
                                          statearr_20000[13] = inst_19975;
                                          return statearr_20000;
                                        }();
                                        var statearr_20001_20024 = state_19982__$1;
                                        statearr_20001_20024[2] = inst_19976;
                                        statearr_20001_20024[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19983 === 10) {
                                          var inst_19966 = state_19982[2];
                                          var state_19982__$1 = state_19982;
                                          var statearr_20002_20025 = state_19982__$1;
                                          statearr_20002_20025[2] = inst_19966;
                                          statearr_20002_20025[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19983 === 8) {
                                            var inst_19946 = state_19982[8];
                                            var inst_19955 = state_19982[11];
                                            var tmp19999 = inst_19946;
                                            var inst_19946__$1 = tmp19999;
                                            var inst_19947 = inst_19955;
                                            var state_19982__$1 = function() {
                                              var statearr_20003 = state_19982;
                                              statearr_20003[7] = inst_19947;
                                              statearr_20003[8] = inst_19946__$1;
                                              return statearr_20003;
                                            }();
                                            var statearr_20004_20026 = state_19982__$1;
                                            statearr_20004_20026[2] = null;
                                            statearr_20004_20026[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___20012, out);
          return function(switch__7957__auto__, c__8013__auto___20012, out) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_20008 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20008[0] = state_machine__7958__auto__;
                statearr_20008[1] = 1;
                return statearr_20008;
              };
              var state_machine__7958__auto____1 = function(state_19982) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_19982);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e20009) {
                      if (e20009 instanceof Object) {
                        var ex__7961__auto__ = e20009;
                        var statearr_20010_20027 = state_19982;
                        statearr_20010_20027[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19982);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20009;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20028 = state_19982;
                    state_19982 = G__20028;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_19982) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_19982);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___20012, out);
        }();
        var state__8015__auto__ = function() {
          var statearr_20011 = f__8014__auto__.call(null);
          statearr_20011[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___20012;
          return statearr_20011;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___20012, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__8013__auto___20171 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto___20171, out) {
      return function() {
        var f__8014__auto__ = function() {
          var switch__7957__auto__ = function(c__8013__auto___20171, out) {
            return function(state_20141) {
              var state_val_20142 = state_20141[1];
              if (state_val_20142 === 7) {
                var inst_20137 = state_20141[2];
                var state_20141__$1 = state_20141;
                var statearr_20143_20172 = state_20141__$1;
                statearr_20143_20172[2] = inst_20137;
                statearr_20143_20172[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20142 === 1) {
                  var inst_20100 = [];
                  var inst_20101 = inst_20100;
                  var inst_20102 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_20141__$1 = function() {
                    var statearr_20144 = state_20141;
                    statearr_20144[7] = inst_20102;
                    statearr_20144[8] = inst_20101;
                    return statearr_20144;
                  }();
                  var statearr_20145_20173 = state_20141__$1;
                  statearr_20145_20173[2] = null;
                  statearr_20145_20173[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20142 === 4) {
                    var inst_20105 = state_20141[9];
                    var inst_20105__$1 = state_20141[2];
                    var inst_20106 = inst_20105__$1 == null;
                    var inst_20107 = cljs.core.not.call(null, inst_20106);
                    var state_20141__$1 = function() {
                      var statearr_20146 = state_20141;
                      statearr_20146[9] = inst_20105__$1;
                      return statearr_20146;
                    }();
                    if (inst_20107) {
                      var statearr_20147_20174 = state_20141__$1;
                      statearr_20147_20174[1] = 5;
                    } else {
                      var statearr_20148_20175 = state_20141__$1;
                      statearr_20148_20175[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20142 === 15) {
                      var inst_20131 = state_20141[2];
                      var state_20141__$1 = state_20141;
                      var statearr_20149_20176 = state_20141__$1;
                      statearr_20149_20176[2] = inst_20131;
                      statearr_20149_20176[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20142 === 13) {
                        var state_20141__$1 = state_20141;
                        var statearr_20150_20177 = state_20141__$1;
                        statearr_20150_20177[2] = null;
                        statearr_20150_20177[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20142 === 6) {
                          var inst_20101 = state_20141[8];
                          var inst_20126 = inst_20101.length;
                          var inst_20127 = inst_20126 > 0;
                          var state_20141__$1 = state_20141;
                          if (cljs.core.truth_(inst_20127)) {
                            var statearr_20151_20178 = state_20141__$1;
                            statearr_20151_20178[1] = 12;
                          } else {
                            var statearr_20152_20179 = state_20141__$1;
                            statearr_20152_20179[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20142 === 3) {
                            var inst_20139 = state_20141[2];
                            var state_20141__$1 = state_20141;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20141__$1, inst_20139);
                          } else {
                            if (state_val_20142 === 12) {
                              var inst_20101 = state_20141[8];
                              var inst_20129 = cljs.core.vec.call(null, inst_20101);
                              var state_20141__$1 = state_20141;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20141__$1, 15, out, inst_20129);
                            } else {
                              if (state_val_20142 === 2) {
                                var state_20141__$1 = state_20141;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20141__$1, 4, ch);
                              } else {
                                if (state_val_20142 === 11) {
                                  var inst_20109 = state_20141[10];
                                  var inst_20105 = state_20141[9];
                                  var inst_20119 = state_20141[2];
                                  var inst_20120 = [];
                                  var inst_20121 = inst_20120.push(inst_20105);
                                  var inst_20101 = inst_20120;
                                  var inst_20102 = inst_20109;
                                  var state_20141__$1 = function() {
                                    var statearr_20153 = state_20141;
                                    statearr_20153[7] = inst_20102;
                                    statearr_20153[11] = inst_20119;
                                    statearr_20153[12] = inst_20121;
                                    statearr_20153[8] = inst_20101;
                                    return statearr_20153;
                                  }();
                                  var statearr_20154_20180 = state_20141__$1;
                                  statearr_20154_20180[2] = null;
                                  statearr_20154_20180[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20142 === 9) {
                                    var inst_20101 = state_20141[8];
                                    var inst_20117 = cljs.core.vec.call(null, inst_20101);
                                    var state_20141__$1 = state_20141;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20141__$1, 11, out, inst_20117);
                                  } else {
                                    if (state_val_20142 === 5) {
                                      var inst_20102 = state_20141[7];
                                      var inst_20109 = state_20141[10];
                                      var inst_20105 = state_20141[9];
                                      var inst_20109__$1 = f.call(null, inst_20105);
                                      var inst_20110 = cljs.core._EQ_.call(null, inst_20109__$1, inst_20102);
                                      var inst_20111 = cljs.core.keyword_identical_QMARK_.call(null, inst_20102, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_20112 = inst_20110 || inst_20111;
                                      var state_20141__$1 = function() {
                                        var statearr_20155 = state_20141;
                                        statearr_20155[10] = inst_20109__$1;
                                        return statearr_20155;
                                      }();
                                      if (cljs.core.truth_(inst_20112)) {
                                        var statearr_20156_20181 = state_20141__$1;
                                        statearr_20156_20181[1] = 8;
                                      } else {
                                        var statearr_20157_20182 = state_20141__$1;
                                        statearr_20157_20182[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20142 === 14) {
                                        var inst_20134 = state_20141[2];
                                        var inst_20135 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_20141__$1 = function() {
                                          var statearr_20159 = state_20141;
                                          statearr_20159[13] = inst_20134;
                                          return statearr_20159;
                                        }();
                                        var statearr_20160_20183 = state_20141__$1;
                                        statearr_20160_20183[2] = inst_20135;
                                        statearr_20160_20183[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20142 === 10) {
                                          var inst_20124 = state_20141[2];
                                          var state_20141__$1 = state_20141;
                                          var statearr_20161_20184 = state_20141__$1;
                                          statearr_20161_20184[2] = inst_20124;
                                          statearr_20161_20184[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20142 === 8) {
                                            var inst_20109 = state_20141[10];
                                            var inst_20101 = state_20141[8];
                                            var inst_20105 = state_20141[9];
                                            var inst_20114 = inst_20101.push(inst_20105);
                                            var tmp20158 = inst_20101;
                                            var inst_20101__$1 = tmp20158;
                                            var inst_20102 = inst_20109;
                                            var state_20141__$1 = function() {
                                              var statearr_20162 = state_20141;
                                              statearr_20162[7] = inst_20102;
                                              statearr_20162[14] = inst_20114;
                                              statearr_20162[8] = inst_20101__$1;
                                              return statearr_20162;
                                            }();
                                            var statearr_20163_20185 = state_20141__$1;
                                            statearr_20163_20185[2] = null;
                                            statearr_20163_20185[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__8013__auto___20171, out);
          return function(switch__7957__auto__, c__8013__auto___20171, out) {
            return function() {
              var state_machine__7958__auto__ = null;
              var state_machine__7958__auto____0 = function() {
                var statearr_20167 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20167[0] = state_machine__7958__auto__;
                statearr_20167[1] = 1;
                return statearr_20167;
              };
              var state_machine__7958__auto____1 = function(state_20141) {
                while (true) {
                  var ret_value__7959__auto__ = function() {
                    try {
                      while (true) {
                        var result__7960__auto__ = switch__7957__auto__.call(null, state_20141);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__7960__auto__;
                        }
                        break;
                      }
                    } catch (e20168) {
                      if (e20168 instanceof Object) {
                        var ex__7961__auto__ = e20168;
                        var statearr_20169_20186 = state_20141;
                        statearr_20169_20186[5] = ex__7961__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20141);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20168;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20187 = state_20141;
                    state_20141 = G__20187;
                    continue;
                  } else {
                    return ret_value__7959__auto__;
                  }
                  break;
                }
              };
              state_machine__7958__auto__ = function(state_20141) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__7958__auto____0.call(this);
                  case 1:
                    return state_machine__7958__auto____1.call(this, state_20141);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
              state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
              return state_machine__7958__auto__;
            }();
          }(switch__7957__auto__, c__8013__auto___20171, out);
        }();
        var state__8015__auto__ = function() {
          var statearr_20170 = f__8014__auto__.call(null);
          statearr_20170[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto___20171;
          return statearr_20170;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
      };
    }(c__8013__auto___20171, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("quiescent");
goog.require("cljs.core");
quiescent.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj24013 = {};
      return obj24013;
    }();
    var seq__24014_24020 = cljs.core.seq.call(null, obj);
    var chunk__24015_24021 = null;
    var count__24016_24022 = 0;
    var i__24017_24023 = 0;
    while (true) {
      if (i__24017_24023 < count__24016_24022) {
        var vec__24018_24024 = cljs.core._nth.call(null, chunk__24015_24021, i__24017_24023);
        var k_24025 = cljs.core.nth.call(null, vec__24018_24024, 0, null);
        var v_24026 = cljs.core.nth.call(null, vec__24018_24024, 1, null);
        o[cljs.core.name.call(null, k_24025)] = js_props.call(null, v_24026);
        var G__24027 = seq__24014_24020;
        var G__24028 = chunk__24015_24021;
        var G__24029 = count__24016_24022;
        var G__24030 = i__24017_24023 + 1;
        seq__24014_24020 = G__24027;
        chunk__24015_24021 = G__24028;
        count__24016_24022 = G__24029;
        i__24017_24023 = G__24030;
        continue;
      } else {
        var temp__4126__auto___24031 = cljs.core.seq.call(null, seq__24014_24020);
        if (temp__4126__auto___24031) {
          var seq__24014_24032__$1 = temp__4126__auto___24031;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__24014_24032__$1)) {
            var c__5012__auto___24033 = cljs.core.chunk_first.call(null, seq__24014_24032__$1);
            var G__24034 = cljs.core.chunk_rest.call(null, seq__24014_24032__$1);
            var G__24035 = c__5012__auto___24033;
            var G__24036 = cljs.core.count.call(null, c__5012__auto___24033);
            var G__24037 = 0;
            seq__24014_24020 = G__24034;
            chunk__24015_24021 = G__24035;
            count__24016_24022 = G__24036;
            i__24017_24023 = G__24037;
            continue;
          } else {
            var vec__24019_24038 = cljs.core.first.call(null, seq__24014_24032__$1);
            var k_24039 = cljs.core.nth.call(null, vec__24019_24038, 0, null);
            var v_24040 = cljs.core.nth.call(null, vec__24019_24038, 1, null);
            o[cljs.core.name.call(null, k_24039)] = js_props.call(null, v_24040);
            var G__24041 = cljs.core.next.call(null, seq__24014_24032__$1);
            var G__24042 = null;
            var G__24043 = 0;
            var G__24044 = 0;
            seq__24014_24020 = G__24041;
            chunk__24015_24021 = G__24042;
            count__24016_24022 = G__24043;
            i__24017_24023 = G__24044;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_24046 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_24046;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function(react_component) {
    return function() {
      var G__24047__delegate = function(value, static_args) {
        return react_component.call(null, {"statics":static_args, "value":value});
      };
      var G__24047 = function(value, var_args) {
        var static_args = null;
        if (arguments.length > 1) {
          var G__24048__i = 0, G__24048__a = new Array(arguments.length - 1);
          while (G__24048__i < G__24048__a.length) {
            G__24048__a[G__24048__i] = arguments[G__24048__i + 1];
            ++G__24048__i;
          }
          static_args = new cljs.core.IndexedSeq(G__24048__a, 0);
        }
        return G__24047__delegate.call(this, value, static_args);
      };
      G__24047.cljs$lang$maxFixedArity = 1;
      G__24047.cljs$lang$applyTo = function(arglist__24049) {
        var value = cljs.core.first(arglist__24049);
        var static_args = cljs.core.rest(arglist__24049);
        return G__24047__delegate(value, static_args);
      };
      G__24047.cljs$core$IFn$_invoke$arity$variadic = G__24047__delegate;
      return G__24047;
    }();
  }(react_component);
};
quiescent.WrapperComponent = React.createClass({"componentWillUnmount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillUnmount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_24054 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_24054;
    }
  } else {
    return null;
  }
}, "componentWillUpdate":function(_, ___$1) {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillUpdate"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_24053 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_24053;
    }
  } else {
    return null;
  }
}, "componentWillMount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillMount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_24052 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_24052;
    }
  } else {
    return null;
  }
}, "componentDidMount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_24051 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_24051;
    }
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_24050 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_24050;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.wrapper = function() {
  var wrapper__delegate = function(child, kvs) {
    var props = quiescent.js_props.call(null, cljs.core.apply.call(null, cljs.core.array_map, new cljs.core.Keyword(null, "wrappee", "wrappee", 876822573), child, kvs));
    var temp__4126__auto___24055 = child.props["key"];
    if (cljs.core.truth_(temp__4126__auto___24055)) {
      var key_24056 = temp__4126__auto___24055;
      props["key"] = key_24056;
    } else {
    }
    return quiescent.WrapperComponent.call(null, props);
  };
  var wrapper = function(child, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      var G__24057__i = 0, G__24057__a = new Array(arguments.length - 1);
      while (G__24057__i < G__24057__a.length) {
        G__24057__a[G__24057__i] = arguments[G__24057__i + 1];
        ++G__24057__i;
      }
      kvs = new cljs.core.IndexedSeq(G__24057__a, 0);
    }
    return wrapper__delegate.call(this, child, kvs);
  };
  wrapper.cljs$lang$maxFixedArity = 1;
  wrapper.cljs$lang$applyTo = function(arglist__24058) {
    var child = cljs.core.first(arglist__24058);
    var kvs = cljs.core.rest(arglist__24058);
    return wrapper__delegate(child, kvs);
  };
  wrapper.cljs$core$IFn$_invoke$arity$variadic = wrapper__delegate;
  return wrapper;
}();
quiescent.on_update = function on_update(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onUpdate", "onUpdate", -315358968), f);
};
quiescent.on_mount = function on_mount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onMount", "onMount", -876858467), f);
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onMount", "onMount", -876858467), f, new cljs.core.Keyword(null, "onUpdate", "onUpdate", -315358968), f);
};
quiescent.on_will_mount = function on_will_mount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillMount", "onWillMount", -2065876946), f);
};
quiescent.on_will_update = function on_will_update(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillUpdate", "onWillUpdate", 1307659073), f);
};
quiescent.on_will_render = function on_will_render(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillMount", "onWillMount", -2065876946), f, new cljs.core.Keyword(null, "onWillUpdate", "onWillUpdate", 1307659073), f);
};
quiescent.on_will_unmount = function on_will_unmount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillUnmount", "onWillUnmount", -16104606), f);
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
quiescent.dom.a = function() {
  var a__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20317_21265 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20318_21266 = null;
    var count__20319_21267 = 0;
    var i__20320_21268 = 0;
    while (true) {
      if (i__20320_21268 < count__20319_21267) {
        var arg__5757__auto___21269 = cljs.core._nth.call(null, chunk__20318_21266, i__20320_21268);
        a__5756__auto__.push(arg__5757__auto___21269);
        var G__21270 = seq__20317_21265;
        var G__21271 = chunk__20318_21266;
        var G__21272 = count__20319_21267;
        var G__21273 = i__20320_21268 + 1;
        seq__20317_21265 = G__21270;
        chunk__20318_21266 = G__21271;
        count__20319_21267 = G__21272;
        i__20320_21268 = G__21273;
        continue;
      } else {
        var temp__4126__auto___21274 = cljs.core.seq.call(null, seq__20317_21265);
        if (temp__4126__auto___21274) {
          var seq__20317_21275__$1 = temp__4126__auto___21274;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20317_21275__$1)) {
            var c__5012__auto___21276 = cljs.core.chunk_first.call(null, seq__20317_21275__$1);
            var G__21277 = cljs.core.chunk_rest.call(null, seq__20317_21275__$1);
            var G__21278 = c__5012__auto___21276;
            var G__21279 = cljs.core.count.call(null, c__5012__auto___21276);
            var G__21280 = 0;
            seq__20317_21265 = G__21277;
            chunk__20318_21266 = G__21278;
            count__20319_21267 = G__21279;
            i__20320_21268 = G__21280;
            continue;
          } else {
            var arg__5757__auto___21281 = cljs.core.first.call(null, seq__20317_21275__$1);
            a__5756__auto__.push(arg__5757__auto___21281);
            var G__21282 = cljs.core.next.call(null, seq__20317_21275__$1);
            var G__21283 = null;
            var G__21284 = 0;
            var G__21285 = 0;
            seq__20317_21265 = G__21282;
            chunk__20318_21266 = G__21283;
            count__20319_21267 = G__21284;
            i__20320_21268 = G__21285;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__5756__auto__);
  };
  var a = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21286__i = 0, G__21286__a = new Array(arguments.length - 0);
      while (G__21286__i < G__21286__a.length) {
        G__21286__a[G__21286__i] = arguments[G__21286__i + 0];
        ++G__21286__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21286__a, 0);
    }
    return a__delegate.call(this, args__5755__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__21287) {
    var args__5755__auto__ = cljs.core.seq(arglist__21287);
    return a__delegate(args__5755__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20325_21288 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20326_21289 = null;
    var count__20327_21290 = 0;
    var i__20328_21291 = 0;
    while (true) {
      if (i__20328_21291 < count__20327_21290) {
        var arg__5757__auto___21292 = cljs.core._nth.call(null, chunk__20326_21289, i__20328_21291);
        a__5756__auto__.push(arg__5757__auto___21292);
        var G__21293 = seq__20325_21288;
        var G__21294 = chunk__20326_21289;
        var G__21295 = count__20327_21290;
        var G__21296 = i__20328_21291 + 1;
        seq__20325_21288 = G__21293;
        chunk__20326_21289 = G__21294;
        count__20327_21290 = G__21295;
        i__20328_21291 = G__21296;
        continue;
      } else {
        var temp__4126__auto___21297 = cljs.core.seq.call(null, seq__20325_21288);
        if (temp__4126__auto___21297) {
          var seq__20325_21298__$1 = temp__4126__auto___21297;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20325_21298__$1)) {
            var c__5012__auto___21299 = cljs.core.chunk_first.call(null, seq__20325_21298__$1);
            var G__21300 = cljs.core.chunk_rest.call(null, seq__20325_21298__$1);
            var G__21301 = c__5012__auto___21299;
            var G__21302 = cljs.core.count.call(null, c__5012__auto___21299);
            var G__21303 = 0;
            seq__20325_21288 = G__21300;
            chunk__20326_21289 = G__21301;
            count__20327_21290 = G__21302;
            i__20328_21291 = G__21303;
            continue;
          } else {
            var arg__5757__auto___21304 = cljs.core.first.call(null, seq__20325_21298__$1);
            a__5756__auto__.push(arg__5757__auto___21304);
            var G__21305 = cljs.core.next.call(null, seq__20325_21298__$1);
            var G__21306 = null;
            var G__21307 = 0;
            var G__21308 = 0;
            seq__20325_21288 = G__21305;
            chunk__20326_21289 = G__21306;
            count__20327_21290 = G__21307;
            i__20328_21291 = G__21308;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__5756__auto__);
  };
  var abbr = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21309__i = 0, G__21309__a = new Array(arguments.length - 0);
      while (G__21309__i < G__21309__a.length) {
        G__21309__a[G__21309__i] = arguments[G__21309__i + 0];
        ++G__21309__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21309__a, 0);
    }
    return abbr__delegate.call(this, args__5755__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__21310) {
    var args__5755__auto__ = cljs.core.seq(arglist__21310);
    return abbr__delegate(args__5755__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20333_21311 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20334_21312 = null;
    var count__20335_21313 = 0;
    var i__20336_21314 = 0;
    while (true) {
      if (i__20336_21314 < count__20335_21313) {
        var arg__5757__auto___21315 = cljs.core._nth.call(null, chunk__20334_21312, i__20336_21314);
        a__5756__auto__.push(arg__5757__auto___21315);
        var G__21316 = seq__20333_21311;
        var G__21317 = chunk__20334_21312;
        var G__21318 = count__20335_21313;
        var G__21319 = i__20336_21314 + 1;
        seq__20333_21311 = G__21316;
        chunk__20334_21312 = G__21317;
        count__20335_21313 = G__21318;
        i__20336_21314 = G__21319;
        continue;
      } else {
        var temp__4126__auto___21320 = cljs.core.seq.call(null, seq__20333_21311);
        if (temp__4126__auto___21320) {
          var seq__20333_21321__$1 = temp__4126__auto___21320;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20333_21321__$1)) {
            var c__5012__auto___21322 = cljs.core.chunk_first.call(null, seq__20333_21321__$1);
            var G__21323 = cljs.core.chunk_rest.call(null, seq__20333_21321__$1);
            var G__21324 = c__5012__auto___21322;
            var G__21325 = cljs.core.count.call(null, c__5012__auto___21322);
            var G__21326 = 0;
            seq__20333_21311 = G__21323;
            chunk__20334_21312 = G__21324;
            count__20335_21313 = G__21325;
            i__20336_21314 = G__21326;
            continue;
          } else {
            var arg__5757__auto___21327 = cljs.core.first.call(null, seq__20333_21321__$1);
            a__5756__auto__.push(arg__5757__auto___21327);
            var G__21328 = cljs.core.next.call(null, seq__20333_21321__$1);
            var G__21329 = null;
            var G__21330 = 0;
            var G__21331 = 0;
            seq__20333_21311 = G__21328;
            chunk__20334_21312 = G__21329;
            count__20335_21313 = G__21330;
            i__20336_21314 = G__21331;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__5756__auto__);
  };
  var address = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21332__i = 0, G__21332__a = new Array(arguments.length - 0);
      while (G__21332__i < G__21332__a.length) {
        G__21332__a[G__21332__i] = arguments[G__21332__i + 0];
        ++G__21332__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21332__a, 0);
    }
    return address__delegate.call(this, args__5755__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__21333) {
    var args__5755__auto__ = cljs.core.seq(arglist__21333);
    return address__delegate(args__5755__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20341_21334 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20342_21335 = null;
    var count__20343_21336 = 0;
    var i__20344_21337 = 0;
    while (true) {
      if (i__20344_21337 < count__20343_21336) {
        var arg__5757__auto___21338 = cljs.core._nth.call(null, chunk__20342_21335, i__20344_21337);
        a__5756__auto__.push(arg__5757__auto___21338);
        var G__21339 = seq__20341_21334;
        var G__21340 = chunk__20342_21335;
        var G__21341 = count__20343_21336;
        var G__21342 = i__20344_21337 + 1;
        seq__20341_21334 = G__21339;
        chunk__20342_21335 = G__21340;
        count__20343_21336 = G__21341;
        i__20344_21337 = G__21342;
        continue;
      } else {
        var temp__4126__auto___21343 = cljs.core.seq.call(null, seq__20341_21334);
        if (temp__4126__auto___21343) {
          var seq__20341_21344__$1 = temp__4126__auto___21343;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20341_21344__$1)) {
            var c__5012__auto___21345 = cljs.core.chunk_first.call(null, seq__20341_21344__$1);
            var G__21346 = cljs.core.chunk_rest.call(null, seq__20341_21344__$1);
            var G__21347 = c__5012__auto___21345;
            var G__21348 = cljs.core.count.call(null, c__5012__auto___21345);
            var G__21349 = 0;
            seq__20341_21334 = G__21346;
            chunk__20342_21335 = G__21347;
            count__20343_21336 = G__21348;
            i__20344_21337 = G__21349;
            continue;
          } else {
            var arg__5757__auto___21350 = cljs.core.first.call(null, seq__20341_21344__$1);
            a__5756__auto__.push(arg__5757__auto___21350);
            var G__21351 = cljs.core.next.call(null, seq__20341_21344__$1);
            var G__21352 = null;
            var G__21353 = 0;
            var G__21354 = 0;
            seq__20341_21334 = G__21351;
            chunk__20342_21335 = G__21352;
            count__20343_21336 = G__21353;
            i__20344_21337 = G__21354;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__5756__auto__);
  };
  var area = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21355__i = 0, G__21355__a = new Array(arguments.length - 0);
      while (G__21355__i < G__21355__a.length) {
        G__21355__a[G__21355__i] = arguments[G__21355__i + 0];
        ++G__21355__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21355__a, 0);
    }
    return area__delegate.call(this, args__5755__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__21356) {
    var args__5755__auto__ = cljs.core.seq(arglist__21356);
    return area__delegate(args__5755__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20349_21357 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20350_21358 = null;
    var count__20351_21359 = 0;
    var i__20352_21360 = 0;
    while (true) {
      if (i__20352_21360 < count__20351_21359) {
        var arg__5757__auto___21361 = cljs.core._nth.call(null, chunk__20350_21358, i__20352_21360);
        a__5756__auto__.push(arg__5757__auto___21361);
        var G__21362 = seq__20349_21357;
        var G__21363 = chunk__20350_21358;
        var G__21364 = count__20351_21359;
        var G__21365 = i__20352_21360 + 1;
        seq__20349_21357 = G__21362;
        chunk__20350_21358 = G__21363;
        count__20351_21359 = G__21364;
        i__20352_21360 = G__21365;
        continue;
      } else {
        var temp__4126__auto___21366 = cljs.core.seq.call(null, seq__20349_21357);
        if (temp__4126__auto___21366) {
          var seq__20349_21367__$1 = temp__4126__auto___21366;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20349_21367__$1)) {
            var c__5012__auto___21368 = cljs.core.chunk_first.call(null, seq__20349_21367__$1);
            var G__21369 = cljs.core.chunk_rest.call(null, seq__20349_21367__$1);
            var G__21370 = c__5012__auto___21368;
            var G__21371 = cljs.core.count.call(null, c__5012__auto___21368);
            var G__21372 = 0;
            seq__20349_21357 = G__21369;
            chunk__20350_21358 = G__21370;
            count__20351_21359 = G__21371;
            i__20352_21360 = G__21372;
            continue;
          } else {
            var arg__5757__auto___21373 = cljs.core.first.call(null, seq__20349_21367__$1);
            a__5756__auto__.push(arg__5757__auto___21373);
            var G__21374 = cljs.core.next.call(null, seq__20349_21367__$1);
            var G__21375 = null;
            var G__21376 = 0;
            var G__21377 = 0;
            seq__20349_21357 = G__21374;
            chunk__20350_21358 = G__21375;
            count__20351_21359 = G__21376;
            i__20352_21360 = G__21377;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__5756__auto__);
  };
  var article = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21378__i = 0, G__21378__a = new Array(arguments.length - 0);
      while (G__21378__i < G__21378__a.length) {
        G__21378__a[G__21378__i] = arguments[G__21378__i + 0];
        ++G__21378__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21378__a, 0);
    }
    return article__delegate.call(this, args__5755__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__21379) {
    var args__5755__auto__ = cljs.core.seq(arglist__21379);
    return article__delegate(args__5755__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20357_21380 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20358_21381 = null;
    var count__20359_21382 = 0;
    var i__20360_21383 = 0;
    while (true) {
      if (i__20360_21383 < count__20359_21382) {
        var arg__5757__auto___21384 = cljs.core._nth.call(null, chunk__20358_21381, i__20360_21383);
        a__5756__auto__.push(arg__5757__auto___21384);
        var G__21385 = seq__20357_21380;
        var G__21386 = chunk__20358_21381;
        var G__21387 = count__20359_21382;
        var G__21388 = i__20360_21383 + 1;
        seq__20357_21380 = G__21385;
        chunk__20358_21381 = G__21386;
        count__20359_21382 = G__21387;
        i__20360_21383 = G__21388;
        continue;
      } else {
        var temp__4126__auto___21389 = cljs.core.seq.call(null, seq__20357_21380);
        if (temp__4126__auto___21389) {
          var seq__20357_21390__$1 = temp__4126__auto___21389;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20357_21390__$1)) {
            var c__5012__auto___21391 = cljs.core.chunk_first.call(null, seq__20357_21390__$1);
            var G__21392 = cljs.core.chunk_rest.call(null, seq__20357_21390__$1);
            var G__21393 = c__5012__auto___21391;
            var G__21394 = cljs.core.count.call(null, c__5012__auto___21391);
            var G__21395 = 0;
            seq__20357_21380 = G__21392;
            chunk__20358_21381 = G__21393;
            count__20359_21382 = G__21394;
            i__20360_21383 = G__21395;
            continue;
          } else {
            var arg__5757__auto___21396 = cljs.core.first.call(null, seq__20357_21390__$1);
            a__5756__auto__.push(arg__5757__auto___21396);
            var G__21397 = cljs.core.next.call(null, seq__20357_21390__$1);
            var G__21398 = null;
            var G__21399 = 0;
            var G__21400 = 0;
            seq__20357_21380 = G__21397;
            chunk__20358_21381 = G__21398;
            count__20359_21382 = G__21399;
            i__20360_21383 = G__21400;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__5756__auto__);
  };
  var aside = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21401__i = 0, G__21401__a = new Array(arguments.length - 0);
      while (G__21401__i < G__21401__a.length) {
        G__21401__a[G__21401__i] = arguments[G__21401__i + 0];
        ++G__21401__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21401__a, 0);
    }
    return aside__delegate.call(this, args__5755__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__21402) {
    var args__5755__auto__ = cljs.core.seq(arglist__21402);
    return aside__delegate(args__5755__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20365_21403 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20366_21404 = null;
    var count__20367_21405 = 0;
    var i__20368_21406 = 0;
    while (true) {
      if (i__20368_21406 < count__20367_21405) {
        var arg__5757__auto___21407 = cljs.core._nth.call(null, chunk__20366_21404, i__20368_21406);
        a__5756__auto__.push(arg__5757__auto___21407);
        var G__21408 = seq__20365_21403;
        var G__21409 = chunk__20366_21404;
        var G__21410 = count__20367_21405;
        var G__21411 = i__20368_21406 + 1;
        seq__20365_21403 = G__21408;
        chunk__20366_21404 = G__21409;
        count__20367_21405 = G__21410;
        i__20368_21406 = G__21411;
        continue;
      } else {
        var temp__4126__auto___21412 = cljs.core.seq.call(null, seq__20365_21403);
        if (temp__4126__auto___21412) {
          var seq__20365_21413__$1 = temp__4126__auto___21412;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20365_21413__$1)) {
            var c__5012__auto___21414 = cljs.core.chunk_first.call(null, seq__20365_21413__$1);
            var G__21415 = cljs.core.chunk_rest.call(null, seq__20365_21413__$1);
            var G__21416 = c__5012__auto___21414;
            var G__21417 = cljs.core.count.call(null, c__5012__auto___21414);
            var G__21418 = 0;
            seq__20365_21403 = G__21415;
            chunk__20366_21404 = G__21416;
            count__20367_21405 = G__21417;
            i__20368_21406 = G__21418;
            continue;
          } else {
            var arg__5757__auto___21419 = cljs.core.first.call(null, seq__20365_21413__$1);
            a__5756__auto__.push(arg__5757__auto___21419);
            var G__21420 = cljs.core.next.call(null, seq__20365_21413__$1);
            var G__21421 = null;
            var G__21422 = 0;
            var G__21423 = 0;
            seq__20365_21403 = G__21420;
            chunk__20366_21404 = G__21421;
            count__20367_21405 = G__21422;
            i__20368_21406 = G__21423;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__5756__auto__);
  };
  var audio = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21424__i = 0, G__21424__a = new Array(arguments.length - 0);
      while (G__21424__i < G__21424__a.length) {
        G__21424__a[G__21424__i] = arguments[G__21424__i + 0];
        ++G__21424__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21424__a, 0);
    }
    return audio__delegate.call(this, args__5755__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__21425) {
    var args__5755__auto__ = cljs.core.seq(arglist__21425);
    return audio__delegate(args__5755__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20373_21426 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20374_21427 = null;
    var count__20375_21428 = 0;
    var i__20376_21429 = 0;
    while (true) {
      if (i__20376_21429 < count__20375_21428) {
        var arg__5757__auto___21430 = cljs.core._nth.call(null, chunk__20374_21427, i__20376_21429);
        a__5756__auto__.push(arg__5757__auto___21430);
        var G__21431 = seq__20373_21426;
        var G__21432 = chunk__20374_21427;
        var G__21433 = count__20375_21428;
        var G__21434 = i__20376_21429 + 1;
        seq__20373_21426 = G__21431;
        chunk__20374_21427 = G__21432;
        count__20375_21428 = G__21433;
        i__20376_21429 = G__21434;
        continue;
      } else {
        var temp__4126__auto___21435 = cljs.core.seq.call(null, seq__20373_21426);
        if (temp__4126__auto___21435) {
          var seq__20373_21436__$1 = temp__4126__auto___21435;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20373_21436__$1)) {
            var c__5012__auto___21437 = cljs.core.chunk_first.call(null, seq__20373_21436__$1);
            var G__21438 = cljs.core.chunk_rest.call(null, seq__20373_21436__$1);
            var G__21439 = c__5012__auto___21437;
            var G__21440 = cljs.core.count.call(null, c__5012__auto___21437);
            var G__21441 = 0;
            seq__20373_21426 = G__21438;
            chunk__20374_21427 = G__21439;
            count__20375_21428 = G__21440;
            i__20376_21429 = G__21441;
            continue;
          } else {
            var arg__5757__auto___21442 = cljs.core.first.call(null, seq__20373_21436__$1);
            a__5756__auto__.push(arg__5757__auto___21442);
            var G__21443 = cljs.core.next.call(null, seq__20373_21436__$1);
            var G__21444 = null;
            var G__21445 = 0;
            var G__21446 = 0;
            seq__20373_21426 = G__21443;
            chunk__20374_21427 = G__21444;
            count__20375_21428 = G__21445;
            i__20376_21429 = G__21446;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__5756__auto__);
  };
  var b = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21447__i = 0, G__21447__a = new Array(arguments.length - 0);
      while (G__21447__i < G__21447__a.length) {
        G__21447__a[G__21447__i] = arguments[G__21447__i + 0];
        ++G__21447__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21447__a, 0);
    }
    return b__delegate.call(this, args__5755__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__21448) {
    var args__5755__auto__ = cljs.core.seq(arglist__21448);
    return b__delegate(args__5755__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20381_21449 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20382_21450 = null;
    var count__20383_21451 = 0;
    var i__20384_21452 = 0;
    while (true) {
      if (i__20384_21452 < count__20383_21451) {
        var arg__5757__auto___21453 = cljs.core._nth.call(null, chunk__20382_21450, i__20384_21452);
        a__5756__auto__.push(arg__5757__auto___21453);
        var G__21454 = seq__20381_21449;
        var G__21455 = chunk__20382_21450;
        var G__21456 = count__20383_21451;
        var G__21457 = i__20384_21452 + 1;
        seq__20381_21449 = G__21454;
        chunk__20382_21450 = G__21455;
        count__20383_21451 = G__21456;
        i__20384_21452 = G__21457;
        continue;
      } else {
        var temp__4126__auto___21458 = cljs.core.seq.call(null, seq__20381_21449);
        if (temp__4126__auto___21458) {
          var seq__20381_21459__$1 = temp__4126__auto___21458;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20381_21459__$1)) {
            var c__5012__auto___21460 = cljs.core.chunk_first.call(null, seq__20381_21459__$1);
            var G__21461 = cljs.core.chunk_rest.call(null, seq__20381_21459__$1);
            var G__21462 = c__5012__auto___21460;
            var G__21463 = cljs.core.count.call(null, c__5012__auto___21460);
            var G__21464 = 0;
            seq__20381_21449 = G__21461;
            chunk__20382_21450 = G__21462;
            count__20383_21451 = G__21463;
            i__20384_21452 = G__21464;
            continue;
          } else {
            var arg__5757__auto___21465 = cljs.core.first.call(null, seq__20381_21459__$1);
            a__5756__auto__.push(arg__5757__auto___21465);
            var G__21466 = cljs.core.next.call(null, seq__20381_21459__$1);
            var G__21467 = null;
            var G__21468 = 0;
            var G__21469 = 0;
            seq__20381_21449 = G__21466;
            chunk__20382_21450 = G__21467;
            count__20383_21451 = G__21468;
            i__20384_21452 = G__21469;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__5756__auto__);
  };
  var base = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21470__i = 0, G__21470__a = new Array(arguments.length - 0);
      while (G__21470__i < G__21470__a.length) {
        G__21470__a[G__21470__i] = arguments[G__21470__i + 0];
        ++G__21470__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21470__a, 0);
    }
    return base__delegate.call(this, args__5755__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__21471) {
    var args__5755__auto__ = cljs.core.seq(arglist__21471);
    return base__delegate(args__5755__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20389_21472 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20390_21473 = null;
    var count__20391_21474 = 0;
    var i__20392_21475 = 0;
    while (true) {
      if (i__20392_21475 < count__20391_21474) {
        var arg__5757__auto___21476 = cljs.core._nth.call(null, chunk__20390_21473, i__20392_21475);
        a__5756__auto__.push(arg__5757__auto___21476);
        var G__21477 = seq__20389_21472;
        var G__21478 = chunk__20390_21473;
        var G__21479 = count__20391_21474;
        var G__21480 = i__20392_21475 + 1;
        seq__20389_21472 = G__21477;
        chunk__20390_21473 = G__21478;
        count__20391_21474 = G__21479;
        i__20392_21475 = G__21480;
        continue;
      } else {
        var temp__4126__auto___21481 = cljs.core.seq.call(null, seq__20389_21472);
        if (temp__4126__auto___21481) {
          var seq__20389_21482__$1 = temp__4126__auto___21481;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20389_21482__$1)) {
            var c__5012__auto___21483 = cljs.core.chunk_first.call(null, seq__20389_21482__$1);
            var G__21484 = cljs.core.chunk_rest.call(null, seq__20389_21482__$1);
            var G__21485 = c__5012__auto___21483;
            var G__21486 = cljs.core.count.call(null, c__5012__auto___21483);
            var G__21487 = 0;
            seq__20389_21472 = G__21484;
            chunk__20390_21473 = G__21485;
            count__20391_21474 = G__21486;
            i__20392_21475 = G__21487;
            continue;
          } else {
            var arg__5757__auto___21488 = cljs.core.first.call(null, seq__20389_21482__$1);
            a__5756__auto__.push(arg__5757__auto___21488);
            var G__21489 = cljs.core.next.call(null, seq__20389_21482__$1);
            var G__21490 = null;
            var G__21491 = 0;
            var G__21492 = 0;
            seq__20389_21472 = G__21489;
            chunk__20390_21473 = G__21490;
            count__20391_21474 = G__21491;
            i__20392_21475 = G__21492;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__5756__auto__);
  };
  var bdi = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21493__i = 0, G__21493__a = new Array(arguments.length - 0);
      while (G__21493__i < G__21493__a.length) {
        G__21493__a[G__21493__i] = arguments[G__21493__i + 0];
        ++G__21493__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21493__a, 0);
    }
    return bdi__delegate.call(this, args__5755__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__21494) {
    var args__5755__auto__ = cljs.core.seq(arglist__21494);
    return bdi__delegate(args__5755__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20397_21495 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20398_21496 = null;
    var count__20399_21497 = 0;
    var i__20400_21498 = 0;
    while (true) {
      if (i__20400_21498 < count__20399_21497) {
        var arg__5757__auto___21499 = cljs.core._nth.call(null, chunk__20398_21496, i__20400_21498);
        a__5756__auto__.push(arg__5757__auto___21499);
        var G__21500 = seq__20397_21495;
        var G__21501 = chunk__20398_21496;
        var G__21502 = count__20399_21497;
        var G__21503 = i__20400_21498 + 1;
        seq__20397_21495 = G__21500;
        chunk__20398_21496 = G__21501;
        count__20399_21497 = G__21502;
        i__20400_21498 = G__21503;
        continue;
      } else {
        var temp__4126__auto___21504 = cljs.core.seq.call(null, seq__20397_21495);
        if (temp__4126__auto___21504) {
          var seq__20397_21505__$1 = temp__4126__auto___21504;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20397_21505__$1)) {
            var c__5012__auto___21506 = cljs.core.chunk_first.call(null, seq__20397_21505__$1);
            var G__21507 = cljs.core.chunk_rest.call(null, seq__20397_21505__$1);
            var G__21508 = c__5012__auto___21506;
            var G__21509 = cljs.core.count.call(null, c__5012__auto___21506);
            var G__21510 = 0;
            seq__20397_21495 = G__21507;
            chunk__20398_21496 = G__21508;
            count__20399_21497 = G__21509;
            i__20400_21498 = G__21510;
            continue;
          } else {
            var arg__5757__auto___21511 = cljs.core.first.call(null, seq__20397_21505__$1);
            a__5756__auto__.push(arg__5757__auto___21511);
            var G__21512 = cljs.core.next.call(null, seq__20397_21505__$1);
            var G__21513 = null;
            var G__21514 = 0;
            var G__21515 = 0;
            seq__20397_21495 = G__21512;
            chunk__20398_21496 = G__21513;
            count__20399_21497 = G__21514;
            i__20400_21498 = G__21515;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__5756__auto__);
  };
  var bdo = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21516__i = 0, G__21516__a = new Array(arguments.length - 0);
      while (G__21516__i < G__21516__a.length) {
        G__21516__a[G__21516__i] = arguments[G__21516__i + 0];
        ++G__21516__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21516__a, 0);
    }
    return bdo__delegate.call(this, args__5755__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__21517) {
    var args__5755__auto__ = cljs.core.seq(arglist__21517);
    return bdo__delegate(args__5755__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20405_21518 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20406_21519 = null;
    var count__20407_21520 = 0;
    var i__20408_21521 = 0;
    while (true) {
      if (i__20408_21521 < count__20407_21520) {
        var arg__5757__auto___21522 = cljs.core._nth.call(null, chunk__20406_21519, i__20408_21521);
        a__5756__auto__.push(arg__5757__auto___21522);
        var G__21523 = seq__20405_21518;
        var G__21524 = chunk__20406_21519;
        var G__21525 = count__20407_21520;
        var G__21526 = i__20408_21521 + 1;
        seq__20405_21518 = G__21523;
        chunk__20406_21519 = G__21524;
        count__20407_21520 = G__21525;
        i__20408_21521 = G__21526;
        continue;
      } else {
        var temp__4126__auto___21527 = cljs.core.seq.call(null, seq__20405_21518);
        if (temp__4126__auto___21527) {
          var seq__20405_21528__$1 = temp__4126__auto___21527;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20405_21528__$1)) {
            var c__5012__auto___21529 = cljs.core.chunk_first.call(null, seq__20405_21528__$1);
            var G__21530 = cljs.core.chunk_rest.call(null, seq__20405_21528__$1);
            var G__21531 = c__5012__auto___21529;
            var G__21532 = cljs.core.count.call(null, c__5012__auto___21529);
            var G__21533 = 0;
            seq__20405_21518 = G__21530;
            chunk__20406_21519 = G__21531;
            count__20407_21520 = G__21532;
            i__20408_21521 = G__21533;
            continue;
          } else {
            var arg__5757__auto___21534 = cljs.core.first.call(null, seq__20405_21528__$1);
            a__5756__auto__.push(arg__5757__auto___21534);
            var G__21535 = cljs.core.next.call(null, seq__20405_21528__$1);
            var G__21536 = null;
            var G__21537 = 0;
            var G__21538 = 0;
            seq__20405_21518 = G__21535;
            chunk__20406_21519 = G__21536;
            count__20407_21520 = G__21537;
            i__20408_21521 = G__21538;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__5756__auto__);
  };
  var big = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21539__i = 0, G__21539__a = new Array(arguments.length - 0);
      while (G__21539__i < G__21539__a.length) {
        G__21539__a[G__21539__i] = arguments[G__21539__i + 0];
        ++G__21539__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21539__a, 0);
    }
    return big__delegate.call(this, args__5755__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__21540) {
    var args__5755__auto__ = cljs.core.seq(arglist__21540);
    return big__delegate(args__5755__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20413_21541 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20414_21542 = null;
    var count__20415_21543 = 0;
    var i__20416_21544 = 0;
    while (true) {
      if (i__20416_21544 < count__20415_21543) {
        var arg__5757__auto___21545 = cljs.core._nth.call(null, chunk__20414_21542, i__20416_21544);
        a__5756__auto__.push(arg__5757__auto___21545);
        var G__21546 = seq__20413_21541;
        var G__21547 = chunk__20414_21542;
        var G__21548 = count__20415_21543;
        var G__21549 = i__20416_21544 + 1;
        seq__20413_21541 = G__21546;
        chunk__20414_21542 = G__21547;
        count__20415_21543 = G__21548;
        i__20416_21544 = G__21549;
        continue;
      } else {
        var temp__4126__auto___21550 = cljs.core.seq.call(null, seq__20413_21541);
        if (temp__4126__auto___21550) {
          var seq__20413_21551__$1 = temp__4126__auto___21550;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20413_21551__$1)) {
            var c__5012__auto___21552 = cljs.core.chunk_first.call(null, seq__20413_21551__$1);
            var G__21553 = cljs.core.chunk_rest.call(null, seq__20413_21551__$1);
            var G__21554 = c__5012__auto___21552;
            var G__21555 = cljs.core.count.call(null, c__5012__auto___21552);
            var G__21556 = 0;
            seq__20413_21541 = G__21553;
            chunk__20414_21542 = G__21554;
            count__20415_21543 = G__21555;
            i__20416_21544 = G__21556;
            continue;
          } else {
            var arg__5757__auto___21557 = cljs.core.first.call(null, seq__20413_21551__$1);
            a__5756__auto__.push(arg__5757__auto___21557);
            var G__21558 = cljs.core.next.call(null, seq__20413_21551__$1);
            var G__21559 = null;
            var G__21560 = 0;
            var G__21561 = 0;
            seq__20413_21541 = G__21558;
            chunk__20414_21542 = G__21559;
            count__20415_21543 = G__21560;
            i__20416_21544 = G__21561;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__5756__auto__);
  };
  var blockquote = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21562__i = 0, G__21562__a = new Array(arguments.length - 0);
      while (G__21562__i < G__21562__a.length) {
        G__21562__a[G__21562__i] = arguments[G__21562__i + 0];
        ++G__21562__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21562__a, 0);
    }
    return blockquote__delegate.call(this, args__5755__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__21563) {
    var args__5755__auto__ = cljs.core.seq(arglist__21563);
    return blockquote__delegate(args__5755__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20421_21564 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20422_21565 = null;
    var count__20423_21566 = 0;
    var i__20424_21567 = 0;
    while (true) {
      if (i__20424_21567 < count__20423_21566) {
        var arg__5757__auto___21568 = cljs.core._nth.call(null, chunk__20422_21565, i__20424_21567);
        a__5756__auto__.push(arg__5757__auto___21568);
        var G__21569 = seq__20421_21564;
        var G__21570 = chunk__20422_21565;
        var G__21571 = count__20423_21566;
        var G__21572 = i__20424_21567 + 1;
        seq__20421_21564 = G__21569;
        chunk__20422_21565 = G__21570;
        count__20423_21566 = G__21571;
        i__20424_21567 = G__21572;
        continue;
      } else {
        var temp__4126__auto___21573 = cljs.core.seq.call(null, seq__20421_21564);
        if (temp__4126__auto___21573) {
          var seq__20421_21574__$1 = temp__4126__auto___21573;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20421_21574__$1)) {
            var c__5012__auto___21575 = cljs.core.chunk_first.call(null, seq__20421_21574__$1);
            var G__21576 = cljs.core.chunk_rest.call(null, seq__20421_21574__$1);
            var G__21577 = c__5012__auto___21575;
            var G__21578 = cljs.core.count.call(null, c__5012__auto___21575);
            var G__21579 = 0;
            seq__20421_21564 = G__21576;
            chunk__20422_21565 = G__21577;
            count__20423_21566 = G__21578;
            i__20424_21567 = G__21579;
            continue;
          } else {
            var arg__5757__auto___21580 = cljs.core.first.call(null, seq__20421_21574__$1);
            a__5756__auto__.push(arg__5757__auto___21580);
            var G__21581 = cljs.core.next.call(null, seq__20421_21574__$1);
            var G__21582 = null;
            var G__21583 = 0;
            var G__21584 = 0;
            seq__20421_21564 = G__21581;
            chunk__20422_21565 = G__21582;
            count__20423_21566 = G__21583;
            i__20424_21567 = G__21584;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__5756__auto__);
  };
  var body = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21585__i = 0, G__21585__a = new Array(arguments.length - 0);
      while (G__21585__i < G__21585__a.length) {
        G__21585__a[G__21585__i] = arguments[G__21585__i + 0];
        ++G__21585__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21585__a, 0);
    }
    return body__delegate.call(this, args__5755__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__21586) {
    var args__5755__auto__ = cljs.core.seq(arglist__21586);
    return body__delegate(args__5755__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20429_21587 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20430_21588 = null;
    var count__20431_21589 = 0;
    var i__20432_21590 = 0;
    while (true) {
      if (i__20432_21590 < count__20431_21589) {
        var arg__5757__auto___21591 = cljs.core._nth.call(null, chunk__20430_21588, i__20432_21590);
        a__5756__auto__.push(arg__5757__auto___21591);
        var G__21592 = seq__20429_21587;
        var G__21593 = chunk__20430_21588;
        var G__21594 = count__20431_21589;
        var G__21595 = i__20432_21590 + 1;
        seq__20429_21587 = G__21592;
        chunk__20430_21588 = G__21593;
        count__20431_21589 = G__21594;
        i__20432_21590 = G__21595;
        continue;
      } else {
        var temp__4126__auto___21596 = cljs.core.seq.call(null, seq__20429_21587);
        if (temp__4126__auto___21596) {
          var seq__20429_21597__$1 = temp__4126__auto___21596;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20429_21597__$1)) {
            var c__5012__auto___21598 = cljs.core.chunk_first.call(null, seq__20429_21597__$1);
            var G__21599 = cljs.core.chunk_rest.call(null, seq__20429_21597__$1);
            var G__21600 = c__5012__auto___21598;
            var G__21601 = cljs.core.count.call(null, c__5012__auto___21598);
            var G__21602 = 0;
            seq__20429_21587 = G__21599;
            chunk__20430_21588 = G__21600;
            count__20431_21589 = G__21601;
            i__20432_21590 = G__21602;
            continue;
          } else {
            var arg__5757__auto___21603 = cljs.core.first.call(null, seq__20429_21597__$1);
            a__5756__auto__.push(arg__5757__auto___21603);
            var G__21604 = cljs.core.next.call(null, seq__20429_21597__$1);
            var G__21605 = null;
            var G__21606 = 0;
            var G__21607 = 0;
            seq__20429_21587 = G__21604;
            chunk__20430_21588 = G__21605;
            count__20431_21589 = G__21606;
            i__20432_21590 = G__21607;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__5756__auto__);
  };
  var br = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21608__i = 0, G__21608__a = new Array(arguments.length - 0);
      while (G__21608__i < G__21608__a.length) {
        G__21608__a[G__21608__i] = arguments[G__21608__i + 0];
        ++G__21608__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21608__a, 0);
    }
    return br__delegate.call(this, args__5755__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__21609) {
    var args__5755__auto__ = cljs.core.seq(arglist__21609);
    return br__delegate(args__5755__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20437_21610 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20438_21611 = null;
    var count__20439_21612 = 0;
    var i__20440_21613 = 0;
    while (true) {
      if (i__20440_21613 < count__20439_21612) {
        var arg__5757__auto___21614 = cljs.core._nth.call(null, chunk__20438_21611, i__20440_21613);
        a__5756__auto__.push(arg__5757__auto___21614);
        var G__21615 = seq__20437_21610;
        var G__21616 = chunk__20438_21611;
        var G__21617 = count__20439_21612;
        var G__21618 = i__20440_21613 + 1;
        seq__20437_21610 = G__21615;
        chunk__20438_21611 = G__21616;
        count__20439_21612 = G__21617;
        i__20440_21613 = G__21618;
        continue;
      } else {
        var temp__4126__auto___21619 = cljs.core.seq.call(null, seq__20437_21610);
        if (temp__4126__auto___21619) {
          var seq__20437_21620__$1 = temp__4126__auto___21619;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20437_21620__$1)) {
            var c__5012__auto___21621 = cljs.core.chunk_first.call(null, seq__20437_21620__$1);
            var G__21622 = cljs.core.chunk_rest.call(null, seq__20437_21620__$1);
            var G__21623 = c__5012__auto___21621;
            var G__21624 = cljs.core.count.call(null, c__5012__auto___21621);
            var G__21625 = 0;
            seq__20437_21610 = G__21622;
            chunk__20438_21611 = G__21623;
            count__20439_21612 = G__21624;
            i__20440_21613 = G__21625;
            continue;
          } else {
            var arg__5757__auto___21626 = cljs.core.first.call(null, seq__20437_21620__$1);
            a__5756__auto__.push(arg__5757__auto___21626);
            var G__21627 = cljs.core.next.call(null, seq__20437_21620__$1);
            var G__21628 = null;
            var G__21629 = 0;
            var G__21630 = 0;
            seq__20437_21610 = G__21627;
            chunk__20438_21611 = G__21628;
            count__20439_21612 = G__21629;
            i__20440_21613 = G__21630;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__5756__auto__);
  };
  var button = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21631__i = 0, G__21631__a = new Array(arguments.length - 0);
      while (G__21631__i < G__21631__a.length) {
        G__21631__a[G__21631__i] = arguments[G__21631__i + 0];
        ++G__21631__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21631__a, 0);
    }
    return button__delegate.call(this, args__5755__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__21632) {
    var args__5755__auto__ = cljs.core.seq(arglist__21632);
    return button__delegate(args__5755__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20445_21633 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20446_21634 = null;
    var count__20447_21635 = 0;
    var i__20448_21636 = 0;
    while (true) {
      if (i__20448_21636 < count__20447_21635) {
        var arg__5757__auto___21637 = cljs.core._nth.call(null, chunk__20446_21634, i__20448_21636);
        a__5756__auto__.push(arg__5757__auto___21637);
        var G__21638 = seq__20445_21633;
        var G__21639 = chunk__20446_21634;
        var G__21640 = count__20447_21635;
        var G__21641 = i__20448_21636 + 1;
        seq__20445_21633 = G__21638;
        chunk__20446_21634 = G__21639;
        count__20447_21635 = G__21640;
        i__20448_21636 = G__21641;
        continue;
      } else {
        var temp__4126__auto___21642 = cljs.core.seq.call(null, seq__20445_21633);
        if (temp__4126__auto___21642) {
          var seq__20445_21643__$1 = temp__4126__auto___21642;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20445_21643__$1)) {
            var c__5012__auto___21644 = cljs.core.chunk_first.call(null, seq__20445_21643__$1);
            var G__21645 = cljs.core.chunk_rest.call(null, seq__20445_21643__$1);
            var G__21646 = c__5012__auto___21644;
            var G__21647 = cljs.core.count.call(null, c__5012__auto___21644);
            var G__21648 = 0;
            seq__20445_21633 = G__21645;
            chunk__20446_21634 = G__21646;
            count__20447_21635 = G__21647;
            i__20448_21636 = G__21648;
            continue;
          } else {
            var arg__5757__auto___21649 = cljs.core.first.call(null, seq__20445_21643__$1);
            a__5756__auto__.push(arg__5757__auto___21649);
            var G__21650 = cljs.core.next.call(null, seq__20445_21643__$1);
            var G__21651 = null;
            var G__21652 = 0;
            var G__21653 = 0;
            seq__20445_21633 = G__21650;
            chunk__20446_21634 = G__21651;
            count__20447_21635 = G__21652;
            i__20448_21636 = G__21653;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__5756__auto__);
  };
  var canvas = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21654__i = 0, G__21654__a = new Array(arguments.length - 0);
      while (G__21654__i < G__21654__a.length) {
        G__21654__a[G__21654__i] = arguments[G__21654__i + 0];
        ++G__21654__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21654__a, 0);
    }
    return canvas__delegate.call(this, args__5755__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__21655) {
    var args__5755__auto__ = cljs.core.seq(arglist__21655);
    return canvas__delegate(args__5755__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20453_21656 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20454_21657 = null;
    var count__20455_21658 = 0;
    var i__20456_21659 = 0;
    while (true) {
      if (i__20456_21659 < count__20455_21658) {
        var arg__5757__auto___21660 = cljs.core._nth.call(null, chunk__20454_21657, i__20456_21659);
        a__5756__auto__.push(arg__5757__auto___21660);
        var G__21661 = seq__20453_21656;
        var G__21662 = chunk__20454_21657;
        var G__21663 = count__20455_21658;
        var G__21664 = i__20456_21659 + 1;
        seq__20453_21656 = G__21661;
        chunk__20454_21657 = G__21662;
        count__20455_21658 = G__21663;
        i__20456_21659 = G__21664;
        continue;
      } else {
        var temp__4126__auto___21665 = cljs.core.seq.call(null, seq__20453_21656);
        if (temp__4126__auto___21665) {
          var seq__20453_21666__$1 = temp__4126__auto___21665;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20453_21666__$1)) {
            var c__5012__auto___21667 = cljs.core.chunk_first.call(null, seq__20453_21666__$1);
            var G__21668 = cljs.core.chunk_rest.call(null, seq__20453_21666__$1);
            var G__21669 = c__5012__auto___21667;
            var G__21670 = cljs.core.count.call(null, c__5012__auto___21667);
            var G__21671 = 0;
            seq__20453_21656 = G__21668;
            chunk__20454_21657 = G__21669;
            count__20455_21658 = G__21670;
            i__20456_21659 = G__21671;
            continue;
          } else {
            var arg__5757__auto___21672 = cljs.core.first.call(null, seq__20453_21666__$1);
            a__5756__auto__.push(arg__5757__auto___21672);
            var G__21673 = cljs.core.next.call(null, seq__20453_21666__$1);
            var G__21674 = null;
            var G__21675 = 0;
            var G__21676 = 0;
            seq__20453_21656 = G__21673;
            chunk__20454_21657 = G__21674;
            count__20455_21658 = G__21675;
            i__20456_21659 = G__21676;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__5756__auto__);
  };
  var caption = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21677__i = 0, G__21677__a = new Array(arguments.length - 0);
      while (G__21677__i < G__21677__a.length) {
        G__21677__a[G__21677__i] = arguments[G__21677__i + 0];
        ++G__21677__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21677__a, 0);
    }
    return caption__delegate.call(this, args__5755__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__21678) {
    var args__5755__auto__ = cljs.core.seq(arglist__21678);
    return caption__delegate(args__5755__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20461_21679 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20462_21680 = null;
    var count__20463_21681 = 0;
    var i__20464_21682 = 0;
    while (true) {
      if (i__20464_21682 < count__20463_21681) {
        var arg__5757__auto___21683 = cljs.core._nth.call(null, chunk__20462_21680, i__20464_21682);
        a__5756__auto__.push(arg__5757__auto___21683);
        var G__21684 = seq__20461_21679;
        var G__21685 = chunk__20462_21680;
        var G__21686 = count__20463_21681;
        var G__21687 = i__20464_21682 + 1;
        seq__20461_21679 = G__21684;
        chunk__20462_21680 = G__21685;
        count__20463_21681 = G__21686;
        i__20464_21682 = G__21687;
        continue;
      } else {
        var temp__4126__auto___21688 = cljs.core.seq.call(null, seq__20461_21679);
        if (temp__4126__auto___21688) {
          var seq__20461_21689__$1 = temp__4126__auto___21688;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20461_21689__$1)) {
            var c__5012__auto___21690 = cljs.core.chunk_first.call(null, seq__20461_21689__$1);
            var G__21691 = cljs.core.chunk_rest.call(null, seq__20461_21689__$1);
            var G__21692 = c__5012__auto___21690;
            var G__21693 = cljs.core.count.call(null, c__5012__auto___21690);
            var G__21694 = 0;
            seq__20461_21679 = G__21691;
            chunk__20462_21680 = G__21692;
            count__20463_21681 = G__21693;
            i__20464_21682 = G__21694;
            continue;
          } else {
            var arg__5757__auto___21695 = cljs.core.first.call(null, seq__20461_21689__$1);
            a__5756__auto__.push(arg__5757__auto___21695);
            var G__21696 = cljs.core.next.call(null, seq__20461_21689__$1);
            var G__21697 = null;
            var G__21698 = 0;
            var G__21699 = 0;
            seq__20461_21679 = G__21696;
            chunk__20462_21680 = G__21697;
            count__20463_21681 = G__21698;
            i__20464_21682 = G__21699;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__5756__auto__);
  };
  var cite = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21700__i = 0, G__21700__a = new Array(arguments.length - 0);
      while (G__21700__i < G__21700__a.length) {
        G__21700__a[G__21700__i] = arguments[G__21700__i + 0];
        ++G__21700__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21700__a, 0);
    }
    return cite__delegate.call(this, args__5755__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__21701) {
    var args__5755__auto__ = cljs.core.seq(arglist__21701);
    return cite__delegate(args__5755__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20469_21702 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20470_21703 = null;
    var count__20471_21704 = 0;
    var i__20472_21705 = 0;
    while (true) {
      if (i__20472_21705 < count__20471_21704) {
        var arg__5757__auto___21706 = cljs.core._nth.call(null, chunk__20470_21703, i__20472_21705);
        a__5756__auto__.push(arg__5757__auto___21706);
        var G__21707 = seq__20469_21702;
        var G__21708 = chunk__20470_21703;
        var G__21709 = count__20471_21704;
        var G__21710 = i__20472_21705 + 1;
        seq__20469_21702 = G__21707;
        chunk__20470_21703 = G__21708;
        count__20471_21704 = G__21709;
        i__20472_21705 = G__21710;
        continue;
      } else {
        var temp__4126__auto___21711 = cljs.core.seq.call(null, seq__20469_21702);
        if (temp__4126__auto___21711) {
          var seq__20469_21712__$1 = temp__4126__auto___21711;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20469_21712__$1)) {
            var c__5012__auto___21713 = cljs.core.chunk_first.call(null, seq__20469_21712__$1);
            var G__21714 = cljs.core.chunk_rest.call(null, seq__20469_21712__$1);
            var G__21715 = c__5012__auto___21713;
            var G__21716 = cljs.core.count.call(null, c__5012__auto___21713);
            var G__21717 = 0;
            seq__20469_21702 = G__21714;
            chunk__20470_21703 = G__21715;
            count__20471_21704 = G__21716;
            i__20472_21705 = G__21717;
            continue;
          } else {
            var arg__5757__auto___21718 = cljs.core.first.call(null, seq__20469_21712__$1);
            a__5756__auto__.push(arg__5757__auto___21718);
            var G__21719 = cljs.core.next.call(null, seq__20469_21712__$1);
            var G__21720 = null;
            var G__21721 = 0;
            var G__21722 = 0;
            seq__20469_21702 = G__21719;
            chunk__20470_21703 = G__21720;
            count__20471_21704 = G__21721;
            i__20472_21705 = G__21722;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__5756__auto__);
  };
  var code = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21723__i = 0, G__21723__a = new Array(arguments.length - 0);
      while (G__21723__i < G__21723__a.length) {
        G__21723__a[G__21723__i] = arguments[G__21723__i + 0];
        ++G__21723__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21723__a, 0);
    }
    return code__delegate.call(this, args__5755__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__21724) {
    var args__5755__auto__ = cljs.core.seq(arglist__21724);
    return code__delegate(args__5755__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20477_21725 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20478_21726 = null;
    var count__20479_21727 = 0;
    var i__20480_21728 = 0;
    while (true) {
      if (i__20480_21728 < count__20479_21727) {
        var arg__5757__auto___21729 = cljs.core._nth.call(null, chunk__20478_21726, i__20480_21728);
        a__5756__auto__.push(arg__5757__auto___21729);
        var G__21730 = seq__20477_21725;
        var G__21731 = chunk__20478_21726;
        var G__21732 = count__20479_21727;
        var G__21733 = i__20480_21728 + 1;
        seq__20477_21725 = G__21730;
        chunk__20478_21726 = G__21731;
        count__20479_21727 = G__21732;
        i__20480_21728 = G__21733;
        continue;
      } else {
        var temp__4126__auto___21734 = cljs.core.seq.call(null, seq__20477_21725);
        if (temp__4126__auto___21734) {
          var seq__20477_21735__$1 = temp__4126__auto___21734;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20477_21735__$1)) {
            var c__5012__auto___21736 = cljs.core.chunk_first.call(null, seq__20477_21735__$1);
            var G__21737 = cljs.core.chunk_rest.call(null, seq__20477_21735__$1);
            var G__21738 = c__5012__auto___21736;
            var G__21739 = cljs.core.count.call(null, c__5012__auto___21736);
            var G__21740 = 0;
            seq__20477_21725 = G__21737;
            chunk__20478_21726 = G__21738;
            count__20479_21727 = G__21739;
            i__20480_21728 = G__21740;
            continue;
          } else {
            var arg__5757__auto___21741 = cljs.core.first.call(null, seq__20477_21735__$1);
            a__5756__auto__.push(arg__5757__auto___21741);
            var G__21742 = cljs.core.next.call(null, seq__20477_21735__$1);
            var G__21743 = null;
            var G__21744 = 0;
            var G__21745 = 0;
            seq__20477_21725 = G__21742;
            chunk__20478_21726 = G__21743;
            count__20479_21727 = G__21744;
            i__20480_21728 = G__21745;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__5756__auto__);
  };
  var col = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21746__i = 0, G__21746__a = new Array(arguments.length - 0);
      while (G__21746__i < G__21746__a.length) {
        G__21746__a[G__21746__i] = arguments[G__21746__i + 0];
        ++G__21746__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21746__a, 0);
    }
    return col__delegate.call(this, args__5755__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__21747) {
    var args__5755__auto__ = cljs.core.seq(arglist__21747);
    return col__delegate(args__5755__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20485_21748 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20486_21749 = null;
    var count__20487_21750 = 0;
    var i__20488_21751 = 0;
    while (true) {
      if (i__20488_21751 < count__20487_21750) {
        var arg__5757__auto___21752 = cljs.core._nth.call(null, chunk__20486_21749, i__20488_21751);
        a__5756__auto__.push(arg__5757__auto___21752);
        var G__21753 = seq__20485_21748;
        var G__21754 = chunk__20486_21749;
        var G__21755 = count__20487_21750;
        var G__21756 = i__20488_21751 + 1;
        seq__20485_21748 = G__21753;
        chunk__20486_21749 = G__21754;
        count__20487_21750 = G__21755;
        i__20488_21751 = G__21756;
        continue;
      } else {
        var temp__4126__auto___21757 = cljs.core.seq.call(null, seq__20485_21748);
        if (temp__4126__auto___21757) {
          var seq__20485_21758__$1 = temp__4126__auto___21757;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20485_21758__$1)) {
            var c__5012__auto___21759 = cljs.core.chunk_first.call(null, seq__20485_21758__$1);
            var G__21760 = cljs.core.chunk_rest.call(null, seq__20485_21758__$1);
            var G__21761 = c__5012__auto___21759;
            var G__21762 = cljs.core.count.call(null, c__5012__auto___21759);
            var G__21763 = 0;
            seq__20485_21748 = G__21760;
            chunk__20486_21749 = G__21761;
            count__20487_21750 = G__21762;
            i__20488_21751 = G__21763;
            continue;
          } else {
            var arg__5757__auto___21764 = cljs.core.first.call(null, seq__20485_21758__$1);
            a__5756__auto__.push(arg__5757__auto___21764);
            var G__21765 = cljs.core.next.call(null, seq__20485_21758__$1);
            var G__21766 = null;
            var G__21767 = 0;
            var G__21768 = 0;
            seq__20485_21748 = G__21765;
            chunk__20486_21749 = G__21766;
            count__20487_21750 = G__21767;
            i__20488_21751 = G__21768;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__5756__auto__);
  };
  var colgroup = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21769__i = 0, G__21769__a = new Array(arguments.length - 0);
      while (G__21769__i < G__21769__a.length) {
        G__21769__a[G__21769__i] = arguments[G__21769__i + 0];
        ++G__21769__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21769__a, 0);
    }
    return colgroup__delegate.call(this, args__5755__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__21770) {
    var args__5755__auto__ = cljs.core.seq(arglist__21770);
    return colgroup__delegate(args__5755__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20493_21771 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20494_21772 = null;
    var count__20495_21773 = 0;
    var i__20496_21774 = 0;
    while (true) {
      if (i__20496_21774 < count__20495_21773) {
        var arg__5757__auto___21775 = cljs.core._nth.call(null, chunk__20494_21772, i__20496_21774);
        a__5756__auto__.push(arg__5757__auto___21775);
        var G__21776 = seq__20493_21771;
        var G__21777 = chunk__20494_21772;
        var G__21778 = count__20495_21773;
        var G__21779 = i__20496_21774 + 1;
        seq__20493_21771 = G__21776;
        chunk__20494_21772 = G__21777;
        count__20495_21773 = G__21778;
        i__20496_21774 = G__21779;
        continue;
      } else {
        var temp__4126__auto___21780 = cljs.core.seq.call(null, seq__20493_21771);
        if (temp__4126__auto___21780) {
          var seq__20493_21781__$1 = temp__4126__auto___21780;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20493_21781__$1)) {
            var c__5012__auto___21782 = cljs.core.chunk_first.call(null, seq__20493_21781__$1);
            var G__21783 = cljs.core.chunk_rest.call(null, seq__20493_21781__$1);
            var G__21784 = c__5012__auto___21782;
            var G__21785 = cljs.core.count.call(null, c__5012__auto___21782);
            var G__21786 = 0;
            seq__20493_21771 = G__21783;
            chunk__20494_21772 = G__21784;
            count__20495_21773 = G__21785;
            i__20496_21774 = G__21786;
            continue;
          } else {
            var arg__5757__auto___21787 = cljs.core.first.call(null, seq__20493_21781__$1);
            a__5756__auto__.push(arg__5757__auto___21787);
            var G__21788 = cljs.core.next.call(null, seq__20493_21781__$1);
            var G__21789 = null;
            var G__21790 = 0;
            var G__21791 = 0;
            seq__20493_21771 = G__21788;
            chunk__20494_21772 = G__21789;
            count__20495_21773 = G__21790;
            i__20496_21774 = G__21791;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__5756__auto__);
  };
  var data = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21792__i = 0, G__21792__a = new Array(arguments.length - 0);
      while (G__21792__i < G__21792__a.length) {
        G__21792__a[G__21792__i] = arguments[G__21792__i + 0];
        ++G__21792__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21792__a, 0);
    }
    return data__delegate.call(this, args__5755__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__21793) {
    var args__5755__auto__ = cljs.core.seq(arglist__21793);
    return data__delegate(args__5755__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20501_21794 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20502_21795 = null;
    var count__20503_21796 = 0;
    var i__20504_21797 = 0;
    while (true) {
      if (i__20504_21797 < count__20503_21796) {
        var arg__5757__auto___21798 = cljs.core._nth.call(null, chunk__20502_21795, i__20504_21797);
        a__5756__auto__.push(arg__5757__auto___21798);
        var G__21799 = seq__20501_21794;
        var G__21800 = chunk__20502_21795;
        var G__21801 = count__20503_21796;
        var G__21802 = i__20504_21797 + 1;
        seq__20501_21794 = G__21799;
        chunk__20502_21795 = G__21800;
        count__20503_21796 = G__21801;
        i__20504_21797 = G__21802;
        continue;
      } else {
        var temp__4126__auto___21803 = cljs.core.seq.call(null, seq__20501_21794);
        if (temp__4126__auto___21803) {
          var seq__20501_21804__$1 = temp__4126__auto___21803;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20501_21804__$1)) {
            var c__5012__auto___21805 = cljs.core.chunk_first.call(null, seq__20501_21804__$1);
            var G__21806 = cljs.core.chunk_rest.call(null, seq__20501_21804__$1);
            var G__21807 = c__5012__auto___21805;
            var G__21808 = cljs.core.count.call(null, c__5012__auto___21805);
            var G__21809 = 0;
            seq__20501_21794 = G__21806;
            chunk__20502_21795 = G__21807;
            count__20503_21796 = G__21808;
            i__20504_21797 = G__21809;
            continue;
          } else {
            var arg__5757__auto___21810 = cljs.core.first.call(null, seq__20501_21804__$1);
            a__5756__auto__.push(arg__5757__auto___21810);
            var G__21811 = cljs.core.next.call(null, seq__20501_21804__$1);
            var G__21812 = null;
            var G__21813 = 0;
            var G__21814 = 0;
            seq__20501_21794 = G__21811;
            chunk__20502_21795 = G__21812;
            count__20503_21796 = G__21813;
            i__20504_21797 = G__21814;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__5756__auto__);
  };
  var datalist = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21815__i = 0, G__21815__a = new Array(arguments.length - 0);
      while (G__21815__i < G__21815__a.length) {
        G__21815__a[G__21815__i] = arguments[G__21815__i + 0];
        ++G__21815__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21815__a, 0);
    }
    return datalist__delegate.call(this, args__5755__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__21816) {
    var args__5755__auto__ = cljs.core.seq(arglist__21816);
    return datalist__delegate(args__5755__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20509_21817 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20510_21818 = null;
    var count__20511_21819 = 0;
    var i__20512_21820 = 0;
    while (true) {
      if (i__20512_21820 < count__20511_21819) {
        var arg__5757__auto___21821 = cljs.core._nth.call(null, chunk__20510_21818, i__20512_21820);
        a__5756__auto__.push(arg__5757__auto___21821);
        var G__21822 = seq__20509_21817;
        var G__21823 = chunk__20510_21818;
        var G__21824 = count__20511_21819;
        var G__21825 = i__20512_21820 + 1;
        seq__20509_21817 = G__21822;
        chunk__20510_21818 = G__21823;
        count__20511_21819 = G__21824;
        i__20512_21820 = G__21825;
        continue;
      } else {
        var temp__4126__auto___21826 = cljs.core.seq.call(null, seq__20509_21817);
        if (temp__4126__auto___21826) {
          var seq__20509_21827__$1 = temp__4126__auto___21826;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20509_21827__$1)) {
            var c__5012__auto___21828 = cljs.core.chunk_first.call(null, seq__20509_21827__$1);
            var G__21829 = cljs.core.chunk_rest.call(null, seq__20509_21827__$1);
            var G__21830 = c__5012__auto___21828;
            var G__21831 = cljs.core.count.call(null, c__5012__auto___21828);
            var G__21832 = 0;
            seq__20509_21817 = G__21829;
            chunk__20510_21818 = G__21830;
            count__20511_21819 = G__21831;
            i__20512_21820 = G__21832;
            continue;
          } else {
            var arg__5757__auto___21833 = cljs.core.first.call(null, seq__20509_21827__$1);
            a__5756__auto__.push(arg__5757__auto___21833);
            var G__21834 = cljs.core.next.call(null, seq__20509_21827__$1);
            var G__21835 = null;
            var G__21836 = 0;
            var G__21837 = 0;
            seq__20509_21817 = G__21834;
            chunk__20510_21818 = G__21835;
            count__20511_21819 = G__21836;
            i__20512_21820 = G__21837;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__5756__auto__);
  };
  var dd = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21838__i = 0, G__21838__a = new Array(arguments.length - 0);
      while (G__21838__i < G__21838__a.length) {
        G__21838__a[G__21838__i] = arguments[G__21838__i + 0];
        ++G__21838__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21838__a, 0);
    }
    return dd__delegate.call(this, args__5755__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__21839) {
    var args__5755__auto__ = cljs.core.seq(arglist__21839);
    return dd__delegate(args__5755__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20517_21840 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20518_21841 = null;
    var count__20519_21842 = 0;
    var i__20520_21843 = 0;
    while (true) {
      if (i__20520_21843 < count__20519_21842) {
        var arg__5757__auto___21844 = cljs.core._nth.call(null, chunk__20518_21841, i__20520_21843);
        a__5756__auto__.push(arg__5757__auto___21844);
        var G__21845 = seq__20517_21840;
        var G__21846 = chunk__20518_21841;
        var G__21847 = count__20519_21842;
        var G__21848 = i__20520_21843 + 1;
        seq__20517_21840 = G__21845;
        chunk__20518_21841 = G__21846;
        count__20519_21842 = G__21847;
        i__20520_21843 = G__21848;
        continue;
      } else {
        var temp__4126__auto___21849 = cljs.core.seq.call(null, seq__20517_21840);
        if (temp__4126__auto___21849) {
          var seq__20517_21850__$1 = temp__4126__auto___21849;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20517_21850__$1)) {
            var c__5012__auto___21851 = cljs.core.chunk_first.call(null, seq__20517_21850__$1);
            var G__21852 = cljs.core.chunk_rest.call(null, seq__20517_21850__$1);
            var G__21853 = c__5012__auto___21851;
            var G__21854 = cljs.core.count.call(null, c__5012__auto___21851);
            var G__21855 = 0;
            seq__20517_21840 = G__21852;
            chunk__20518_21841 = G__21853;
            count__20519_21842 = G__21854;
            i__20520_21843 = G__21855;
            continue;
          } else {
            var arg__5757__auto___21856 = cljs.core.first.call(null, seq__20517_21850__$1);
            a__5756__auto__.push(arg__5757__auto___21856);
            var G__21857 = cljs.core.next.call(null, seq__20517_21850__$1);
            var G__21858 = null;
            var G__21859 = 0;
            var G__21860 = 0;
            seq__20517_21840 = G__21857;
            chunk__20518_21841 = G__21858;
            count__20519_21842 = G__21859;
            i__20520_21843 = G__21860;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__5756__auto__);
  };
  var del = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21861__i = 0, G__21861__a = new Array(arguments.length - 0);
      while (G__21861__i < G__21861__a.length) {
        G__21861__a[G__21861__i] = arguments[G__21861__i + 0];
        ++G__21861__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21861__a, 0);
    }
    return del__delegate.call(this, args__5755__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__21862) {
    var args__5755__auto__ = cljs.core.seq(arglist__21862);
    return del__delegate(args__5755__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20525_21863 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20526_21864 = null;
    var count__20527_21865 = 0;
    var i__20528_21866 = 0;
    while (true) {
      if (i__20528_21866 < count__20527_21865) {
        var arg__5757__auto___21867 = cljs.core._nth.call(null, chunk__20526_21864, i__20528_21866);
        a__5756__auto__.push(arg__5757__auto___21867);
        var G__21868 = seq__20525_21863;
        var G__21869 = chunk__20526_21864;
        var G__21870 = count__20527_21865;
        var G__21871 = i__20528_21866 + 1;
        seq__20525_21863 = G__21868;
        chunk__20526_21864 = G__21869;
        count__20527_21865 = G__21870;
        i__20528_21866 = G__21871;
        continue;
      } else {
        var temp__4126__auto___21872 = cljs.core.seq.call(null, seq__20525_21863);
        if (temp__4126__auto___21872) {
          var seq__20525_21873__$1 = temp__4126__auto___21872;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20525_21873__$1)) {
            var c__5012__auto___21874 = cljs.core.chunk_first.call(null, seq__20525_21873__$1);
            var G__21875 = cljs.core.chunk_rest.call(null, seq__20525_21873__$1);
            var G__21876 = c__5012__auto___21874;
            var G__21877 = cljs.core.count.call(null, c__5012__auto___21874);
            var G__21878 = 0;
            seq__20525_21863 = G__21875;
            chunk__20526_21864 = G__21876;
            count__20527_21865 = G__21877;
            i__20528_21866 = G__21878;
            continue;
          } else {
            var arg__5757__auto___21879 = cljs.core.first.call(null, seq__20525_21873__$1);
            a__5756__auto__.push(arg__5757__auto___21879);
            var G__21880 = cljs.core.next.call(null, seq__20525_21873__$1);
            var G__21881 = null;
            var G__21882 = 0;
            var G__21883 = 0;
            seq__20525_21863 = G__21880;
            chunk__20526_21864 = G__21881;
            count__20527_21865 = G__21882;
            i__20528_21866 = G__21883;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__5756__auto__);
  };
  var details = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21884__i = 0, G__21884__a = new Array(arguments.length - 0);
      while (G__21884__i < G__21884__a.length) {
        G__21884__a[G__21884__i] = arguments[G__21884__i + 0];
        ++G__21884__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21884__a, 0);
    }
    return details__delegate.call(this, args__5755__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__21885) {
    var args__5755__auto__ = cljs.core.seq(arglist__21885);
    return details__delegate(args__5755__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20533_21886 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20534_21887 = null;
    var count__20535_21888 = 0;
    var i__20536_21889 = 0;
    while (true) {
      if (i__20536_21889 < count__20535_21888) {
        var arg__5757__auto___21890 = cljs.core._nth.call(null, chunk__20534_21887, i__20536_21889);
        a__5756__auto__.push(arg__5757__auto___21890);
        var G__21891 = seq__20533_21886;
        var G__21892 = chunk__20534_21887;
        var G__21893 = count__20535_21888;
        var G__21894 = i__20536_21889 + 1;
        seq__20533_21886 = G__21891;
        chunk__20534_21887 = G__21892;
        count__20535_21888 = G__21893;
        i__20536_21889 = G__21894;
        continue;
      } else {
        var temp__4126__auto___21895 = cljs.core.seq.call(null, seq__20533_21886);
        if (temp__4126__auto___21895) {
          var seq__20533_21896__$1 = temp__4126__auto___21895;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20533_21896__$1)) {
            var c__5012__auto___21897 = cljs.core.chunk_first.call(null, seq__20533_21896__$1);
            var G__21898 = cljs.core.chunk_rest.call(null, seq__20533_21896__$1);
            var G__21899 = c__5012__auto___21897;
            var G__21900 = cljs.core.count.call(null, c__5012__auto___21897);
            var G__21901 = 0;
            seq__20533_21886 = G__21898;
            chunk__20534_21887 = G__21899;
            count__20535_21888 = G__21900;
            i__20536_21889 = G__21901;
            continue;
          } else {
            var arg__5757__auto___21902 = cljs.core.first.call(null, seq__20533_21896__$1);
            a__5756__auto__.push(arg__5757__auto___21902);
            var G__21903 = cljs.core.next.call(null, seq__20533_21896__$1);
            var G__21904 = null;
            var G__21905 = 0;
            var G__21906 = 0;
            seq__20533_21886 = G__21903;
            chunk__20534_21887 = G__21904;
            count__20535_21888 = G__21905;
            i__20536_21889 = G__21906;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__5756__auto__);
  };
  var dfn = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21907__i = 0, G__21907__a = new Array(arguments.length - 0);
      while (G__21907__i < G__21907__a.length) {
        G__21907__a[G__21907__i] = arguments[G__21907__i + 0];
        ++G__21907__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21907__a, 0);
    }
    return dfn__delegate.call(this, args__5755__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__21908) {
    var args__5755__auto__ = cljs.core.seq(arglist__21908);
    return dfn__delegate(args__5755__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20541_21909 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20542_21910 = null;
    var count__20543_21911 = 0;
    var i__20544_21912 = 0;
    while (true) {
      if (i__20544_21912 < count__20543_21911) {
        var arg__5757__auto___21913 = cljs.core._nth.call(null, chunk__20542_21910, i__20544_21912);
        a__5756__auto__.push(arg__5757__auto___21913);
        var G__21914 = seq__20541_21909;
        var G__21915 = chunk__20542_21910;
        var G__21916 = count__20543_21911;
        var G__21917 = i__20544_21912 + 1;
        seq__20541_21909 = G__21914;
        chunk__20542_21910 = G__21915;
        count__20543_21911 = G__21916;
        i__20544_21912 = G__21917;
        continue;
      } else {
        var temp__4126__auto___21918 = cljs.core.seq.call(null, seq__20541_21909);
        if (temp__4126__auto___21918) {
          var seq__20541_21919__$1 = temp__4126__auto___21918;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20541_21919__$1)) {
            var c__5012__auto___21920 = cljs.core.chunk_first.call(null, seq__20541_21919__$1);
            var G__21921 = cljs.core.chunk_rest.call(null, seq__20541_21919__$1);
            var G__21922 = c__5012__auto___21920;
            var G__21923 = cljs.core.count.call(null, c__5012__auto___21920);
            var G__21924 = 0;
            seq__20541_21909 = G__21921;
            chunk__20542_21910 = G__21922;
            count__20543_21911 = G__21923;
            i__20544_21912 = G__21924;
            continue;
          } else {
            var arg__5757__auto___21925 = cljs.core.first.call(null, seq__20541_21919__$1);
            a__5756__auto__.push(arg__5757__auto___21925);
            var G__21926 = cljs.core.next.call(null, seq__20541_21919__$1);
            var G__21927 = null;
            var G__21928 = 0;
            var G__21929 = 0;
            seq__20541_21909 = G__21926;
            chunk__20542_21910 = G__21927;
            count__20543_21911 = G__21928;
            i__20544_21912 = G__21929;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__5756__auto__);
  };
  var div = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21930__i = 0, G__21930__a = new Array(arguments.length - 0);
      while (G__21930__i < G__21930__a.length) {
        G__21930__a[G__21930__i] = arguments[G__21930__i + 0];
        ++G__21930__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21930__a, 0);
    }
    return div__delegate.call(this, args__5755__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__21931) {
    var args__5755__auto__ = cljs.core.seq(arglist__21931);
    return div__delegate(args__5755__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20549_21932 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20550_21933 = null;
    var count__20551_21934 = 0;
    var i__20552_21935 = 0;
    while (true) {
      if (i__20552_21935 < count__20551_21934) {
        var arg__5757__auto___21936 = cljs.core._nth.call(null, chunk__20550_21933, i__20552_21935);
        a__5756__auto__.push(arg__5757__auto___21936);
        var G__21937 = seq__20549_21932;
        var G__21938 = chunk__20550_21933;
        var G__21939 = count__20551_21934;
        var G__21940 = i__20552_21935 + 1;
        seq__20549_21932 = G__21937;
        chunk__20550_21933 = G__21938;
        count__20551_21934 = G__21939;
        i__20552_21935 = G__21940;
        continue;
      } else {
        var temp__4126__auto___21941 = cljs.core.seq.call(null, seq__20549_21932);
        if (temp__4126__auto___21941) {
          var seq__20549_21942__$1 = temp__4126__auto___21941;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20549_21942__$1)) {
            var c__5012__auto___21943 = cljs.core.chunk_first.call(null, seq__20549_21942__$1);
            var G__21944 = cljs.core.chunk_rest.call(null, seq__20549_21942__$1);
            var G__21945 = c__5012__auto___21943;
            var G__21946 = cljs.core.count.call(null, c__5012__auto___21943);
            var G__21947 = 0;
            seq__20549_21932 = G__21944;
            chunk__20550_21933 = G__21945;
            count__20551_21934 = G__21946;
            i__20552_21935 = G__21947;
            continue;
          } else {
            var arg__5757__auto___21948 = cljs.core.first.call(null, seq__20549_21942__$1);
            a__5756__auto__.push(arg__5757__auto___21948);
            var G__21949 = cljs.core.next.call(null, seq__20549_21942__$1);
            var G__21950 = null;
            var G__21951 = 0;
            var G__21952 = 0;
            seq__20549_21932 = G__21949;
            chunk__20550_21933 = G__21950;
            count__20551_21934 = G__21951;
            i__20552_21935 = G__21952;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__5756__auto__);
  };
  var dl = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21953__i = 0, G__21953__a = new Array(arguments.length - 0);
      while (G__21953__i < G__21953__a.length) {
        G__21953__a[G__21953__i] = arguments[G__21953__i + 0];
        ++G__21953__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21953__a, 0);
    }
    return dl__delegate.call(this, args__5755__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__21954) {
    var args__5755__auto__ = cljs.core.seq(arglist__21954);
    return dl__delegate(args__5755__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20557_21955 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20558_21956 = null;
    var count__20559_21957 = 0;
    var i__20560_21958 = 0;
    while (true) {
      if (i__20560_21958 < count__20559_21957) {
        var arg__5757__auto___21959 = cljs.core._nth.call(null, chunk__20558_21956, i__20560_21958);
        a__5756__auto__.push(arg__5757__auto___21959);
        var G__21960 = seq__20557_21955;
        var G__21961 = chunk__20558_21956;
        var G__21962 = count__20559_21957;
        var G__21963 = i__20560_21958 + 1;
        seq__20557_21955 = G__21960;
        chunk__20558_21956 = G__21961;
        count__20559_21957 = G__21962;
        i__20560_21958 = G__21963;
        continue;
      } else {
        var temp__4126__auto___21964 = cljs.core.seq.call(null, seq__20557_21955);
        if (temp__4126__auto___21964) {
          var seq__20557_21965__$1 = temp__4126__auto___21964;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20557_21965__$1)) {
            var c__5012__auto___21966 = cljs.core.chunk_first.call(null, seq__20557_21965__$1);
            var G__21967 = cljs.core.chunk_rest.call(null, seq__20557_21965__$1);
            var G__21968 = c__5012__auto___21966;
            var G__21969 = cljs.core.count.call(null, c__5012__auto___21966);
            var G__21970 = 0;
            seq__20557_21955 = G__21967;
            chunk__20558_21956 = G__21968;
            count__20559_21957 = G__21969;
            i__20560_21958 = G__21970;
            continue;
          } else {
            var arg__5757__auto___21971 = cljs.core.first.call(null, seq__20557_21965__$1);
            a__5756__auto__.push(arg__5757__auto___21971);
            var G__21972 = cljs.core.next.call(null, seq__20557_21965__$1);
            var G__21973 = null;
            var G__21974 = 0;
            var G__21975 = 0;
            seq__20557_21955 = G__21972;
            chunk__20558_21956 = G__21973;
            count__20559_21957 = G__21974;
            i__20560_21958 = G__21975;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__5756__auto__);
  };
  var dt = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21976__i = 0, G__21976__a = new Array(arguments.length - 0);
      while (G__21976__i < G__21976__a.length) {
        G__21976__a[G__21976__i] = arguments[G__21976__i + 0];
        ++G__21976__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21976__a, 0);
    }
    return dt__delegate.call(this, args__5755__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__21977) {
    var args__5755__auto__ = cljs.core.seq(arglist__21977);
    return dt__delegate(args__5755__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20565_21978 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20566_21979 = null;
    var count__20567_21980 = 0;
    var i__20568_21981 = 0;
    while (true) {
      if (i__20568_21981 < count__20567_21980) {
        var arg__5757__auto___21982 = cljs.core._nth.call(null, chunk__20566_21979, i__20568_21981);
        a__5756__auto__.push(arg__5757__auto___21982);
        var G__21983 = seq__20565_21978;
        var G__21984 = chunk__20566_21979;
        var G__21985 = count__20567_21980;
        var G__21986 = i__20568_21981 + 1;
        seq__20565_21978 = G__21983;
        chunk__20566_21979 = G__21984;
        count__20567_21980 = G__21985;
        i__20568_21981 = G__21986;
        continue;
      } else {
        var temp__4126__auto___21987 = cljs.core.seq.call(null, seq__20565_21978);
        if (temp__4126__auto___21987) {
          var seq__20565_21988__$1 = temp__4126__auto___21987;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20565_21988__$1)) {
            var c__5012__auto___21989 = cljs.core.chunk_first.call(null, seq__20565_21988__$1);
            var G__21990 = cljs.core.chunk_rest.call(null, seq__20565_21988__$1);
            var G__21991 = c__5012__auto___21989;
            var G__21992 = cljs.core.count.call(null, c__5012__auto___21989);
            var G__21993 = 0;
            seq__20565_21978 = G__21990;
            chunk__20566_21979 = G__21991;
            count__20567_21980 = G__21992;
            i__20568_21981 = G__21993;
            continue;
          } else {
            var arg__5757__auto___21994 = cljs.core.first.call(null, seq__20565_21988__$1);
            a__5756__auto__.push(arg__5757__auto___21994);
            var G__21995 = cljs.core.next.call(null, seq__20565_21988__$1);
            var G__21996 = null;
            var G__21997 = 0;
            var G__21998 = 0;
            seq__20565_21978 = G__21995;
            chunk__20566_21979 = G__21996;
            count__20567_21980 = G__21997;
            i__20568_21981 = G__21998;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__5756__auto__);
  };
  var em = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__21999__i = 0, G__21999__a = new Array(arguments.length - 0);
      while (G__21999__i < G__21999__a.length) {
        G__21999__a[G__21999__i] = arguments[G__21999__i + 0];
        ++G__21999__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__21999__a, 0);
    }
    return em__delegate.call(this, args__5755__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__22000) {
    var args__5755__auto__ = cljs.core.seq(arglist__22000);
    return em__delegate(args__5755__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20581_22001 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20582_22002 = null;
    var count__20583_22003 = 0;
    var i__20584_22004 = 0;
    while (true) {
      if (i__20584_22004 < count__20583_22003) {
        var arg__5757__auto___22005 = cljs.core._nth.call(null, chunk__20582_22002, i__20584_22004);
        a__5756__auto__.push(arg__5757__auto___22005);
        var G__22006 = seq__20581_22001;
        var G__22007 = chunk__20582_22002;
        var G__22008 = count__20583_22003;
        var G__22009 = i__20584_22004 + 1;
        seq__20581_22001 = G__22006;
        chunk__20582_22002 = G__22007;
        count__20583_22003 = G__22008;
        i__20584_22004 = G__22009;
        continue;
      } else {
        var temp__4126__auto___22010 = cljs.core.seq.call(null, seq__20581_22001);
        if (temp__4126__auto___22010) {
          var seq__20581_22011__$1 = temp__4126__auto___22010;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20581_22011__$1)) {
            var c__5012__auto___22012 = cljs.core.chunk_first.call(null, seq__20581_22011__$1);
            var G__22013 = cljs.core.chunk_rest.call(null, seq__20581_22011__$1);
            var G__22014 = c__5012__auto___22012;
            var G__22015 = cljs.core.count.call(null, c__5012__auto___22012);
            var G__22016 = 0;
            seq__20581_22001 = G__22013;
            chunk__20582_22002 = G__22014;
            count__20583_22003 = G__22015;
            i__20584_22004 = G__22016;
            continue;
          } else {
            var arg__5757__auto___22017 = cljs.core.first.call(null, seq__20581_22011__$1);
            a__5756__auto__.push(arg__5757__auto___22017);
            var G__22018 = cljs.core.next.call(null, seq__20581_22011__$1);
            var G__22019 = null;
            var G__22020 = 0;
            var G__22021 = 0;
            seq__20581_22001 = G__22018;
            chunk__20582_22002 = G__22019;
            count__20583_22003 = G__22020;
            i__20584_22004 = G__22021;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__5756__auto__);
  };
  var embed = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22022__i = 0, G__22022__a = new Array(arguments.length - 0);
      while (G__22022__i < G__22022__a.length) {
        G__22022__a[G__22022__i] = arguments[G__22022__i + 0];
        ++G__22022__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22022__a, 0);
    }
    return embed__delegate.call(this, args__5755__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__22023) {
    var args__5755__auto__ = cljs.core.seq(arglist__22023);
    return embed__delegate(args__5755__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20589_22024 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20590_22025 = null;
    var count__20591_22026 = 0;
    var i__20592_22027 = 0;
    while (true) {
      if (i__20592_22027 < count__20591_22026) {
        var arg__5757__auto___22028 = cljs.core._nth.call(null, chunk__20590_22025, i__20592_22027);
        a__5756__auto__.push(arg__5757__auto___22028);
        var G__22029 = seq__20589_22024;
        var G__22030 = chunk__20590_22025;
        var G__22031 = count__20591_22026;
        var G__22032 = i__20592_22027 + 1;
        seq__20589_22024 = G__22029;
        chunk__20590_22025 = G__22030;
        count__20591_22026 = G__22031;
        i__20592_22027 = G__22032;
        continue;
      } else {
        var temp__4126__auto___22033 = cljs.core.seq.call(null, seq__20589_22024);
        if (temp__4126__auto___22033) {
          var seq__20589_22034__$1 = temp__4126__auto___22033;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20589_22034__$1)) {
            var c__5012__auto___22035 = cljs.core.chunk_first.call(null, seq__20589_22034__$1);
            var G__22036 = cljs.core.chunk_rest.call(null, seq__20589_22034__$1);
            var G__22037 = c__5012__auto___22035;
            var G__22038 = cljs.core.count.call(null, c__5012__auto___22035);
            var G__22039 = 0;
            seq__20589_22024 = G__22036;
            chunk__20590_22025 = G__22037;
            count__20591_22026 = G__22038;
            i__20592_22027 = G__22039;
            continue;
          } else {
            var arg__5757__auto___22040 = cljs.core.first.call(null, seq__20589_22034__$1);
            a__5756__auto__.push(arg__5757__auto___22040);
            var G__22041 = cljs.core.next.call(null, seq__20589_22034__$1);
            var G__22042 = null;
            var G__22043 = 0;
            var G__22044 = 0;
            seq__20589_22024 = G__22041;
            chunk__20590_22025 = G__22042;
            count__20591_22026 = G__22043;
            i__20592_22027 = G__22044;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__5756__auto__);
  };
  var fieldset = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22045__i = 0, G__22045__a = new Array(arguments.length - 0);
      while (G__22045__i < G__22045__a.length) {
        G__22045__a[G__22045__i] = arguments[G__22045__i + 0];
        ++G__22045__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22045__a, 0);
    }
    return fieldset__delegate.call(this, args__5755__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__22046) {
    var args__5755__auto__ = cljs.core.seq(arglist__22046);
    return fieldset__delegate(args__5755__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20597_22047 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20598_22048 = null;
    var count__20599_22049 = 0;
    var i__20600_22050 = 0;
    while (true) {
      if (i__20600_22050 < count__20599_22049) {
        var arg__5757__auto___22051 = cljs.core._nth.call(null, chunk__20598_22048, i__20600_22050);
        a__5756__auto__.push(arg__5757__auto___22051);
        var G__22052 = seq__20597_22047;
        var G__22053 = chunk__20598_22048;
        var G__22054 = count__20599_22049;
        var G__22055 = i__20600_22050 + 1;
        seq__20597_22047 = G__22052;
        chunk__20598_22048 = G__22053;
        count__20599_22049 = G__22054;
        i__20600_22050 = G__22055;
        continue;
      } else {
        var temp__4126__auto___22056 = cljs.core.seq.call(null, seq__20597_22047);
        if (temp__4126__auto___22056) {
          var seq__20597_22057__$1 = temp__4126__auto___22056;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20597_22057__$1)) {
            var c__5012__auto___22058 = cljs.core.chunk_first.call(null, seq__20597_22057__$1);
            var G__22059 = cljs.core.chunk_rest.call(null, seq__20597_22057__$1);
            var G__22060 = c__5012__auto___22058;
            var G__22061 = cljs.core.count.call(null, c__5012__auto___22058);
            var G__22062 = 0;
            seq__20597_22047 = G__22059;
            chunk__20598_22048 = G__22060;
            count__20599_22049 = G__22061;
            i__20600_22050 = G__22062;
            continue;
          } else {
            var arg__5757__auto___22063 = cljs.core.first.call(null, seq__20597_22057__$1);
            a__5756__auto__.push(arg__5757__auto___22063);
            var G__22064 = cljs.core.next.call(null, seq__20597_22057__$1);
            var G__22065 = null;
            var G__22066 = 0;
            var G__22067 = 0;
            seq__20597_22047 = G__22064;
            chunk__20598_22048 = G__22065;
            count__20599_22049 = G__22066;
            i__20600_22050 = G__22067;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__5756__auto__);
  };
  var figcaption = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22068__i = 0, G__22068__a = new Array(arguments.length - 0);
      while (G__22068__i < G__22068__a.length) {
        G__22068__a[G__22068__i] = arguments[G__22068__i + 0];
        ++G__22068__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22068__a, 0);
    }
    return figcaption__delegate.call(this, args__5755__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__22069) {
    var args__5755__auto__ = cljs.core.seq(arglist__22069);
    return figcaption__delegate(args__5755__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20605_22070 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20606_22071 = null;
    var count__20607_22072 = 0;
    var i__20608_22073 = 0;
    while (true) {
      if (i__20608_22073 < count__20607_22072) {
        var arg__5757__auto___22074 = cljs.core._nth.call(null, chunk__20606_22071, i__20608_22073);
        a__5756__auto__.push(arg__5757__auto___22074);
        var G__22075 = seq__20605_22070;
        var G__22076 = chunk__20606_22071;
        var G__22077 = count__20607_22072;
        var G__22078 = i__20608_22073 + 1;
        seq__20605_22070 = G__22075;
        chunk__20606_22071 = G__22076;
        count__20607_22072 = G__22077;
        i__20608_22073 = G__22078;
        continue;
      } else {
        var temp__4126__auto___22079 = cljs.core.seq.call(null, seq__20605_22070);
        if (temp__4126__auto___22079) {
          var seq__20605_22080__$1 = temp__4126__auto___22079;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20605_22080__$1)) {
            var c__5012__auto___22081 = cljs.core.chunk_first.call(null, seq__20605_22080__$1);
            var G__22082 = cljs.core.chunk_rest.call(null, seq__20605_22080__$1);
            var G__22083 = c__5012__auto___22081;
            var G__22084 = cljs.core.count.call(null, c__5012__auto___22081);
            var G__22085 = 0;
            seq__20605_22070 = G__22082;
            chunk__20606_22071 = G__22083;
            count__20607_22072 = G__22084;
            i__20608_22073 = G__22085;
            continue;
          } else {
            var arg__5757__auto___22086 = cljs.core.first.call(null, seq__20605_22080__$1);
            a__5756__auto__.push(arg__5757__auto___22086);
            var G__22087 = cljs.core.next.call(null, seq__20605_22080__$1);
            var G__22088 = null;
            var G__22089 = 0;
            var G__22090 = 0;
            seq__20605_22070 = G__22087;
            chunk__20606_22071 = G__22088;
            count__20607_22072 = G__22089;
            i__20608_22073 = G__22090;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__5756__auto__);
  };
  var figure = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22091__i = 0, G__22091__a = new Array(arguments.length - 0);
      while (G__22091__i < G__22091__a.length) {
        G__22091__a[G__22091__i] = arguments[G__22091__i + 0];
        ++G__22091__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22091__a, 0);
    }
    return figure__delegate.call(this, args__5755__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__22092) {
    var args__5755__auto__ = cljs.core.seq(arglist__22092);
    return figure__delegate(args__5755__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20613_22093 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20614_22094 = null;
    var count__20615_22095 = 0;
    var i__20616_22096 = 0;
    while (true) {
      if (i__20616_22096 < count__20615_22095) {
        var arg__5757__auto___22097 = cljs.core._nth.call(null, chunk__20614_22094, i__20616_22096);
        a__5756__auto__.push(arg__5757__auto___22097);
        var G__22098 = seq__20613_22093;
        var G__22099 = chunk__20614_22094;
        var G__22100 = count__20615_22095;
        var G__22101 = i__20616_22096 + 1;
        seq__20613_22093 = G__22098;
        chunk__20614_22094 = G__22099;
        count__20615_22095 = G__22100;
        i__20616_22096 = G__22101;
        continue;
      } else {
        var temp__4126__auto___22102 = cljs.core.seq.call(null, seq__20613_22093);
        if (temp__4126__auto___22102) {
          var seq__20613_22103__$1 = temp__4126__auto___22102;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20613_22103__$1)) {
            var c__5012__auto___22104 = cljs.core.chunk_first.call(null, seq__20613_22103__$1);
            var G__22105 = cljs.core.chunk_rest.call(null, seq__20613_22103__$1);
            var G__22106 = c__5012__auto___22104;
            var G__22107 = cljs.core.count.call(null, c__5012__auto___22104);
            var G__22108 = 0;
            seq__20613_22093 = G__22105;
            chunk__20614_22094 = G__22106;
            count__20615_22095 = G__22107;
            i__20616_22096 = G__22108;
            continue;
          } else {
            var arg__5757__auto___22109 = cljs.core.first.call(null, seq__20613_22103__$1);
            a__5756__auto__.push(arg__5757__auto___22109);
            var G__22110 = cljs.core.next.call(null, seq__20613_22103__$1);
            var G__22111 = null;
            var G__22112 = 0;
            var G__22113 = 0;
            seq__20613_22093 = G__22110;
            chunk__20614_22094 = G__22111;
            count__20615_22095 = G__22112;
            i__20616_22096 = G__22113;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__5756__auto__);
  };
  var footer = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22114__i = 0, G__22114__a = new Array(arguments.length - 0);
      while (G__22114__i < G__22114__a.length) {
        G__22114__a[G__22114__i] = arguments[G__22114__i + 0];
        ++G__22114__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22114__a, 0);
    }
    return footer__delegate.call(this, args__5755__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__22115) {
    var args__5755__auto__ = cljs.core.seq(arglist__22115);
    return footer__delegate(args__5755__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20621_22116 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20622_22117 = null;
    var count__20623_22118 = 0;
    var i__20624_22119 = 0;
    while (true) {
      if (i__20624_22119 < count__20623_22118) {
        var arg__5757__auto___22120 = cljs.core._nth.call(null, chunk__20622_22117, i__20624_22119);
        a__5756__auto__.push(arg__5757__auto___22120);
        var G__22121 = seq__20621_22116;
        var G__22122 = chunk__20622_22117;
        var G__22123 = count__20623_22118;
        var G__22124 = i__20624_22119 + 1;
        seq__20621_22116 = G__22121;
        chunk__20622_22117 = G__22122;
        count__20623_22118 = G__22123;
        i__20624_22119 = G__22124;
        continue;
      } else {
        var temp__4126__auto___22125 = cljs.core.seq.call(null, seq__20621_22116);
        if (temp__4126__auto___22125) {
          var seq__20621_22126__$1 = temp__4126__auto___22125;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20621_22126__$1)) {
            var c__5012__auto___22127 = cljs.core.chunk_first.call(null, seq__20621_22126__$1);
            var G__22128 = cljs.core.chunk_rest.call(null, seq__20621_22126__$1);
            var G__22129 = c__5012__auto___22127;
            var G__22130 = cljs.core.count.call(null, c__5012__auto___22127);
            var G__22131 = 0;
            seq__20621_22116 = G__22128;
            chunk__20622_22117 = G__22129;
            count__20623_22118 = G__22130;
            i__20624_22119 = G__22131;
            continue;
          } else {
            var arg__5757__auto___22132 = cljs.core.first.call(null, seq__20621_22126__$1);
            a__5756__auto__.push(arg__5757__auto___22132);
            var G__22133 = cljs.core.next.call(null, seq__20621_22126__$1);
            var G__22134 = null;
            var G__22135 = 0;
            var G__22136 = 0;
            seq__20621_22116 = G__22133;
            chunk__20622_22117 = G__22134;
            count__20623_22118 = G__22135;
            i__20624_22119 = G__22136;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__5756__auto__);
  };
  var form = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22137__i = 0, G__22137__a = new Array(arguments.length - 0);
      while (G__22137__i < G__22137__a.length) {
        G__22137__a[G__22137__i] = arguments[G__22137__i + 0];
        ++G__22137__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22137__a, 0);
    }
    return form__delegate.call(this, args__5755__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__22138) {
    var args__5755__auto__ = cljs.core.seq(arglist__22138);
    return form__delegate(args__5755__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20629_22139 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20630_22140 = null;
    var count__20631_22141 = 0;
    var i__20632_22142 = 0;
    while (true) {
      if (i__20632_22142 < count__20631_22141) {
        var arg__5757__auto___22143 = cljs.core._nth.call(null, chunk__20630_22140, i__20632_22142);
        a__5756__auto__.push(arg__5757__auto___22143);
        var G__22144 = seq__20629_22139;
        var G__22145 = chunk__20630_22140;
        var G__22146 = count__20631_22141;
        var G__22147 = i__20632_22142 + 1;
        seq__20629_22139 = G__22144;
        chunk__20630_22140 = G__22145;
        count__20631_22141 = G__22146;
        i__20632_22142 = G__22147;
        continue;
      } else {
        var temp__4126__auto___22148 = cljs.core.seq.call(null, seq__20629_22139);
        if (temp__4126__auto___22148) {
          var seq__20629_22149__$1 = temp__4126__auto___22148;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20629_22149__$1)) {
            var c__5012__auto___22150 = cljs.core.chunk_first.call(null, seq__20629_22149__$1);
            var G__22151 = cljs.core.chunk_rest.call(null, seq__20629_22149__$1);
            var G__22152 = c__5012__auto___22150;
            var G__22153 = cljs.core.count.call(null, c__5012__auto___22150);
            var G__22154 = 0;
            seq__20629_22139 = G__22151;
            chunk__20630_22140 = G__22152;
            count__20631_22141 = G__22153;
            i__20632_22142 = G__22154;
            continue;
          } else {
            var arg__5757__auto___22155 = cljs.core.first.call(null, seq__20629_22149__$1);
            a__5756__auto__.push(arg__5757__auto___22155);
            var G__22156 = cljs.core.next.call(null, seq__20629_22149__$1);
            var G__22157 = null;
            var G__22158 = 0;
            var G__22159 = 0;
            seq__20629_22139 = G__22156;
            chunk__20630_22140 = G__22157;
            count__20631_22141 = G__22158;
            i__20632_22142 = G__22159;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__5756__auto__);
  };
  var h1 = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22160__i = 0, G__22160__a = new Array(arguments.length - 0);
      while (G__22160__i < G__22160__a.length) {
        G__22160__a[G__22160__i] = arguments[G__22160__i + 0];
        ++G__22160__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22160__a, 0);
    }
    return h1__delegate.call(this, args__5755__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__22161) {
    var args__5755__auto__ = cljs.core.seq(arglist__22161);
    return h1__delegate(args__5755__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20637_22162 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20638_22163 = null;
    var count__20639_22164 = 0;
    var i__20640_22165 = 0;
    while (true) {
      if (i__20640_22165 < count__20639_22164) {
        var arg__5757__auto___22166 = cljs.core._nth.call(null, chunk__20638_22163, i__20640_22165);
        a__5756__auto__.push(arg__5757__auto___22166);
        var G__22167 = seq__20637_22162;
        var G__22168 = chunk__20638_22163;
        var G__22169 = count__20639_22164;
        var G__22170 = i__20640_22165 + 1;
        seq__20637_22162 = G__22167;
        chunk__20638_22163 = G__22168;
        count__20639_22164 = G__22169;
        i__20640_22165 = G__22170;
        continue;
      } else {
        var temp__4126__auto___22171 = cljs.core.seq.call(null, seq__20637_22162);
        if (temp__4126__auto___22171) {
          var seq__20637_22172__$1 = temp__4126__auto___22171;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20637_22172__$1)) {
            var c__5012__auto___22173 = cljs.core.chunk_first.call(null, seq__20637_22172__$1);
            var G__22174 = cljs.core.chunk_rest.call(null, seq__20637_22172__$1);
            var G__22175 = c__5012__auto___22173;
            var G__22176 = cljs.core.count.call(null, c__5012__auto___22173);
            var G__22177 = 0;
            seq__20637_22162 = G__22174;
            chunk__20638_22163 = G__22175;
            count__20639_22164 = G__22176;
            i__20640_22165 = G__22177;
            continue;
          } else {
            var arg__5757__auto___22178 = cljs.core.first.call(null, seq__20637_22172__$1);
            a__5756__auto__.push(arg__5757__auto___22178);
            var G__22179 = cljs.core.next.call(null, seq__20637_22172__$1);
            var G__22180 = null;
            var G__22181 = 0;
            var G__22182 = 0;
            seq__20637_22162 = G__22179;
            chunk__20638_22163 = G__22180;
            count__20639_22164 = G__22181;
            i__20640_22165 = G__22182;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__5756__auto__);
  };
  var h2 = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22183__i = 0, G__22183__a = new Array(arguments.length - 0);
      while (G__22183__i < G__22183__a.length) {
        G__22183__a[G__22183__i] = arguments[G__22183__i + 0];
        ++G__22183__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22183__a, 0);
    }
    return h2__delegate.call(this, args__5755__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__22184) {
    var args__5755__auto__ = cljs.core.seq(arglist__22184);
    return h2__delegate(args__5755__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20645_22185 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20646_22186 = null;
    var count__20647_22187 = 0;
    var i__20648_22188 = 0;
    while (true) {
      if (i__20648_22188 < count__20647_22187) {
        var arg__5757__auto___22189 = cljs.core._nth.call(null, chunk__20646_22186, i__20648_22188);
        a__5756__auto__.push(arg__5757__auto___22189);
        var G__22190 = seq__20645_22185;
        var G__22191 = chunk__20646_22186;
        var G__22192 = count__20647_22187;
        var G__22193 = i__20648_22188 + 1;
        seq__20645_22185 = G__22190;
        chunk__20646_22186 = G__22191;
        count__20647_22187 = G__22192;
        i__20648_22188 = G__22193;
        continue;
      } else {
        var temp__4126__auto___22194 = cljs.core.seq.call(null, seq__20645_22185);
        if (temp__4126__auto___22194) {
          var seq__20645_22195__$1 = temp__4126__auto___22194;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20645_22195__$1)) {
            var c__5012__auto___22196 = cljs.core.chunk_first.call(null, seq__20645_22195__$1);
            var G__22197 = cljs.core.chunk_rest.call(null, seq__20645_22195__$1);
            var G__22198 = c__5012__auto___22196;
            var G__22199 = cljs.core.count.call(null, c__5012__auto___22196);
            var G__22200 = 0;
            seq__20645_22185 = G__22197;
            chunk__20646_22186 = G__22198;
            count__20647_22187 = G__22199;
            i__20648_22188 = G__22200;
            continue;
          } else {
            var arg__5757__auto___22201 = cljs.core.first.call(null, seq__20645_22195__$1);
            a__5756__auto__.push(arg__5757__auto___22201);
            var G__22202 = cljs.core.next.call(null, seq__20645_22195__$1);
            var G__22203 = null;
            var G__22204 = 0;
            var G__22205 = 0;
            seq__20645_22185 = G__22202;
            chunk__20646_22186 = G__22203;
            count__20647_22187 = G__22204;
            i__20648_22188 = G__22205;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__5756__auto__);
  };
  var h3 = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22206__i = 0, G__22206__a = new Array(arguments.length - 0);
      while (G__22206__i < G__22206__a.length) {
        G__22206__a[G__22206__i] = arguments[G__22206__i + 0];
        ++G__22206__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22206__a, 0);
    }
    return h3__delegate.call(this, args__5755__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__22207) {
    var args__5755__auto__ = cljs.core.seq(arglist__22207);
    return h3__delegate(args__5755__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20653_22208 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20654_22209 = null;
    var count__20655_22210 = 0;
    var i__20656_22211 = 0;
    while (true) {
      if (i__20656_22211 < count__20655_22210) {
        var arg__5757__auto___22212 = cljs.core._nth.call(null, chunk__20654_22209, i__20656_22211);
        a__5756__auto__.push(arg__5757__auto___22212);
        var G__22213 = seq__20653_22208;
        var G__22214 = chunk__20654_22209;
        var G__22215 = count__20655_22210;
        var G__22216 = i__20656_22211 + 1;
        seq__20653_22208 = G__22213;
        chunk__20654_22209 = G__22214;
        count__20655_22210 = G__22215;
        i__20656_22211 = G__22216;
        continue;
      } else {
        var temp__4126__auto___22217 = cljs.core.seq.call(null, seq__20653_22208);
        if (temp__4126__auto___22217) {
          var seq__20653_22218__$1 = temp__4126__auto___22217;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20653_22218__$1)) {
            var c__5012__auto___22219 = cljs.core.chunk_first.call(null, seq__20653_22218__$1);
            var G__22220 = cljs.core.chunk_rest.call(null, seq__20653_22218__$1);
            var G__22221 = c__5012__auto___22219;
            var G__22222 = cljs.core.count.call(null, c__5012__auto___22219);
            var G__22223 = 0;
            seq__20653_22208 = G__22220;
            chunk__20654_22209 = G__22221;
            count__20655_22210 = G__22222;
            i__20656_22211 = G__22223;
            continue;
          } else {
            var arg__5757__auto___22224 = cljs.core.first.call(null, seq__20653_22218__$1);
            a__5756__auto__.push(arg__5757__auto___22224);
            var G__22225 = cljs.core.next.call(null, seq__20653_22218__$1);
            var G__22226 = null;
            var G__22227 = 0;
            var G__22228 = 0;
            seq__20653_22208 = G__22225;
            chunk__20654_22209 = G__22226;
            count__20655_22210 = G__22227;
            i__20656_22211 = G__22228;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__5756__auto__);
  };
  var h4 = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22229__i = 0, G__22229__a = new Array(arguments.length - 0);
      while (G__22229__i < G__22229__a.length) {
        G__22229__a[G__22229__i] = arguments[G__22229__i + 0];
        ++G__22229__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22229__a, 0);
    }
    return h4__delegate.call(this, args__5755__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__22230) {
    var args__5755__auto__ = cljs.core.seq(arglist__22230);
    return h4__delegate(args__5755__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20661_22231 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20662_22232 = null;
    var count__20663_22233 = 0;
    var i__20664_22234 = 0;
    while (true) {
      if (i__20664_22234 < count__20663_22233) {
        var arg__5757__auto___22235 = cljs.core._nth.call(null, chunk__20662_22232, i__20664_22234);
        a__5756__auto__.push(arg__5757__auto___22235);
        var G__22236 = seq__20661_22231;
        var G__22237 = chunk__20662_22232;
        var G__22238 = count__20663_22233;
        var G__22239 = i__20664_22234 + 1;
        seq__20661_22231 = G__22236;
        chunk__20662_22232 = G__22237;
        count__20663_22233 = G__22238;
        i__20664_22234 = G__22239;
        continue;
      } else {
        var temp__4126__auto___22240 = cljs.core.seq.call(null, seq__20661_22231);
        if (temp__4126__auto___22240) {
          var seq__20661_22241__$1 = temp__4126__auto___22240;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20661_22241__$1)) {
            var c__5012__auto___22242 = cljs.core.chunk_first.call(null, seq__20661_22241__$1);
            var G__22243 = cljs.core.chunk_rest.call(null, seq__20661_22241__$1);
            var G__22244 = c__5012__auto___22242;
            var G__22245 = cljs.core.count.call(null, c__5012__auto___22242);
            var G__22246 = 0;
            seq__20661_22231 = G__22243;
            chunk__20662_22232 = G__22244;
            count__20663_22233 = G__22245;
            i__20664_22234 = G__22246;
            continue;
          } else {
            var arg__5757__auto___22247 = cljs.core.first.call(null, seq__20661_22241__$1);
            a__5756__auto__.push(arg__5757__auto___22247);
            var G__22248 = cljs.core.next.call(null, seq__20661_22241__$1);
            var G__22249 = null;
            var G__22250 = 0;
            var G__22251 = 0;
            seq__20661_22231 = G__22248;
            chunk__20662_22232 = G__22249;
            count__20663_22233 = G__22250;
            i__20664_22234 = G__22251;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__5756__auto__);
  };
  var h5 = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22252__i = 0, G__22252__a = new Array(arguments.length - 0);
      while (G__22252__i < G__22252__a.length) {
        G__22252__a[G__22252__i] = arguments[G__22252__i + 0];
        ++G__22252__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22252__a, 0);
    }
    return h5__delegate.call(this, args__5755__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__22253) {
    var args__5755__auto__ = cljs.core.seq(arglist__22253);
    return h5__delegate(args__5755__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20669_22254 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20670_22255 = null;
    var count__20671_22256 = 0;
    var i__20672_22257 = 0;
    while (true) {
      if (i__20672_22257 < count__20671_22256) {
        var arg__5757__auto___22258 = cljs.core._nth.call(null, chunk__20670_22255, i__20672_22257);
        a__5756__auto__.push(arg__5757__auto___22258);
        var G__22259 = seq__20669_22254;
        var G__22260 = chunk__20670_22255;
        var G__22261 = count__20671_22256;
        var G__22262 = i__20672_22257 + 1;
        seq__20669_22254 = G__22259;
        chunk__20670_22255 = G__22260;
        count__20671_22256 = G__22261;
        i__20672_22257 = G__22262;
        continue;
      } else {
        var temp__4126__auto___22263 = cljs.core.seq.call(null, seq__20669_22254);
        if (temp__4126__auto___22263) {
          var seq__20669_22264__$1 = temp__4126__auto___22263;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20669_22264__$1)) {
            var c__5012__auto___22265 = cljs.core.chunk_first.call(null, seq__20669_22264__$1);
            var G__22266 = cljs.core.chunk_rest.call(null, seq__20669_22264__$1);
            var G__22267 = c__5012__auto___22265;
            var G__22268 = cljs.core.count.call(null, c__5012__auto___22265);
            var G__22269 = 0;
            seq__20669_22254 = G__22266;
            chunk__20670_22255 = G__22267;
            count__20671_22256 = G__22268;
            i__20672_22257 = G__22269;
            continue;
          } else {
            var arg__5757__auto___22270 = cljs.core.first.call(null, seq__20669_22264__$1);
            a__5756__auto__.push(arg__5757__auto___22270);
            var G__22271 = cljs.core.next.call(null, seq__20669_22264__$1);
            var G__22272 = null;
            var G__22273 = 0;
            var G__22274 = 0;
            seq__20669_22254 = G__22271;
            chunk__20670_22255 = G__22272;
            count__20671_22256 = G__22273;
            i__20672_22257 = G__22274;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__5756__auto__);
  };
  var h6 = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22275__i = 0, G__22275__a = new Array(arguments.length - 0);
      while (G__22275__i < G__22275__a.length) {
        G__22275__a[G__22275__i] = arguments[G__22275__i + 0];
        ++G__22275__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22275__a, 0);
    }
    return h6__delegate.call(this, args__5755__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__22276) {
    var args__5755__auto__ = cljs.core.seq(arglist__22276);
    return h6__delegate(args__5755__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20677_22277 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20678_22278 = null;
    var count__20679_22279 = 0;
    var i__20680_22280 = 0;
    while (true) {
      if (i__20680_22280 < count__20679_22279) {
        var arg__5757__auto___22281 = cljs.core._nth.call(null, chunk__20678_22278, i__20680_22280);
        a__5756__auto__.push(arg__5757__auto___22281);
        var G__22282 = seq__20677_22277;
        var G__22283 = chunk__20678_22278;
        var G__22284 = count__20679_22279;
        var G__22285 = i__20680_22280 + 1;
        seq__20677_22277 = G__22282;
        chunk__20678_22278 = G__22283;
        count__20679_22279 = G__22284;
        i__20680_22280 = G__22285;
        continue;
      } else {
        var temp__4126__auto___22286 = cljs.core.seq.call(null, seq__20677_22277);
        if (temp__4126__auto___22286) {
          var seq__20677_22287__$1 = temp__4126__auto___22286;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20677_22287__$1)) {
            var c__5012__auto___22288 = cljs.core.chunk_first.call(null, seq__20677_22287__$1);
            var G__22289 = cljs.core.chunk_rest.call(null, seq__20677_22287__$1);
            var G__22290 = c__5012__auto___22288;
            var G__22291 = cljs.core.count.call(null, c__5012__auto___22288);
            var G__22292 = 0;
            seq__20677_22277 = G__22289;
            chunk__20678_22278 = G__22290;
            count__20679_22279 = G__22291;
            i__20680_22280 = G__22292;
            continue;
          } else {
            var arg__5757__auto___22293 = cljs.core.first.call(null, seq__20677_22287__$1);
            a__5756__auto__.push(arg__5757__auto___22293);
            var G__22294 = cljs.core.next.call(null, seq__20677_22287__$1);
            var G__22295 = null;
            var G__22296 = 0;
            var G__22297 = 0;
            seq__20677_22277 = G__22294;
            chunk__20678_22278 = G__22295;
            count__20679_22279 = G__22296;
            i__20680_22280 = G__22297;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__5756__auto__);
  };
  var head = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22298__i = 0, G__22298__a = new Array(arguments.length - 0);
      while (G__22298__i < G__22298__a.length) {
        G__22298__a[G__22298__i] = arguments[G__22298__i + 0];
        ++G__22298__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22298__a, 0);
    }
    return head__delegate.call(this, args__5755__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__22299) {
    var args__5755__auto__ = cljs.core.seq(arglist__22299);
    return head__delegate(args__5755__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20685_22300 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20686_22301 = null;
    var count__20687_22302 = 0;
    var i__20688_22303 = 0;
    while (true) {
      if (i__20688_22303 < count__20687_22302) {
        var arg__5757__auto___22304 = cljs.core._nth.call(null, chunk__20686_22301, i__20688_22303);
        a__5756__auto__.push(arg__5757__auto___22304);
        var G__22305 = seq__20685_22300;
        var G__22306 = chunk__20686_22301;
        var G__22307 = count__20687_22302;
        var G__22308 = i__20688_22303 + 1;
        seq__20685_22300 = G__22305;
        chunk__20686_22301 = G__22306;
        count__20687_22302 = G__22307;
        i__20688_22303 = G__22308;
        continue;
      } else {
        var temp__4126__auto___22309 = cljs.core.seq.call(null, seq__20685_22300);
        if (temp__4126__auto___22309) {
          var seq__20685_22310__$1 = temp__4126__auto___22309;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20685_22310__$1)) {
            var c__5012__auto___22311 = cljs.core.chunk_first.call(null, seq__20685_22310__$1);
            var G__22312 = cljs.core.chunk_rest.call(null, seq__20685_22310__$1);
            var G__22313 = c__5012__auto___22311;
            var G__22314 = cljs.core.count.call(null, c__5012__auto___22311);
            var G__22315 = 0;
            seq__20685_22300 = G__22312;
            chunk__20686_22301 = G__22313;
            count__20687_22302 = G__22314;
            i__20688_22303 = G__22315;
            continue;
          } else {
            var arg__5757__auto___22316 = cljs.core.first.call(null, seq__20685_22310__$1);
            a__5756__auto__.push(arg__5757__auto___22316);
            var G__22317 = cljs.core.next.call(null, seq__20685_22310__$1);
            var G__22318 = null;
            var G__22319 = 0;
            var G__22320 = 0;
            seq__20685_22300 = G__22317;
            chunk__20686_22301 = G__22318;
            count__20687_22302 = G__22319;
            i__20688_22303 = G__22320;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__5756__auto__);
  };
  var header = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22321__i = 0, G__22321__a = new Array(arguments.length - 0);
      while (G__22321__i < G__22321__a.length) {
        G__22321__a[G__22321__i] = arguments[G__22321__i + 0];
        ++G__22321__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22321__a, 0);
    }
    return header__delegate.call(this, args__5755__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__22322) {
    var args__5755__auto__ = cljs.core.seq(arglist__22322);
    return header__delegate(args__5755__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20693_22323 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20694_22324 = null;
    var count__20695_22325 = 0;
    var i__20696_22326 = 0;
    while (true) {
      if (i__20696_22326 < count__20695_22325) {
        var arg__5757__auto___22327 = cljs.core._nth.call(null, chunk__20694_22324, i__20696_22326);
        a__5756__auto__.push(arg__5757__auto___22327);
        var G__22328 = seq__20693_22323;
        var G__22329 = chunk__20694_22324;
        var G__22330 = count__20695_22325;
        var G__22331 = i__20696_22326 + 1;
        seq__20693_22323 = G__22328;
        chunk__20694_22324 = G__22329;
        count__20695_22325 = G__22330;
        i__20696_22326 = G__22331;
        continue;
      } else {
        var temp__4126__auto___22332 = cljs.core.seq.call(null, seq__20693_22323);
        if (temp__4126__auto___22332) {
          var seq__20693_22333__$1 = temp__4126__auto___22332;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20693_22333__$1)) {
            var c__5012__auto___22334 = cljs.core.chunk_first.call(null, seq__20693_22333__$1);
            var G__22335 = cljs.core.chunk_rest.call(null, seq__20693_22333__$1);
            var G__22336 = c__5012__auto___22334;
            var G__22337 = cljs.core.count.call(null, c__5012__auto___22334);
            var G__22338 = 0;
            seq__20693_22323 = G__22335;
            chunk__20694_22324 = G__22336;
            count__20695_22325 = G__22337;
            i__20696_22326 = G__22338;
            continue;
          } else {
            var arg__5757__auto___22339 = cljs.core.first.call(null, seq__20693_22333__$1);
            a__5756__auto__.push(arg__5757__auto___22339);
            var G__22340 = cljs.core.next.call(null, seq__20693_22333__$1);
            var G__22341 = null;
            var G__22342 = 0;
            var G__22343 = 0;
            seq__20693_22323 = G__22340;
            chunk__20694_22324 = G__22341;
            count__20695_22325 = G__22342;
            i__20696_22326 = G__22343;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__5756__auto__);
  };
  var hr = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22344__i = 0, G__22344__a = new Array(arguments.length - 0);
      while (G__22344__i < G__22344__a.length) {
        G__22344__a[G__22344__i] = arguments[G__22344__i + 0];
        ++G__22344__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22344__a, 0);
    }
    return hr__delegate.call(this, args__5755__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__22345) {
    var args__5755__auto__ = cljs.core.seq(arglist__22345);
    return hr__delegate(args__5755__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20701_22346 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20702_22347 = null;
    var count__20703_22348 = 0;
    var i__20704_22349 = 0;
    while (true) {
      if (i__20704_22349 < count__20703_22348) {
        var arg__5757__auto___22350 = cljs.core._nth.call(null, chunk__20702_22347, i__20704_22349);
        a__5756__auto__.push(arg__5757__auto___22350);
        var G__22351 = seq__20701_22346;
        var G__22352 = chunk__20702_22347;
        var G__22353 = count__20703_22348;
        var G__22354 = i__20704_22349 + 1;
        seq__20701_22346 = G__22351;
        chunk__20702_22347 = G__22352;
        count__20703_22348 = G__22353;
        i__20704_22349 = G__22354;
        continue;
      } else {
        var temp__4126__auto___22355 = cljs.core.seq.call(null, seq__20701_22346);
        if (temp__4126__auto___22355) {
          var seq__20701_22356__$1 = temp__4126__auto___22355;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20701_22356__$1)) {
            var c__5012__auto___22357 = cljs.core.chunk_first.call(null, seq__20701_22356__$1);
            var G__22358 = cljs.core.chunk_rest.call(null, seq__20701_22356__$1);
            var G__22359 = c__5012__auto___22357;
            var G__22360 = cljs.core.count.call(null, c__5012__auto___22357);
            var G__22361 = 0;
            seq__20701_22346 = G__22358;
            chunk__20702_22347 = G__22359;
            count__20703_22348 = G__22360;
            i__20704_22349 = G__22361;
            continue;
          } else {
            var arg__5757__auto___22362 = cljs.core.first.call(null, seq__20701_22356__$1);
            a__5756__auto__.push(arg__5757__auto___22362);
            var G__22363 = cljs.core.next.call(null, seq__20701_22356__$1);
            var G__22364 = null;
            var G__22365 = 0;
            var G__22366 = 0;
            seq__20701_22346 = G__22363;
            chunk__20702_22347 = G__22364;
            count__20703_22348 = G__22365;
            i__20704_22349 = G__22366;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__5756__auto__);
  };
  var html = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22367__i = 0, G__22367__a = new Array(arguments.length - 0);
      while (G__22367__i < G__22367__a.length) {
        G__22367__a[G__22367__i] = arguments[G__22367__i + 0];
        ++G__22367__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22367__a, 0);
    }
    return html__delegate.call(this, args__5755__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__22368) {
    var args__5755__auto__ = cljs.core.seq(arglist__22368);
    return html__delegate(args__5755__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20709_22369 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20710_22370 = null;
    var count__20711_22371 = 0;
    var i__20712_22372 = 0;
    while (true) {
      if (i__20712_22372 < count__20711_22371) {
        var arg__5757__auto___22373 = cljs.core._nth.call(null, chunk__20710_22370, i__20712_22372);
        a__5756__auto__.push(arg__5757__auto___22373);
        var G__22374 = seq__20709_22369;
        var G__22375 = chunk__20710_22370;
        var G__22376 = count__20711_22371;
        var G__22377 = i__20712_22372 + 1;
        seq__20709_22369 = G__22374;
        chunk__20710_22370 = G__22375;
        count__20711_22371 = G__22376;
        i__20712_22372 = G__22377;
        continue;
      } else {
        var temp__4126__auto___22378 = cljs.core.seq.call(null, seq__20709_22369);
        if (temp__4126__auto___22378) {
          var seq__20709_22379__$1 = temp__4126__auto___22378;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20709_22379__$1)) {
            var c__5012__auto___22380 = cljs.core.chunk_first.call(null, seq__20709_22379__$1);
            var G__22381 = cljs.core.chunk_rest.call(null, seq__20709_22379__$1);
            var G__22382 = c__5012__auto___22380;
            var G__22383 = cljs.core.count.call(null, c__5012__auto___22380);
            var G__22384 = 0;
            seq__20709_22369 = G__22381;
            chunk__20710_22370 = G__22382;
            count__20711_22371 = G__22383;
            i__20712_22372 = G__22384;
            continue;
          } else {
            var arg__5757__auto___22385 = cljs.core.first.call(null, seq__20709_22379__$1);
            a__5756__auto__.push(arg__5757__auto___22385);
            var G__22386 = cljs.core.next.call(null, seq__20709_22379__$1);
            var G__22387 = null;
            var G__22388 = 0;
            var G__22389 = 0;
            seq__20709_22369 = G__22386;
            chunk__20710_22370 = G__22387;
            count__20711_22371 = G__22388;
            i__20712_22372 = G__22389;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__5756__auto__);
  };
  var i = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22390__i = 0, G__22390__a = new Array(arguments.length - 0);
      while (G__22390__i < G__22390__a.length) {
        G__22390__a[G__22390__i] = arguments[G__22390__i + 0];
        ++G__22390__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22390__a, 0);
    }
    return i__delegate.call(this, args__5755__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__22391) {
    var args__5755__auto__ = cljs.core.seq(arglist__22391);
    return i__delegate(args__5755__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20717_22392 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20718_22393 = null;
    var count__20719_22394 = 0;
    var i__20720_22395 = 0;
    while (true) {
      if (i__20720_22395 < count__20719_22394) {
        var arg__5757__auto___22396 = cljs.core._nth.call(null, chunk__20718_22393, i__20720_22395);
        a__5756__auto__.push(arg__5757__auto___22396);
        var G__22397 = seq__20717_22392;
        var G__22398 = chunk__20718_22393;
        var G__22399 = count__20719_22394;
        var G__22400 = i__20720_22395 + 1;
        seq__20717_22392 = G__22397;
        chunk__20718_22393 = G__22398;
        count__20719_22394 = G__22399;
        i__20720_22395 = G__22400;
        continue;
      } else {
        var temp__4126__auto___22401 = cljs.core.seq.call(null, seq__20717_22392);
        if (temp__4126__auto___22401) {
          var seq__20717_22402__$1 = temp__4126__auto___22401;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20717_22402__$1)) {
            var c__5012__auto___22403 = cljs.core.chunk_first.call(null, seq__20717_22402__$1);
            var G__22404 = cljs.core.chunk_rest.call(null, seq__20717_22402__$1);
            var G__22405 = c__5012__auto___22403;
            var G__22406 = cljs.core.count.call(null, c__5012__auto___22403);
            var G__22407 = 0;
            seq__20717_22392 = G__22404;
            chunk__20718_22393 = G__22405;
            count__20719_22394 = G__22406;
            i__20720_22395 = G__22407;
            continue;
          } else {
            var arg__5757__auto___22408 = cljs.core.first.call(null, seq__20717_22402__$1);
            a__5756__auto__.push(arg__5757__auto___22408);
            var G__22409 = cljs.core.next.call(null, seq__20717_22402__$1);
            var G__22410 = null;
            var G__22411 = 0;
            var G__22412 = 0;
            seq__20717_22392 = G__22409;
            chunk__20718_22393 = G__22410;
            count__20719_22394 = G__22411;
            i__20720_22395 = G__22412;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__5756__auto__);
  };
  var iframe = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22413__i = 0, G__22413__a = new Array(arguments.length - 0);
      while (G__22413__i < G__22413__a.length) {
        G__22413__a[G__22413__i] = arguments[G__22413__i + 0];
        ++G__22413__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22413__a, 0);
    }
    return iframe__delegate.call(this, args__5755__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__22414) {
    var args__5755__auto__ = cljs.core.seq(arglist__22414);
    return iframe__delegate(args__5755__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20725_22415 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20726_22416 = null;
    var count__20727_22417 = 0;
    var i__20728_22418 = 0;
    while (true) {
      if (i__20728_22418 < count__20727_22417) {
        var arg__5757__auto___22419 = cljs.core._nth.call(null, chunk__20726_22416, i__20728_22418);
        a__5756__auto__.push(arg__5757__auto___22419);
        var G__22420 = seq__20725_22415;
        var G__22421 = chunk__20726_22416;
        var G__22422 = count__20727_22417;
        var G__22423 = i__20728_22418 + 1;
        seq__20725_22415 = G__22420;
        chunk__20726_22416 = G__22421;
        count__20727_22417 = G__22422;
        i__20728_22418 = G__22423;
        continue;
      } else {
        var temp__4126__auto___22424 = cljs.core.seq.call(null, seq__20725_22415);
        if (temp__4126__auto___22424) {
          var seq__20725_22425__$1 = temp__4126__auto___22424;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20725_22425__$1)) {
            var c__5012__auto___22426 = cljs.core.chunk_first.call(null, seq__20725_22425__$1);
            var G__22427 = cljs.core.chunk_rest.call(null, seq__20725_22425__$1);
            var G__22428 = c__5012__auto___22426;
            var G__22429 = cljs.core.count.call(null, c__5012__auto___22426);
            var G__22430 = 0;
            seq__20725_22415 = G__22427;
            chunk__20726_22416 = G__22428;
            count__20727_22417 = G__22429;
            i__20728_22418 = G__22430;
            continue;
          } else {
            var arg__5757__auto___22431 = cljs.core.first.call(null, seq__20725_22425__$1);
            a__5756__auto__.push(arg__5757__auto___22431);
            var G__22432 = cljs.core.next.call(null, seq__20725_22425__$1);
            var G__22433 = null;
            var G__22434 = 0;
            var G__22435 = 0;
            seq__20725_22415 = G__22432;
            chunk__20726_22416 = G__22433;
            count__20727_22417 = G__22434;
            i__20728_22418 = G__22435;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__5756__auto__);
  };
  var img = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22436__i = 0, G__22436__a = new Array(arguments.length - 0);
      while (G__22436__i < G__22436__a.length) {
        G__22436__a[G__22436__i] = arguments[G__22436__i + 0];
        ++G__22436__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22436__a, 0);
    }
    return img__delegate.call(this, args__5755__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__22437) {
    var args__5755__auto__ = cljs.core.seq(arglist__22437);
    return img__delegate(args__5755__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20733_22438 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20734_22439 = null;
    var count__20735_22440 = 0;
    var i__20736_22441 = 0;
    while (true) {
      if (i__20736_22441 < count__20735_22440) {
        var arg__5757__auto___22442 = cljs.core._nth.call(null, chunk__20734_22439, i__20736_22441);
        a__5756__auto__.push(arg__5757__auto___22442);
        var G__22443 = seq__20733_22438;
        var G__22444 = chunk__20734_22439;
        var G__22445 = count__20735_22440;
        var G__22446 = i__20736_22441 + 1;
        seq__20733_22438 = G__22443;
        chunk__20734_22439 = G__22444;
        count__20735_22440 = G__22445;
        i__20736_22441 = G__22446;
        continue;
      } else {
        var temp__4126__auto___22447 = cljs.core.seq.call(null, seq__20733_22438);
        if (temp__4126__auto___22447) {
          var seq__20733_22448__$1 = temp__4126__auto___22447;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20733_22448__$1)) {
            var c__5012__auto___22449 = cljs.core.chunk_first.call(null, seq__20733_22448__$1);
            var G__22450 = cljs.core.chunk_rest.call(null, seq__20733_22448__$1);
            var G__22451 = c__5012__auto___22449;
            var G__22452 = cljs.core.count.call(null, c__5012__auto___22449);
            var G__22453 = 0;
            seq__20733_22438 = G__22450;
            chunk__20734_22439 = G__22451;
            count__20735_22440 = G__22452;
            i__20736_22441 = G__22453;
            continue;
          } else {
            var arg__5757__auto___22454 = cljs.core.first.call(null, seq__20733_22448__$1);
            a__5756__auto__.push(arg__5757__auto___22454);
            var G__22455 = cljs.core.next.call(null, seq__20733_22448__$1);
            var G__22456 = null;
            var G__22457 = 0;
            var G__22458 = 0;
            seq__20733_22438 = G__22455;
            chunk__20734_22439 = G__22456;
            count__20735_22440 = G__22457;
            i__20736_22441 = G__22458;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__5756__auto__);
  };
  var input = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22459__i = 0, G__22459__a = new Array(arguments.length - 0);
      while (G__22459__i < G__22459__a.length) {
        G__22459__a[G__22459__i] = arguments[G__22459__i + 0];
        ++G__22459__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22459__a, 0);
    }
    return input__delegate.call(this, args__5755__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__22460) {
    var args__5755__auto__ = cljs.core.seq(arglist__22460);
    return input__delegate(args__5755__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20741_22461 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20742_22462 = null;
    var count__20743_22463 = 0;
    var i__20744_22464 = 0;
    while (true) {
      if (i__20744_22464 < count__20743_22463) {
        var arg__5757__auto___22465 = cljs.core._nth.call(null, chunk__20742_22462, i__20744_22464);
        a__5756__auto__.push(arg__5757__auto___22465);
        var G__22466 = seq__20741_22461;
        var G__22467 = chunk__20742_22462;
        var G__22468 = count__20743_22463;
        var G__22469 = i__20744_22464 + 1;
        seq__20741_22461 = G__22466;
        chunk__20742_22462 = G__22467;
        count__20743_22463 = G__22468;
        i__20744_22464 = G__22469;
        continue;
      } else {
        var temp__4126__auto___22470 = cljs.core.seq.call(null, seq__20741_22461);
        if (temp__4126__auto___22470) {
          var seq__20741_22471__$1 = temp__4126__auto___22470;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20741_22471__$1)) {
            var c__5012__auto___22472 = cljs.core.chunk_first.call(null, seq__20741_22471__$1);
            var G__22473 = cljs.core.chunk_rest.call(null, seq__20741_22471__$1);
            var G__22474 = c__5012__auto___22472;
            var G__22475 = cljs.core.count.call(null, c__5012__auto___22472);
            var G__22476 = 0;
            seq__20741_22461 = G__22473;
            chunk__20742_22462 = G__22474;
            count__20743_22463 = G__22475;
            i__20744_22464 = G__22476;
            continue;
          } else {
            var arg__5757__auto___22477 = cljs.core.first.call(null, seq__20741_22471__$1);
            a__5756__auto__.push(arg__5757__auto___22477);
            var G__22478 = cljs.core.next.call(null, seq__20741_22471__$1);
            var G__22479 = null;
            var G__22480 = 0;
            var G__22481 = 0;
            seq__20741_22461 = G__22478;
            chunk__20742_22462 = G__22479;
            count__20743_22463 = G__22480;
            i__20744_22464 = G__22481;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__5756__auto__);
  };
  var ins = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22482__i = 0, G__22482__a = new Array(arguments.length - 0);
      while (G__22482__i < G__22482__a.length) {
        G__22482__a[G__22482__i] = arguments[G__22482__i + 0];
        ++G__22482__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22482__a, 0);
    }
    return ins__delegate.call(this, args__5755__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__22483) {
    var args__5755__auto__ = cljs.core.seq(arglist__22483);
    return ins__delegate(args__5755__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20749_22484 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20750_22485 = null;
    var count__20751_22486 = 0;
    var i__20752_22487 = 0;
    while (true) {
      if (i__20752_22487 < count__20751_22486) {
        var arg__5757__auto___22488 = cljs.core._nth.call(null, chunk__20750_22485, i__20752_22487);
        a__5756__auto__.push(arg__5757__auto___22488);
        var G__22489 = seq__20749_22484;
        var G__22490 = chunk__20750_22485;
        var G__22491 = count__20751_22486;
        var G__22492 = i__20752_22487 + 1;
        seq__20749_22484 = G__22489;
        chunk__20750_22485 = G__22490;
        count__20751_22486 = G__22491;
        i__20752_22487 = G__22492;
        continue;
      } else {
        var temp__4126__auto___22493 = cljs.core.seq.call(null, seq__20749_22484);
        if (temp__4126__auto___22493) {
          var seq__20749_22494__$1 = temp__4126__auto___22493;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20749_22494__$1)) {
            var c__5012__auto___22495 = cljs.core.chunk_first.call(null, seq__20749_22494__$1);
            var G__22496 = cljs.core.chunk_rest.call(null, seq__20749_22494__$1);
            var G__22497 = c__5012__auto___22495;
            var G__22498 = cljs.core.count.call(null, c__5012__auto___22495);
            var G__22499 = 0;
            seq__20749_22484 = G__22496;
            chunk__20750_22485 = G__22497;
            count__20751_22486 = G__22498;
            i__20752_22487 = G__22499;
            continue;
          } else {
            var arg__5757__auto___22500 = cljs.core.first.call(null, seq__20749_22494__$1);
            a__5756__auto__.push(arg__5757__auto___22500);
            var G__22501 = cljs.core.next.call(null, seq__20749_22494__$1);
            var G__22502 = null;
            var G__22503 = 0;
            var G__22504 = 0;
            seq__20749_22484 = G__22501;
            chunk__20750_22485 = G__22502;
            count__20751_22486 = G__22503;
            i__20752_22487 = G__22504;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__5756__auto__);
  };
  var kbd = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22505__i = 0, G__22505__a = new Array(arguments.length - 0);
      while (G__22505__i < G__22505__a.length) {
        G__22505__a[G__22505__i] = arguments[G__22505__i + 0];
        ++G__22505__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22505__a, 0);
    }
    return kbd__delegate.call(this, args__5755__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__22506) {
    var args__5755__auto__ = cljs.core.seq(arglist__22506);
    return kbd__delegate(args__5755__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20757_22507 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20758_22508 = null;
    var count__20759_22509 = 0;
    var i__20760_22510 = 0;
    while (true) {
      if (i__20760_22510 < count__20759_22509) {
        var arg__5757__auto___22511 = cljs.core._nth.call(null, chunk__20758_22508, i__20760_22510);
        a__5756__auto__.push(arg__5757__auto___22511);
        var G__22512 = seq__20757_22507;
        var G__22513 = chunk__20758_22508;
        var G__22514 = count__20759_22509;
        var G__22515 = i__20760_22510 + 1;
        seq__20757_22507 = G__22512;
        chunk__20758_22508 = G__22513;
        count__20759_22509 = G__22514;
        i__20760_22510 = G__22515;
        continue;
      } else {
        var temp__4126__auto___22516 = cljs.core.seq.call(null, seq__20757_22507);
        if (temp__4126__auto___22516) {
          var seq__20757_22517__$1 = temp__4126__auto___22516;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20757_22517__$1)) {
            var c__5012__auto___22518 = cljs.core.chunk_first.call(null, seq__20757_22517__$1);
            var G__22519 = cljs.core.chunk_rest.call(null, seq__20757_22517__$1);
            var G__22520 = c__5012__auto___22518;
            var G__22521 = cljs.core.count.call(null, c__5012__auto___22518);
            var G__22522 = 0;
            seq__20757_22507 = G__22519;
            chunk__20758_22508 = G__22520;
            count__20759_22509 = G__22521;
            i__20760_22510 = G__22522;
            continue;
          } else {
            var arg__5757__auto___22523 = cljs.core.first.call(null, seq__20757_22517__$1);
            a__5756__auto__.push(arg__5757__auto___22523);
            var G__22524 = cljs.core.next.call(null, seq__20757_22517__$1);
            var G__22525 = null;
            var G__22526 = 0;
            var G__22527 = 0;
            seq__20757_22507 = G__22524;
            chunk__20758_22508 = G__22525;
            count__20759_22509 = G__22526;
            i__20760_22510 = G__22527;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__5756__auto__);
  };
  var keygen = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22528__i = 0, G__22528__a = new Array(arguments.length - 0);
      while (G__22528__i < G__22528__a.length) {
        G__22528__a[G__22528__i] = arguments[G__22528__i + 0];
        ++G__22528__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22528__a, 0);
    }
    return keygen__delegate.call(this, args__5755__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__22529) {
    var args__5755__auto__ = cljs.core.seq(arglist__22529);
    return keygen__delegate(args__5755__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20765_22530 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20766_22531 = null;
    var count__20767_22532 = 0;
    var i__20768_22533 = 0;
    while (true) {
      if (i__20768_22533 < count__20767_22532) {
        var arg__5757__auto___22534 = cljs.core._nth.call(null, chunk__20766_22531, i__20768_22533);
        a__5756__auto__.push(arg__5757__auto___22534);
        var G__22535 = seq__20765_22530;
        var G__22536 = chunk__20766_22531;
        var G__22537 = count__20767_22532;
        var G__22538 = i__20768_22533 + 1;
        seq__20765_22530 = G__22535;
        chunk__20766_22531 = G__22536;
        count__20767_22532 = G__22537;
        i__20768_22533 = G__22538;
        continue;
      } else {
        var temp__4126__auto___22539 = cljs.core.seq.call(null, seq__20765_22530);
        if (temp__4126__auto___22539) {
          var seq__20765_22540__$1 = temp__4126__auto___22539;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20765_22540__$1)) {
            var c__5012__auto___22541 = cljs.core.chunk_first.call(null, seq__20765_22540__$1);
            var G__22542 = cljs.core.chunk_rest.call(null, seq__20765_22540__$1);
            var G__22543 = c__5012__auto___22541;
            var G__22544 = cljs.core.count.call(null, c__5012__auto___22541);
            var G__22545 = 0;
            seq__20765_22530 = G__22542;
            chunk__20766_22531 = G__22543;
            count__20767_22532 = G__22544;
            i__20768_22533 = G__22545;
            continue;
          } else {
            var arg__5757__auto___22546 = cljs.core.first.call(null, seq__20765_22540__$1);
            a__5756__auto__.push(arg__5757__auto___22546);
            var G__22547 = cljs.core.next.call(null, seq__20765_22540__$1);
            var G__22548 = null;
            var G__22549 = 0;
            var G__22550 = 0;
            seq__20765_22530 = G__22547;
            chunk__20766_22531 = G__22548;
            count__20767_22532 = G__22549;
            i__20768_22533 = G__22550;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__5756__auto__);
  };
  var label = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22551__i = 0, G__22551__a = new Array(arguments.length - 0);
      while (G__22551__i < G__22551__a.length) {
        G__22551__a[G__22551__i] = arguments[G__22551__i + 0];
        ++G__22551__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22551__a, 0);
    }
    return label__delegate.call(this, args__5755__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__22552) {
    var args__5755__auto__ = cljs.core.seq(arglist__22552);
    return label__delegate(args__5755__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20773_22553 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20774_22554 = null;
    var count__20775_22555 = 0;
    var i__20776_22556 = 0;
    while (true) {
      if (i__20776_22556 < count__20775_22555) {
        var arg__5757__auto___22557 = cljs.core._nth.call(null, chunk__20774_22554, i__20776_22556);
        a__5756__auto__.push(arg__5757__auto___22557);
        var G__22558 = seq__20773_22553;
        var G__22559 = chunk__20774_22554;
        var G__22560 = count__20775_22555;
        var G__22561 = i__20776_22556 + 1;
        seq__20773_22553 = G__22558;
        chunk__20774_22554 = G__22559;
        count__20775_22555 = G__22560;
        i__20776_22556 = G__22561;
        continue;
      } else {
        var temp__4126__auto___22562 = cljs.core.seq.call(null, seq__20773_22553);
        if (temp__4126__auto___22562) {
          var seq__20773_22563__$1 = temp__4126__auto___22562;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20773_22563__$1)) {
            var c__5012__auto___22564 = cljs.core.chunk_first.call(null, seq__20773_22563__$1);
            var G__22565 = cljs.core.chunk_rest.call(null, seq__20773_22563__$1);
            var G__22566 = c__5012__auto___22564;
            var G__22567 = cljs.core.count.call(null, c__5012__auto___22564);
            var G__22568 = 0;
            seq__20773_22553 = G__22565;
            chunk__20774_22554 = G__22566;
            count__20775_22555 = G__22567;
            i__20776_22556 = G__22568;
            continue;
          } else {
            var arg__5757__auto___22569 = cljs.core.first.call(null, seq__20773_22563__$1);
            a__5756__auto__.push(arg__5757__auto___22569);
            var G__22570 = cljs.core.next.call(null, seq__20773_22563__$1);
            var G__22571 = null;
            var G__22572 = 0;
            var G__22573 = 0;
            seq__20773_22553 = G__22570;
            chunk__20774_22554 = G__22571;
            count__20775_22555 = G__22572;
            i__20776_22556 = G__22573;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__5756__auto__);
  };
  var legend = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22574__i = 0, G__22574__a = new Array(arguments.length - 0);
      while (G__22574__i < G__22574__a.length) {
        G__22574__a[G__22574__i] = arguments[G__22574__i + 0];
        ++G__22574__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22574__a, 0);
    }
    return legend__delegate.call(this, args__5755__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__22575) {
    var args__5755__auto__ = cljs.core.seq(arglist__22575);
    return legend__delegate(args__5755__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20781_22576 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20782_22577 = null;
    var count__20783_22578 = 0;
    var i__20784_22579 = 0;
    while (true) {
      if (i__20784_22579 < count__20783_22578) {
        var arg__5757__auto___22580 = cljs.core._nth.call(null, chunk__20782_22577, i__20784_22579);
        a__5756__auto__.push(arg__5757__auto___22580);
        var G__22581 = seq__20781_22576;
        var G__22582 = chunk__20782_22577;
        var G__22583 = count__20783_22578;
        var G__22584 = i__20784_22579 + 1;
        seq__20781_22576 = G__22581;
        chunk__20782_22577 = G__22582;
        count__20783_22578 = G__22583;
        i__20784_22579 = G__22584;
        continue;
      } else {
        var temp__4126__auto___22585 = cljs.core.seq.call(null, seq__20781_22576);
        if (temp__4126__auto___22585) {
          var seq__20781_22586__$1 = temp__4126__auto___22585;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20781_22586__$1)) {
            var c__5012__auto___22587 = cljs.core.chunk_first.call(null, seq__20781_22586__$1);
            var G__22588 = cljs.core.chunk_rest.call(null, seq__20781_22586__$1);
            var G__22589 = c__5012__auto___22587;
            var G__22590 = cljs.core.count.call(null, c__5012__auto___22587);
            var G__22591 = 0;
            seq__20781_22576 = G__22588;
            chunk__20782_22577 = G__22589;
            count__20783_22578 = G__22590;
            i__20784_22579 = G__22591;
            continue;
          } else {
            var arg__5757__auto___22592 = cljs.core.first.call(null, seq__20781_22586__$1);
            a__5756__auto__.push(arg__5757__auto___22592);
            var G__22593 = cljs.core.next.call(null, seq__20781_22586__$1);
            var G__22594 = null;
            var G__22595 = 0;
            var G__22596 = 0;
            seq__20781_22576 = G__22593;
            chunk__20782_22577 = G__22594;
            count__20783_22578 = G__22595;
            i__20784_22579 = G__22596;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__5756__auto__);
  };
  var li = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22597__i = 0, G__22597__a = new Array(arguments.length - 0);
      while (G__22597__i < G__22597__a.length) {
        G__22597__a[G__22597__i] = arguments[G__22597__i + 0];
        ++G__22597__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22597__a, 0);
    }
    return li__delegate.call(this, args__5755__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__22598) {
    var args__5755__auto__ = cljs.core.seq(arglist__22598);
    return li__delegate(args__5755__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20789_22599 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20790_22600 = null;
    var count__20791_22601 = 0;
    var i__20792_22602 = 0;
    while (true) {
      if (i__20792_22602 < count__20791_22601) {
        var arg__5757__auto___22603 = cljs.core._nth.call(null, chunk__20790_22600, i__20792_22602);
        a__5756__auto__.push(arg__5757__auto___22603);
        var G__22604 = seq__20789_22599;
        var G__22605 = chunk__20790_22600;
        var G__22606 = count__20791_22601;
        var G__22607 = i__20792_22602 + 1;
        seq__20789_22599 = G__22604;
        chunk__20790_22600 = G__22605;
        count__20791_22601 = G__22606;
        i__20792_22602 = G__22607;
        continue;
      } else {
        var temp__4126__auto___22608 = cljs.core.seq.call(null, seq__20789_22599);
        if (temp__4126__auto___22608) {
          var seq__20789_22609__$1 = temp__4126__auto___22608;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20789_22609__$1)) {
            var c__5012__auto___22610 = cljs.core.chunk_first.call(null, seq__20789_22609__$1);
            var G__22611 = cljs.core.chunk_rest.call(null, seq__20789_22609__$1);
            var G__22612 = c__5012__auto___22610;
            var G__22613 = cljs.core.count.call(null, c__5012__auto___22610);
            var G__22614 = 0;
            seq__20789_22599 = G__22611;
            chunk__20790_22600 = G__22612;
            count__20791_22601 = G__22613;
            i__20792_22602 = G__22614;
            continue;
          } else {
            var arg__5757__auto___22615 = cljs.core.first.call(null, seq__20789_22609__$1);
            a__5756__auto__.push(arg__5757__auto___22615);
            var G__22616 = cljs.core.next.call(null, seq__20789_22609__$1);
            var G__22617 = null;
            var G__22618 = 0;
            var G__22619 = 0;
            seq__20789_22599 = G__22616;
            chunk__20790_22600 = G__22617;
            count__20791_22601 = G__22618;
            i__20792_22602 = G__22619;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__5756__auto__);
  };
  var link = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22620__i = 0, G__22620__a = new Array(arguments.length - 0);
      while (G__22620__i < G__22620__a.length) {
        G__22620__a[G__22620__i] = arguments[G__22620__i + 0];
        ++G__22620__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22620__a, 0);
    }
    return link__delegate.call(this, args__5755__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__22621) {
    var args__5755__auto__ = cljs.core.seq(arglist__22621);
    return link__delegate(args__5755__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20797_22622 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20798_22623 = null;
    var count__20799_22624 = 0;
    var i__20800_22625 = 0;
    while (true) {
      if (i__20800_22625 < count__20799_22624) {
        var arg__5757__auto___22626 = cljs.core._nth.call(null, chunk__20798_22623, i__20800_22625);
        a__5756__auto__.push(arg__5757__auto___22626);
        var G__22627 = seq__20797_22622;
        var G__22628 = chunk__20798_22623;
        var G__22629 = count__20799_22624;
        var G__22630 = i__20800_22625 + 1;
        seq__20797_22622 = G__22627;
        chunk__20798_22623 = G__22628;
        count__20799_22624 = G__22629;
        i__20800_22625 = G__22630;
        continue;
      } else {
        var temp__4126__auto___22631 = cljs.core.seq.call(null, seq__20797_22622);
        if (temp__4126__auto___22631) {
          var seq__20797_22632__$1 = temp__4126__auto___22631;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20797_22632__$1)) {
            var c__5012__auto___22633 = cljs.core.chunk_first.call(null, seq__20797_22632__$1);
            var G__22634 = cljs.core.chunk_rest.call(null, seq__20797_22632__$1);
            var G__22635 = c__5012__auto___22633;
            var G__22636 = cljs.core.count.call(null, c__5012__auto___22633);
            var G__22637 = 0;
            seq__20797_22622 = G__22634;
            chunk__20798_22623 = G__22635;
            count__20799_22624 = G__22636;
            i__20800_22625 = G__22637;
            continue;
          } else {
            var arg__5757__auto___22638 = cljs.core.first.call(null, seq__20797_22632__$1);
            a__5756__auto__.push(arg__5757__auto___22638);
            var G__22639 = cljs.core.next.call(null, seq__20797_22632__$1);
            var G__22640 = null;
            var G__22641 = 0;
            var G__22642 = 0;
            seq__20797_22622 = G__22639;
            chunk__20798_22623 = G__22640;
            count__20799_22624 = G__22641;
            i__20800_22625 = G__22642;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__5756__auto__);
  };
  var main = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22643__i = 0, G__22643__a = new Array(arguments.length - 0);
      while (G__22643__i < G__22643__a.length) {
        G__22643__a[G__22643__i] = arguments[G__22643__i + 0];
        ++G__22643__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22643__a, 0);
    }
    return main__delegate.call(this, args__5755__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__22644) {
    var args__5755__auto__ = cljs.core.seq(arglist__22644);
    return main__delegate(args__5755__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20805_22645 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20806_22646 = null;
    var count__20807_22647 = 0;
    var i__20808_22648 = 0;
    while (true) {
      if (i__20808_22648 < count__20807_22647) {
        var arg__5757__auto___22649 = cljs.core._nth.call(null, chunk__20806_22646, i__20808_22648);
        a__5756__auto__.push(arg__5757__auto___22649);
        var G__22650 = seq__20805_22645;
        var G__22651 = chunk__20806_22646;
        var G__22652 = count__20807_22647;
        var G__22653 = i__20808_22648 + 1;
        seq__20805_22645 = G__22650;
        chunk__20806_22646 = G__22651;
        count__20807_22647 = G__22652;
        i__20808_22648 = G__22653;
        continue;
      } else {
        var temp__4126__auto___22654 = cljs.core.seq.call(null, seq__20805_22645);
        if (temp__4126__auto___22654) {
          var seq__20805_22655__$1 = temp__4126__auto___22654;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20805_22655__$1)) {
            var c__5012__auto___22656 = cljs.core.chunk_first.call(null, seq__20805_22655__$1);
            var G__22657 = cljs.core.chunk_rest.call(null, seq__20805_22655__$1);
            var G__22658 = c__5012__auto___22656;
            var G__22659 = cljs.core.count.call(null, c__5012__auto___22656);
            var G__22660 = 0;
            seq__20805_22645 = G__22657;
            chunk__20806_22646 = G__22658;
            count__20807_22647 = G__22659;
            i__20808_22648 = G__22660;
            continue;
          } else {
            var arg__5757__auto___22661 = cljs.core.first.call(null, seq__20805_22655__$1);
            a__5756__auto__.push(arg__5757__auto___22661);
            var G__22662 = cljs.core.next.call(null, seq__20805_22655__$1);
            var G__22663 = null;
            var G__22664 = 0;
            var G__22665 = 0;
            seq__20805_22645 = G__22662;
            chunk__20806_22646 = G__22663;
            count__20807_22647 = G__22664;
            i__20808_22648 = G__22665;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__5756__auto__);
  };
  var map = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22666__i = 0, G__22666__a = new Array(arguments.length - 0);
      while (G__22666__i < G__22666__a.length) {
        G__22666__a[G__22666__i] = arguments[G__22666__i + 0];
        ++G__22666__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22666__a, 0);
    }
    return map__delegate.call(this, args__5755__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__22667) {
    var args__5755__auto__ = cljs.core.seq(arglist__22667);
    return map__delegate(args__5755__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20813_22668 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20814_22669 = null;
    var count__20815_22670 = 0;
    var i__20816_22671 = 0;
    while (true) {
      if (i__20816_22671 < count__20815_22670) {
        var arg__5757__auto___22672 = cljs.core._nth.call(null, chunk__20814_22669, i__20816_22671);
        a__5756__auto__.push(arg__5757__auto___22672);
        var G__22673 = seq__20813_22668;
        var G__22674 = chunk__20814_22669;
        var G__22675 = count__20815_22670;
        var G__22676 = i__20816_22671 + 1;
        seq__20813_22668 = G__22673;
        chunk__20814_22669 = G__22674;
        count__20815_22670 = G__22675;
        i__20816_22671 = G__22676;
        continue;
      } else {
        var temp__4126__auto___22677 = cljs.core.seq.call(null, seq__20813_22668);
        if (temp__4126__auto___22677) {
          var seq__20813_22678__$1 = temp__4126__auto___22677;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20813_22678__$1)) {
            var c__5012__auto___22679 = cljs.core.chunk_first.call(null, seq__20813_22678__$1);
            var G__22680 = cljs.core.chunk_rest.call(null, seq__20813_22678__$1);
            var G__22681 = c__5012__auto___22679;
            var G__22682 = cljs.core.count.call(null, c__5012__auto___22679);
            var G__22683 = 0;
            seq__20813_22668 = G__22680;
            chunk__20814_22669 = G__22681;
            count__20815_22670 = G__22682;
            i__20816_22671 = G__22683;
            continue;
          } else {
            var arg__5757__auto___22684 = cljs.core.first.call(null, seq__20813_22678__$1);
            a__5756__auto__.push(arg__5757__auto___22684);
            var G__22685 = cljs.core.next.call(null, seq__20813_22678__$1);
            var G__22686 = null;
            var G__22687 = 0;
            var G__22688 = 0;
            seq__20813_22668 = G__22685;
            chunk__20814_22669 = G__22686;
            count__20815_22670 = G__22687;
            i__20816_22671 = G__22688;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__5756__auto__);
  };
  var mark = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22689__i = 0, G__22689__a = new Array(arguments.length - 0);
      while (G__22689__i < G__22689__a.length) {
        G__22689__a[G__22689__i] = arguments[G__22689__i + 0];
        ++G__22689__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22689__a, 0);
    }
    return mark__delegate.call(this, args__5755__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__22690) {
    var args__5755__auto__ = cljs.core.seq(arglist__22690);
    return mark__delegate(args__5755__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20821_22691 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20822_22692 = null;
    var count__20823_22693 = 0;
    var i__20824_22694 = 0;
    while (true) {
      if (i__20824_22694 < count__20823_22693) {
        var arg__5757__auto___22695 = cljs.core._nth.call(null, chunk__20822_22692, i__20824_22694);
        a__5756__auto__.push(arg__5757__auto___22695);
        var G__22696 = seq__20821_22691;
        var G__22697 = chunk__20822_22692;
        var G__22698 = count__20823_22693;
        var G__22699 = i__20824_22694 + 1;
        seq__20821_22691 = G__22696;
        chunk__20822_22692 = G__22697;
        count__20823_22693 = G__22698;
        i__20824_22694 = G__22699;
        continue;
      } else {
        var temp__4126__auto___22700 = cljs.core.seq.call(null, seq__20821_22691);
        if (temp__4126__auto___22700) {
          var seq__20821_22701__$1 = temp__4126__auto___22700;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20821_22701__$1)) {
            var c__5012__auto___22702 = cljs.core.chunk_first.call(null, seq__20821_22701__$1);
            var G__22703 = cljs.core.chunk_rest.call(null, seq__20821_22701__$1);
            var G__22704 = c__5012__auto___22702;
            var G__22705 = cljs.core.count.call(null, c__5012__auto___22702);
            var G__22706 = 0;
            seq__20821_22691 = G__22703;
            chunk__20822_22692 = G__22704;
            count__20823_22693 = G__22705;
            i__20824_22694 = G__22706;
            continue;
          } else {
            var arg__5757__auto___22707 = cljs.core.first.call(null, seq__20821_22701__$1);
            a__5756__auto__.push(arg__5757__auto___22707);
            var G__22708 = cljs.core.next.call(null, seq__20821_22701__$1);
            var G__22709 = null;
            var G__22710 = 0;
            var G__22711 = 0;
            seq__20821_22691 = G__22708;
            chunk__20822_22692 = G__22709;
            count__20823_22693 = G__22710;
            i__20824_22694 = G__22711;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__5756__auto__);
  };
  var menu = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22712__i = 0, G__22712__a = new Array(arguments.length - 0);
      while (G__22712__i < G__22712__a.length) {
        G__22712__a[G__22712__i] = arguments[G__22712__i + 0];
        ++G__22712__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22712__a, 0);
    }
    return menu__delegate.call(this, args__5755__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__22713) {
    var args__5755__auto__ = cljs.core.seq(arglist__22713);
    return menu__delegate(args__5755__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20829_22714 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20830_22715 = null;
    var count__20831_22716 = 0;
    var i__20832_22717 = 0;
    while (true) {
      if (i__20832_22717 < count__20831_22716) {
        var arg__5757__auto___22718 = cljs.core._nth.call(null, chunk__20830_22715, i__20832_22717);
        a__5756__auto__.push(arg__5757__auto___22718);
        var G__22719 = seq__20829_22714;
        var G__22720 = chunk__20830_22715;
        var G__22721 = count__20831_22716;
        var G__22722 = i__20832_22717 + 1;
        seq__20829_22714 = G__22719;
        chunk__20830_22715 = G__22720;
        count__20831_22716 = G__22721;
        i__20832_22717 = G__22722;
        continue;
      } else {
        var temp__4126__auto___22723 = cljs.core.seq.call(null, seq__20829_22714);
        if (temp__4126__auto___22723) {
          var seq__20829_22724__$1 = temp__4126__auto___22723;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20829_22724__$1)) {
            var c__5012__auto___22725 = cljs.core.chunk_first.call(null, seq__20829_22724__$1);
            var G__22726 = cljs.core.chunk_rest.call(null, seq__20829_22724__$1);
            var G__22727 = c__5012__auto___22725;
            var G__22728 = cljs.core.count.call(null, c__5012__auto___22725);
            var G__22729 = 0;
            seq__20829_22714 = G__22726;
            chunk__20830_22715 = G__22727;
            count__20831_22716 = G__22728;
            i__20832_22717 = G__22729;
            continue;
          } else {
            var arg__5757__auto___22730 = cljs.core.first.call(null, seq__20829_22724__$1);
            a__5756__auto__.push(arg__5757__auto___22730);
            var G__22731 = cljs.core.next.call(null, seq__20829_22724__$1);
            var G__22732 = null;
            var G__22733 = 0;
            var G__22734 = 0;
            seq__20829_22714 = G__22731;
            chunk__20830_22715 = G__22732;
            count__20831_22716 = G__22733;
            i__20832_22717 = G__22734;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__5756__auto__);
  };
  var menuitem = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22735__i = 0, G__22735__a = new Array(arguments.length - 0);
      while (G__22735__i < G__22735__a.length) {
        G__22735__a[G__22735__i] = arguments[G__22735__i + 0];
        ++G__22735__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22735__a, 0);
    }
    return menuitem__delegate.call(this, args__5755__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__22736) {
    var args__5755__auto__ = cljs.core.seq(arglist__22736);
    return menuitem__delegate(args__5755__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20837_22737 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20838_22738 = null;
    var count__20839_22739 = 0;
    var i__20840_22740 = 0;
    while (true) {
      if (i__20840_22740 < count__20839_22739) {
        var arg__5757__auto___22741 = cljs.core._nth.call(null, chunk__20838_22738, i__20840_22740);
        a__5756__auto__.push(arg__5757__auto___22741);
        var G__22742 = seq__20837_22737;
        var G__22743 = chunk__20838_22738;
        var G__22744 = count__20839_22739;
        var G__22745 = i__20840_22740 + 1;
        seq__20837_22737 = G__22742;
        chunk__20838_22738 = G__22743;
        count__20839_22739 = G__22744;
        i__20840_22740 = G__22745;
        continue;
      } else {
        var temp__4126__auto___22746 = cljs.core.seq.call(null, seq__20837_22737);
        if (temp__4126__auto___22746) {
          var seq__20837_22747__$1 = temp__4126__auto___22746;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20837_22747__$1)) {
            var c__5012__auto___22748 = cljs.core.chunk_first.call(null, seq__20837_22747__$1);
            var G__22749 = cljs.core.chunk_rest.call(null, seq__20837_22747__$1);
            var G__22750 = c__5012__auto___22748;
            var G__22751 = cljs.core.count.call(null, c__5012__auto___22748);
            var G__22752 = 0;
            seq__20837_22737 = G__22749;
            chunk__20838_22738 = G__22750;
            count__20839_22739 = G__22751;
            i__20840_22740 = G__22752;
            continue;
          } else {
            var arg__5757__auto___22753 = cljs.core.first.call(null, seq__20837_22747__$1);
            a__5756__auto__.push(arg__5757__auto___22753);
            var G__22754 = cljs.core.next.call(null, seq__20837_22747__$1);
            var G__22755 = null;
            var G__22756 = 0;
            var G__22757 = 0;
            seq__20837_22737 = G__22754;
            chunk__20838_22738 = G__22755;
            count__20839_22739 = G__22756;
            i__20840_22740 = G__22757;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__5756__auto__);
  };
  var meta = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22758__i = 0, G__22758__a = new Array(arguments.length - 0);
      while (G__22758__i < G__22758__a.length) {
        G__22758__a[G__22758__i] = arguments[G__22758__i + 0];
        ++G__22758__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22758__a, 0);
    }
    return meta__delegate.call(this, args__5755__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__22759) {
    var args__5755__auto__ = cljs.core.seq(arglist__22759);
    return meta__delegate(args__5755__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20845_22760 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20846_22761 = null;
    var count__20847_22762 = 0;
    var i__20848_22763 = 0;
    while (true) {
      if (i__20848_22763 < count__20847_22762) {
        var arg__5757__auto___22764 = cljs.core._nth.call(null, chunk__20846_22761, i__20848_22763);
        a__5756__auto__.push(arg__5757__auto___22764);
        var G__22765 = seq__20845_22760;
        var G__22766 = chunk__20846_22761;
        var G__22767 = count__20847_22762;
        var G__22768 = i__20848_22763 + 1;
        seq__20845_22760 = G__22765;
        chunk__20846_22761 = G__22766;
        count__20847_22762 = G__22767;
        i__20848_22763 = G__22768;
        continue;
      } else {
        var temp__4126__auto___22769 = cljs.core.seq.call(null, seq__20845_22760);
        if (temp__4126__auto___22769) {
          var seq__20845_22770__$1 = temp__4126__auto___22769;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20845_22770__$1)) {
            var c__5012__auto___22771 = cljs.core.chunk_first.call(null, seq__20845_22770__$1);
            var G__22772 = cljs.core.chunk_rest.call(null, seq__20845_22770__$1);
            var G__22773 = c__5012__auto___22771;
            var G__22774 = cljs.core.count.call(null, c__5012__auto___22771);
            var G__22775 = 0;
            seq__20845_22760 = G__22772;
            chunk__20846_22761 = G__22773;
            count__20847_22762 = G__22774;
            i__20848_22763 = G__22775;
            continue;
          } else {
            var arg__5757__auto___22776 = cljs.core.first.call(null, seq__20845_22770__$1);
            a__5756__auto__.push(arg__5757__auto___22776);
            var G__22777 = cljs.core.next.call(null, seq__20845_22770__$1);
            var G__22778 = null;
            var G__22779 = 0;
            var G__22780 = 0;
            seq__20845_22760 = G__22777;
            chunk__20846_22761 = G__22778;
            count__20847_22762 = G__22779;
            i__20848_22763 = G__22780;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__5756__auto__);
  };
  var meter = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22781__i = 0, G__22781__a = new Array(arguments.length - 0);
      while (G__22781__i < G__22781__a.length) {
        G__22781__a[G__22781__i] = arguments[G__22781__i + 0];
        ++G__22781__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22781__a, 0);
    }
    return meter__delegate.call(this, args__5755__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__22782) {
    var args__5755__auto__ = cljs.core.seq(arglist__22782);
    return meter__delegate(args__5755__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20853_22783 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20854_22784 = null;
    var count__20855_22785 = 0;
    var i__20856_22786 = 0;
    while (true) {
      if (i__20856_22786 < count__20855_22785) {
        var arg__5757__auto___22787 = cljs.core._nth.call(null, chunk__20854_22784, i__20856_22786);
        a__5756__auto__.push(arg__5757__auto___22787);
        var G__22788 = seq__20853_22783;
        var G__22789 = chunk__20854_22784;
        var G__22790 = count__20855_22785;
        var G__22791 = i__20856_22786 + 1;
        seq__20853_22783 = G__22788;
        chunk__20854_22784 = G__22789;
        count__20855_22785 = G__22790;
        i__20856_22786 = G__22791;
        continue;
      } else {
        var temp__4126__auto___22792 = cljs.core.seq.call(null, seq__20853_22783);
        if (temp__4126__auto___22792) {
          var seq__20853_22793__$1 = temp__4126__auto___22792;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20853_22793__$1)) {
            var c__5012__auto___22794 = cljs.core.chunk_first.call(null, seq__20853_22793__$1);
            var G__22795 = cljs.core.chunk_rest.call(null, seq__20853_22793__$1);
            var G__22796 = c__5012__auto___22794;
            var G__22797 = cljs.core.count.call(null, c__5012__auto___22794);
            var G__22798 = 0;
            seq__20853_22783 = G__22795;
            chunk__20854_22784 = G__22796;
            count__20855_22785 = G__22797;
            i__20856_22786 = G__22798;
            continue;
          } else {
            var arg__5757__auto___22799 = cljs.core.first.call(null, seq__20853_22793__$1);
            a__5756__auto__.push(arg__5757__auto___22799);
            var G__22800 = cljs.core.next.call(null, seq__20853_22793__$1);
            var G__22801 = null;
            var G__22802 = 0;
            var G__22803 = 0;
            seq__20853_22783 = G__22800;
            chunk__20854_22784 = G__22801;
            count__20855_22785 = G__22802;
            i__20856_22786 = G__22803;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__5756__auto__);
  };
  var nav = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22804__i = 0, G__22804__a = new Array(arguments.length - 0);
      while (G__22804__i < G__22804__a.length) {
        G__22804__a[G__22804__i] = arguments[G__22804__i + 0];
        ++G__22804__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22804__a, 0);
    }
    return nav__delegate.call(this, args__5755__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__22805) {
    var args__5755__auto__ = cljs.core.seq(arglist__22805);
    return nav__delegate(args__5755__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20861_22806 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20862_22807 = null;
    var count__20863_22808 = 0;
    var i__20864_22809 = 0;
    while (true) {
      if (i__20864_22809 < count__20863_22808) {
        var arg__5757__auto___22810 = cljs.core._nth.call(null, chunk__20862_22807, i__20864_22809);
        a__5756__auto__.push(arg__5757__auto___22810);
        var G__22811 = seq__20861_22806;
        var G__22812 = chunk__20862_22807;
        var G__22813 = count__20863_22808;
        var G__22814 = i__20864_22809 + 1;
        seq__20861_22806 = G__22811;
        chunk__20862_22807 = G__22812;
        count__20863_22808 = G__22813;
        i__20864_22809 = G__22814;
        continue;
      } else {
        var temp__4126__auto___22815 = cljs.core.seq.call(null, seq__20861_22806);
        if (temp__4126__auto___22815) {
          var seq__20861_22816__$1 = temp__4126__auto___22815;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20861_22816__$1)) {
            var c__5012__auto___22817 = cljs.core.chunk_first.call(null, seq__20861_22816__$1);
            var G__22818 = cljs.core.chunk_rest.call(null, seq__20861_22816__$1);
            var G__22819 = c__5012__auto___22817;
            var G__22820 = cljs.core.count.call(null, c__5012__auto___22817);
            var G__22821 = 0;
            seq__20861_22806 = G__22818;
            chunk__20862_22807 = G__22819;
            count__20863_22808 = G__22820;
            i__20864_22809 = G__22821;
            continue;
          } else {
            var arg__5757__auto___22822 = cljs.core.first.call(null, seq__20861_22816__$1);
            a__5756__auto__.push(arg__5757__auto___22822);
            var G__22823 = cljs.core.next.call(null, seq__20861_22816__$1);
            var G__22824 = null;
            var G__22825 = 0;
            var G__22826 = 0;
            seq__20861_22806 = G__22823;
            chunk__20862_22807 = G__22824;
            count__20863_22808 = G__22825;
            i__20864_22809 = G__22826;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__5756__auto__);
  };
  var noscript = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22827__i = 0, G__22827__a = new Array(arguments.length - 0);
      while (G__22827__i < G__22827__a.length) {
        G__22827__a[G__22827__i] = arguments[G__22827__i + 0];
        ++G__22827__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22827__a, 0);
    }
    return noscript__delegate.call(this, args__5755__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__22828) {
    var args__5755__auto__ = cljs.core.seq(arglist__22828);
    return noscript__delegate(args__5755__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20869_22829 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20870_22830 = null;
    var count__20871_22831 = 0;
    var i__20872_22832 = 0;
    while (true) {
      if (i__20872_22832 < count__20871_22831) {
        var arg__5757__auto___22833 = cljs.core._nth.call(null, chunk__20870_22830, i__20872_22832);
        a__5756__auto__.push(arg__5757__auto___22833);
        var G__22834 = seq__20869_22829;
        var G__22835 = chunk__20870_22830;
        var G__22836 = count__20871_22831;
        var G__22837 = i__20872_22832 + 1;
        seq__20869_22829 = G__22834;
        chunk__20870_22830 = G__22835;
        count__20871_22831 = G__22836;
        i__20872_22832 = G__22837;
        continue;
      } else {
        var temp__4126__auto___22838 = cljs.core.seq.call(null, seq__20869_22829);
        if (temp__4126__auto___22838) {
          var seq__20869_22839__$1 = temp__4126__auto___22838;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20869_22839__$1)) {
            var c__5012__auto___22840 = cljs.core.chunk_first.call(null, seq__20869_22839__$1);
            var G__22841 = cljs.core.chunk_rest.call(null, seq__20869_22839__$1);
            var G__22842 = c__5012__auto___22840;
            var G__22843 = cljs.core.count.call(null, c__5012__auto___22840);
            var G__22844 = 0;
            seq__20869_22829 = G__22841;
            chunk__20870_22830 = G__22842;
            count__20871_22831 = G__22843;
            i__20872_22832 = G__22844;
            continue;
          } else {
            var arg__5757__auto___22845 = cljs.core.first.call(null, seq__20869_22839__$1);
            a__5756__auto__.push(arg__5757__auto___22845);
            var G__22846 = cljs.core.next.call(null, seq__20869_22839__$1);
            var G__22847 = null;
            var G__22848 = 0;
            var G__22849 = 0;
            seq__20869_22829 = G__22846;
            chunk__20870_22830 = G__22847;
            count__20871_22831 = G__22848;
            i__20872_22832 = G__22849;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__5756__auto__);
  };
  var object = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22850__i = 0, G__22850__a = new Array(arguments.length - 0);
      while (G__22850__i < G__22850__a.length) {
        G__22850__a[G__22850__i] = arguments[G__22850__i + 0];
        ++G__22850__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22850__a, 0);
    }
    return object__delegate.call(this, args__5755__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__22851) {
    var args__5755__auto__ = cljs.core.seq(arglist__22851);
    return object__delegate(args__5755__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20877_22852 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20878_22853 = null;
    var count__20879_22854 = 0;
    var i__20880_22855 = 0;
    while (true) {
      if (i__20880_22855 < count__20879_22854) {
        var arg__5757__auto___22856 = cljs.core._nth.call(null, chunk__20878_22853, i__20880_22855);
        a__5756__auto__.push(arg__5757__auto___22856);
        var G__22857 = seq__20877_22852;
        var G__22858 = chunk__20878_22853;
        var G__22859 = count__20879_22854;
        var G__22860 = i__20880_22855 + 1;
        seq__20877_22852 = G__22857;
        chunk__20878_22853 = G__22858;
        count__20879_22854 = G__22859;
        i__20880_22855 = G__22860;
        continue;
      } else {
        var temp__4126__auto___22861 = cljs.core.seq.call(null, seq__20877_22852);
        if (temp__4126__auto___22861) {
          var seq__20877_22862__$1 = temp__4126__auto___22861;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20877_22862__$1)) {
            var c__5012__auto___22863 = cljs.core.chunk_first.call(null, seq__20877_22862__$1);
            var G__22864 = cljs.core.chunk_rest.call(null, seq__20877_22862__$1);
            var G__22865 = c__5012__auto___22863;
            var G__22866 = cljs.core.count.call(null, c__5012__auto___22863);
            var G__22867 = 0;
            seq__20877_22852 = G__22864;
            chunk__20878_22853 = G__22865;
            count__20879_22854 = G__22866;
            i__20880_22855 = G__22867;
            continue;
          } else {
            var arg__5757__auto___22868 = cljs.core.first.call(null, seq__20877_22862__$1);
            a__5756__auto__.push(arg__5757__auto___22868);
            var G__22869 = cljs.core.next.call(null, seq__20877_22862__$1);
            var G__22870 = null;
            var G__22871 = 0;
            var G__22872 = 0;
            seq__20877_22852 = G__22869;
            chunk__20878_22853 = G__22870;
            count__20879_22854 = G__22871;
            i__20880_22855 = G__22872;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__5756__auto__);
  };
  var ol = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22873__i = 0, G__22873__a = new Array(arguments.length - 0);
      while (G__22873__i < G__22873__a.length) {
        G__22873__a[G__22873__i] = arguments[G__22873__i + 0];
        ++G__22873__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22873__a, 0);
    }
    return ol__delegate.call(this, args__5755__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__22874) {
    var args__5755__auto__ = cljs.core.seq(arglist__22874);
    return ol__delegate(args__5755__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20885_22875 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20886_22876 = null;
    var count__20887_22877 = 0;
    var i__20888_22878 = 0;
    while (true) {
      if (i__20888_22878 < count__20887_22877) {
        var arg__5757__auto___22879 = cljs.core._nth.call(null, chunk__20886_22876, i__20888_22878);
        a__5756__auto__.push(arg__5757__auto___22879);
        var G__22880 = seq__20885_22875;
        var G__22881 = chunk__20886_22876;
        var G__22882 = count__20887_22877;
        var G__22883 = i__20888_22878 + 1;
        seq__20885_22875 = G__22880;
        chunk__20886_22876 = G__22881;
        count__20887_22877 = G__22882;
        i__20888_22878 = G__22883;
        continue;
      } else {
        var temp__4126__auto___22884 = cljs.core.seq.call(null, seq__20885_22875);
        if (temp__4126__auto___22884) {
          var seq__20885_22885__$1 = temp__4126__auto___22884;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20885_22885__$1)) {
            var c__5012__auto___22886 = cljs.core.chunk_first.call(null, seq__20885_22885__$1);
            var G__22887 = cljs.core.chunk_rest.call(null, seq__20885_22885__$1);
            var G__22888 = c__5012__auto___22886;
            var G__22889 = cljs.core.count.call(null, c__5012__auto___22886);
            var G__22890 = 0;
            seq__20885_22875 = G__22887;
            chunk__20886_22876 = G__22888;
            count__20887_22877 = G__22889;
            i__20888_22878 = G__22890;
            continue;
          } else {
            var arg__5757__auto___22891 = cljs.core.first.call(null, seq__20885_22885__$1);
            a__5756__auto__.push(arg__5757__auto___22891);
            var G__22892 = cljs.core.next.call(null, seq__20885_22885__$1);
            var G__22893 = null;
            var G__22894 = 0;
            var G__22895 = 0;
            seq__20885_22875 = G__22892;
            chunk__20886_22876 = G__22893;
            count__20887_22877 = G__22894;
            i__20888_22878 = G__22895;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__5756__auto__);
  };
  var optgroup = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22896__i = 0, G__22896__a = new Array(arguments.length - 0);
      while (G__22896__i < G__22896__a.length) {
        G__22896__a[G__22896__i] = arguments[G__22896__i + 0];
        ++G__22896__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22896__a, 0);
    }
    return optgroup__delegate.call(this, args__5755__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__22897) {
    var args__5755__auto__ = cljs.core.seq(arglist__22897);
    return optgroup__delegate(args__5755__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20893_22898 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20894_22899 = null;
    var count__20895_22900 = 0;
    var i__20896_22901 = 0;
    while (true) {
      if (i__20896_22901 < count__20895_22900) {
        var arg__5757__auto___22902 = cljs.core._nth.call(null, chunk__20894_22899, i__20896_22901);
        a__5756__auto__.push(arg__5757__auto___22902);
        var G__22903 = seq__20893_22898;
        var G__22904 = chunk__20894_22899;
        var G__22905 = count__20895_22900;
        var G__22906 = i__20896_22901 + 1;
        seq__20893_22898 = G__22903;
        chunk__20894_22899 = G__22904;
        count__20895_22900 = G__22905;
        i__20896_22901 = G__22906;
        continue;
      } else {
        var temp__4126__auto___22907 = cljs.core.seq.call(null, seq__20893_22898);
        if (temp__4126__auto___22907) {
          var seq__20893_22908__$1 = temp__4126__auto___22907;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20893_22908__$1)) {
            var c__5012__auto___22909 = cljs.core.chunk_first.call(null, seq__20893_22908__$1);
            var G__22910 = cljs.core.chunk_rest.call(null, seq__20893_22908__$1);
            var G__22911 = c__5012__auto___22909;
            var G__22912 = cljs.core.count.call(null, c__5012__auto___22909);
            var G__22913 = 0;
            seq__20893_22898 = G__22910;
            chunk__20894_22899 = G__22911;
            count__20895_22900 = G__22912;
            i__20896_22901 = G__22913;
            continue;
          } else {
            var arg__5757__auto___22914 = cljs.core.first.call(null, seq__20893_22908__$1);
            a__5756__auto__.push(arg__5757__auto___22914);
            var G__22915 = cljs.core.next.call(null, seq__20893_22908__$1);
            var G__22916 = null;
            var G__22917 = 0;
            var G__22918 = 0;
            seq__20893_22898 = G__22915;
            chunk__20894_22899 = G__22916;
            count__20895_22900 = G__22917;
            i__20896_22901 = G__22918;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__5756__auto__);
  };
  var option = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22919__i = 0, G__22919__a = new Array(arguments.length - 0);
      while (G__22919__i < G__22919__a.length) {
        G__22919__a[G__22919__i] = arguments[G__22919__i + 0];
        ++G__22919__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22919__a, 0);
    }
    return option__delegate.call(this, args__5755__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__22920) {
    var args__5755__auto__ = cljs.core.seq(arglist__22920);
    return option__delegate(args__5755__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20901_22921 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20902_22922 = null;
    var count__20903_22923 = 0;
    var i__20904_22924 = 0;
    while (true) {
      if (i__20904_22924 < count__20903_22923) {
        var arg__5757__auto___22925 = cljs.core._nth.call(null, chunk__20902_22922, i__20904_22924);
        a__5756__auto__.push(arg__5757__auto___22925);
        var G__22926 = seq__20901_22921;
        var G__22927 = chunk__20902_22922;
        var G__22928 = count__20903_22923;
        var G__22929 = i__20904_22924 + 1;
        seq__20901_22921 = G__22926;
        chunk__20902_22922 = G__22927;
        count__20903_22923 = G__22928;
        i__20904_22924 = G__22929;
        continue;
      } else {
        var temp__4126__auto___22930 = cljs.core.seq.call(null, seq__20901_22921);
        if (temp__4126__auto___22930) {
          var seq__20901_22931__$1 = temp__4126__auto___22930;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20901_22931__$1)) {
            var c__5012__auto___22932 = cljs.core.chunk_first.call(null, seq__20901_22931__$1);
            var G__22933 = cljs.core.chunk_rest.call(null, seq__20901_22931__$1);
            var G__22934 = c__5012__auto___22932;
            var G__22935 = cljs.core.count.call(null, c__5012__auto___22932);
            var G__22936 = 0;
            seq__20901_22921 = G__22933;
            chunk__20902_22922 = G__22934;
            count__20903_22923 = G__22935;
            i__20904_22924 = G__22936;
            continue;
          } else {
            var arg__5757__auto___22937 = cljs.core.first.call(null, seq__20901_22931__$1);
            a__5756__auto__.push(arg__5757__auto___22937);
            var G__22938 = cljs.core.next.call(null, seq__20901_22931__$1);
            var G__22939 = null;
            var G__22940 = 0;
            var G__22941 = 0;
            seq__20901_22921 = G__22938;
            chunk__20902_22922 = G__22939;
            count__20903_22923 = G__22940;
            i__20904_22924 = G__22941;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__5756__auto__);
  };
  var output = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22942__i = 0, G__22942__a = new Array(arguments.length - 0);
      while (G__22942__i < G__22942__a.length) {
        G__22942__a[G__22942__i] = arguments[G__22942__i + 0];
        ++G__22942__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22942__a, 0);
    }
    return output__delegate.call(this, args__5755__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__22943) {
    var args__5755__auto__ = cljs.core.seq(arglist__22943);
    return output__delegate(args__5755__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20909_22944 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20910_22945 = null;
    var count__20911_22946 = 0;
    var i__20912_22947 = 0;
    while (true) {
      if (i__20912_22947 < count__20911_22946) {
        var arg__5757__auto___22948 = cljs.core._nth.call(null, chunk__20910_22945, i__20912_22947);
        a__5756__auto__.push(arg__5757__auto___22948);
        var G__22949 = seq__20909_22944;
        var G__22950 = chunk__20910_22945;
        var G__22951 = count__20911_22946;
        var G__22952 = i__20912_22947 + 1;
        seq__20909_22944 = G__22949;
        chunk__20910_22945 = G__22950;
        count__20911_22946 = G__22951;
        i__20912_22947 = G__22952;
        continue;
      } else {
        var temp__4126__auto___22953 = cljs.core.seq.call(null, seq__20909_22944);
        if (temp__4126__auto___22953) {
          var seq__20909_22954__$1 = temp__4126__auto___22953;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20909_22954__$1)) {
            var c__5012__auto___22955 = cljs.core.chunk_first.call(null, seq__20909_22954__$1);
            var G__22956 = cljs.core.chunk_rest.call(null, seq__20909_22954__$1);
            var G__22957 = c__5012__auto___22955;
            var G__22958 = cljs.core.count.call(null, c__5012__auto___22955);
            var G__22959 = 0;
            seq__20909_22944 = G__22956;
            chunk__20910_22945 = G__22957;
            count__20911_22946 = G__22958;
            i__20912_22947 = G__22959;
            continue;
          } else {
            var arg__5757__auto___22960 = cljs.core.first.call(null, seq__20909_22954__$1);
            a__5756__auto__.push(arg__5757__auto___22960);
            var G__22961 = cljs.core.next.call(null, seq__20909_22954__$1);
            var G__22962 = null;
            var G__22963 = 0;
            var G__22964 = 0;
            seq__20909_22944 = G__22961;
            chunk__20910_22945 = G__22962;
            count__20911_22946 = G__22963;
            i__20912_22947 = G__22964;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__5756__auto__);
  };
  var p = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22965__i = 0, G__22965__a = new Array(arguments.length - 0);
      while (G__22965__i < G__22965__a.length) {
        G__22965__a[G__22965__i] = arguments[G__22965__i + 0];
        ++G__22965__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22965__a, 0);
    }
    return p__delegate.call(this, args__5755__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__22966) {
    var args__5755__auto__ = cljs.core.seq(arglist__22966);
    return p__delegate(args__5755__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20917_22967 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20918_22968 = null;
    var count__20919_22969 = 0;
    var i__20920_22970 = 0;
    while (true) {
      if (i__20920_22970 < count__20919_22969) {
        var arg__5757__auto___22971 = cljs.core._nth.call(null, chunk__20918_22968, i__20920_22970);
        a__5756__auto__.push(arg__5757__auto___22971);
        var G__22972 = seq__20917_22967;
        var G__22973 = chunk__20918_22968;
        var G__22974 = count__20919_22969;
        var G__22975 = i__20920_22970 + 1;
        seq__20917_22967 = G__22972;
        chunk__20918_22968 = G__22973;
        count__20919_22969 = G__22974;
        i__20920_22970 = G__22975;
        continue;
      } else {
        var temp__4126__auto___22976 = cljs.core.seq.call(null, seq__20917_22967);
        if (temp__4126__auto___22976) {
          var seq__20917_22977__$1 = temp__4126__auto___22976;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20917_22977__$1)) {
            var c__5012__auto___22978 = cljs.core.chunk_first.call(null, seq__20917_22977__$1);
            var G__22979 = cljs.core.chunk_rest.call(null, seq__20917_22977__$1);
            var G__22980 = c__5012__auto___22978;
            var G__22981 = cljs.core.count.call(null, c__5012__auto___22978);
            var G__22982 = 0;
            seq__20917_22967 = G__22979;
            chunk__20918_22968 = G__22980;
            count__20919_22969 = G__22981;
            i__20920_22970 = G__22982;
            continue;
          } else {
            var arg__5757__auto___22983 = cljs.core.first.call(null, seq__20917_22977__$1);
            a__5756__auto__.push(arg__5757__auto___22983);
            var G__22984 = cljs.core.next.call(null, seq__20917_22977__$1);
            var G__22985 = null;
            var G__22986 = 0;
            var G__22987 = 0;
            seq__20917_22967 = G__22984;
            chunk__20918_22968 = G__22985;
            count__20919_22969 = G__22986;
            i__20920_22970 = G__22987;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__5756__auto__);
  };
  var param = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__22988__i = 0, G__22988__a = new Array(arguments.length - 0);
      while (G__22988__i < G__22988__a.length) {
        G__22988__a[G__22988__i] = arguments[G__22988__i + 0];
        ++G__22988__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__22988__a, 0);
    }
    return param__delegate.call(this, args__5755__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__22989) {
    var args__5755__auto__ = cljs.core.seq(arglist__22989);
    return param__delegate(args__5755__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20925_22990 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20926_22991 = null;
    var count__20927_22992 = 0;
    var i__20928_22993 = 0;
    while (true) {
      if (i__20928_22993 < count__20927_22992) {
        var arg__5757__auto___22994 = cljs.core._nth.call(null, chunk__20926_22991, i__20928_22993);
        a__5756__auto__.push(arg__5757__auto___22994);
        var G__22995 = seq__20925_22990;
        var G__22996 = chunk__20926_22991;
        var G__22997 = count__20927_22992;
        var G__22998 = i__20928_22993 + 1;
        seq__20925_22990 = G__22995;
        chunk__20926_22991 = G__22996;
        count__20927_22992 = G__22997;
        i__20928_22993 = G__22998;
        continue;
      } else {
        var temp__4126__auto___22999 = cljs.core.seq.call(null, seq__20925_22990);
        if (temp__4126__auto___22999) {
          var seq__20925_23000__$1 = temp__4126__auto___22999;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20925_23000__$1)) {
            var c__5012__auto___23001 = cljs.core.chunk_first.call(null, seq__20925_23000__$1);
            var G__23002 = cljs.core.chunk_rest.call(null, seq__20925_23000__$1);
            var G__23003 = c__5012__auto___23001;
            var G__23004 = cljs.core.count.call(null, c__5012__auto___23001);
            var G__23005 = 0;
            seq__20925_22990 = G__23002;
            chunk__20926_22991 = G__23003;
            count__20927_22992 = G__23004;
            i__20928_22993 = G__23005;
            continue;
          } else {
            var arg__5757__auto___23006 = cljs.core.first.call(null, seq__20925_23000__$1);
            a__5756__auto__.push(arg__5757__auto___23006);
            var G__23007 = cljs.core.next.call(null, seq__20925_23000__$1);
            var G__23008 = null;
            var G__23009 = 0;
            var G__23010 = 0;
            seq__20925_22990 = G__23007;
            chunk__20926_22991 = G__23008;
            count__20927_22992 = G__23009;
            i__20928_22993 = G__23010;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__5756__auto__);
  };
  var pre = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23011__i = 0, G__23011__a = new Array(arguments.length - 0);
      while (G__23011__i < G__23011__a.length) {
        G__23011__a[G__23011__i] = arguments[G__23011__i + 0];
        ++G__23011__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23011__a, 0);
    }
    return pre__delegate.call(this, args__5755__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__23012) {
    var args__5755__auto__ = cljs.core.seq(arglist__23012);
    return pre__delegate(args__5755__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20933_23013 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20934_23014 = null;
    var count__20935_23015 = 0;
    var i__20936_23016 = 0;
    while (true) {
      if (i__20936_23016 < count__20935_23015) {
        var arg__5757__auto___23017 = cljs.core._nth.call(null, chunk__20934_23014, i__20936_23016);
        a__5756__auto__.push(arg__5757__auto___23017);
        var G__23018 = seq__20933_23013;
        var G__23019 = chunk__20934_23014;
        var G__23020 = count__20935_23015;
        var G__23021 = i__20936_23016 + 1;
        seq__20933_23013 = G__23018;
        chunk__20934_23014 = G__23019;
        count__20935_23015 = G__23020;
        i__20936_23016 = G__23021;
        continue;
      } else {
        var temp__4126__auto___23022 = cljs.core.seq.call(null, seq__20933_23013);
        if (temp__4126__auto___23022) {
          var seq__20933_23023__$1 = temp__4126__auto___23022;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20933_23023__$1)) {
            var c__5012__auto___23024 = cljs.core.chunk_first.call(null, seq__20933_23023__$1);
            var G__23025 = cljs.core.chunk_rest.call(null, seq__20933_23023__$1);
            var G__23026 = c__5012__auto___23024;
            var G__23027 = cljs.core.count.call(null, c__5012__auto___23024);
            var G__23028 = 0;
            seq__20933_23013 = G__23025;
            chunk__20934_23014 = G__23026;
            count__20935_23015 = G__23027;
            i__20936_23016 = G__23028;
            continue;
          } else {
            var arg__5757__auto___23029 = cljs.core.first.call(null, seq__20933_23023__$1);
            a__5756__auto__.push(arg__5757__auto___23029);
            var G__23030 = cljs.core.next.call(null, seq__20933_23023__$1);
            var G__23031 = null;
            var G__23032 = 0;
            var G__23033 = 0;
            seq__20933_23013 = G__23030;
            chunk__20934_23014 = G__23031;
            count__20935_23015 = G__23032;
            i__20936_23016 = G__23033;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__5756__auto__);
  };
  var progress = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23034__i = 0, G__23034__a = new Array(arguments.length - 0);
      while (G__23034__i < G__23034__a.length) {
        G__23034__a[G__23034__i] = arguments[G__23034__i + 0];
        ++G__23034__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23034__a, 0);
    }
    return progress__delegate.call(this, args__5755__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__23035) {
    var args__5755__auto__ = cljs.core.seq(arglist__23035);
    return progress__delegate(args__5755__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20941_23036 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20942_23037 = null;
    var count__20943_23038 = 0;
    var i__20944_23039 = 0;
    while (true) {
      if (i__20944_23039 < count__20943_23038) {
        var arg__5757__auto___23040 = cljs.core._nth.call(null, chunk__20942_23037, i__20944_23039);
        a__5756__auto__.push(arg__5757__auto___23040);
        var G__23041 = seq__20941_23036;
        var G__23042 = chunk__20942_23037;
        var G__23043 = count__20943_23038;
        var G__23044 = i__20944_23039 + 1;
        seq__20941_23036 = G__23041;
        chunk__20942_23037 = G__23042;
        count__20943_23038 = G__23043;
        i__20944_23039 = G__23044;
        continue;
      } else {
        var temp__4126__auto___23045 = cljs.core.seq.call(null, seq__20941_23036);
        if (temp__4126__auto___23045) {
          var seq__20941_23046__$1 = temp__4126__auto___23045;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20941_23046__$1)) {
            var c__5012__auto___23047 = cljs.core.chunk_first.call(null, seq__20941_23046__$1);
            var G__23048 = cljs.core.chunk_rest.call(null, seq__20941_23046__$1);
            var G__23049 = c__5012__auto___23047;
            var G__23050 = cljs.core.count.call(null, c__5012__auto___23047);
            var G__23051 = 0;
            seq__20941_23036 = G__23048;
            chunk__20942_23037 = G__23049;
            count__20943_23038 = G__23050;
            i__20944_23039 = G__23051;
            continue;
          } else {
            var arg__5757__auto___23052 = cljs.core.first.call(null, seq__20941_23046__$1);
            a__5756__auto__.push(arg__5757__auto___23052);
            var G__23053 = cljs.core.next.call(null, seq__20941_23046__$1);
            var G__23054 = null;
            var G__23055 = 0;
            var G__23056 = 0;
            seq__20941_23036 = G__23053;
            chunk__20942_23037 = G__23054;
            count__20943_23038 = G__23055;
            i__20944_23039 = G__23056;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__5756__auto__);
  };
  var q = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23057__i = 0, G__23057__a = new Array(arguments.length - 0);
      while (G__23057__i < G__23057__a.length) {
        G__23057__a[G__23057__i] = arguments[G__23057__i + 0];
        ++G__23057__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23057__a, 0);
    }
    return q__delegate.call(this, args__5755__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__23058) {
    var args__5755__auto__ = cljs.core.seq(arglist__23058);
    return q__delegate(args__5755__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20949_23059 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20950_23060 = null;
    var count__20951_23061 = 0;
    var i__20952_23062 = 0;
    while (true) {
      if (i__20952_23062 < count__20951_23061) {
        var arg__5757__auto___23063 = cljs.core._nth.call(null, chunk__20950_23060, i__20952_23062);
        a__5756__auto__.push(arg__5757__auto___23063);
        var G__23064 = seq__20949_23059;
        var G__23065 = chunk__20950_23060;
        var G__23066 = count__20951_23061;
        var G__23067 = i__20952_23062 + 1;
        seq__20949_23059 = G__23064;
        chunk__20950_23060 = G__23065;
        count__20951_23061 = G__23066;
        i__20952_23062 = G__23067;
        continue;
      } else {
        var temp__4126__auto___23068 = cljs.core.seq.call(null, seq__20949_23059);
        if (temp__4126__auto___23068) {
          var seq__20949_23069__$1 = temp__4126__auto___23068;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20949_23069__$1)) {
            var c__5012__auto___23070 = cljs.core.chunk_first.call(null, seq__20949_23069__$1);
            var G__23071 = cljs.core.chunk_rest.call(null, seq__20949_23069__$1);
            var G__23072 = c__5012__auto___23070;
            var G__23073 = cljs.core.count.call(null, c__5012__auto___23070);
            var G__23074 = 0;
            seq__20949_23059 = G__23071;
            chunk__20950_23060 = G__23072;
            count__20951_23061 = G__23073;
            i__20952_23062 = G__23074;
            continue;
          } else {
            var arg__5757__auto___23075 = cljs.core.first.call(null, seq__20949_23069__$1);
            a__5756__auto__.push(arg__5757__auto___23075);
            var G__23076 = cljs.core.next.call(null, seq__20949_23069__$1);
            var G__23077 = null;
            var G__23078 = 0;
            var G__23079 = 0;
            seq__20949_23059 = G__23076;
            chunk__20950_23060 = G__23077;
            count__20951_23061 = G__23078;
            i__20952_23062 = G__23079;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__5756__auto__);
  };
  var rp = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23080__i = 0, G__23080__a = new Array(arguments.length - 0);
      while (G__23080__i < G__23080__a.length) {
        G__23080__a[G__23080__i] = arguments[G__23080__i + 0];
        ++G__23080__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23080__a, 0);
    }
    return rp__delegate.call(this, args__5755__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__23081) {
    var args__5755__auto__ = cljs.core.seq(arglist__23081);
    return rp__delegate(args__5755__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20957_23082 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20958_23083 = null;
    var count__20959_23084 = 0;
    var i__20960_23085 = 0;
    while (true) {
      if (i__20960_23085 < count__20959_23084) {
        var arg__5757__auto___23086 = cljs.core._nth.call(null, chunk__20958_23083, i__20960_23085);
        a__5756__auto__.push(arg__5757__auto___23086);
        var G__23087 = seq__20957_23082;
        var G__23088 = chunk__20958_23083;
        var G__23089 = count__20959_23084;
        var G__23090 = i__20960_23085 + 1;
        seq__20957_23082 = G__23087;
        chunk__20958_23083 = G__23088;
        count__20959_23084 = G__23089;
        i__20960_23085 = G__23090;
        continue;
      } else {
        var temp__4126__auto___23091 = cljs.core.seq.call(null, seq__20957_23082);
        if (temp__4126__auto___23091) {
          var seq__20957_23092__$1 = temp__4126__auto___23091;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20957_23092__$1)) {
            var c__5012__auto___23093 = cljs.core.chunk_first.call(null, seq__20957_23092__$1);
            var G__23094 = cljs.core.chunk_rest.call(null, seq__20957_23092__$1);
            var G__23095 = c__5012__auto___23093;
            var G__23096 = cljs.core.count.call(null, c__5012__auto___23093);
            var G__23097 = 0;
            seq__20957_23082 = G__23094;
            chunk__20958_23083 = G__23095;
            count__20959_23084 = G__23096;
            i__20960_23085 = G__23097;
            continue;
          } else {
            var arg__5757__auto___23098 = cljs.core.first.call(null, seq__20957_23092__$1);
            a__5756__auto__.push(arg__5757__auto___23098);
            var G__23099 = cljs.core.next.call(null, seq__20957_23092__$1);
            var G__23100 = null;
            var G__23101 = 0;
            var G__23102 = 0;
            seq__20957_23082 = G__23099;
            chunk__20958_23083 = G__23100;
            count__20959_23084 = G__23101;
            i__20960_23085 = G__23102;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__5756__auto__);
  };
  var rt = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23103__i = 0, G__23103__a = new Array(arguments.length - 0);
      while (G__23103__i < G__23103__a.length) {
        G__23103__a[G__23103__i] = arguments[G__23103__i + 0];
        ++G__23103__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23103__a, 0);
    }
    return rt__delegate.call(this, args__5755__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__23104) {
    var args__5755__auto__ = cljs.core.seq(arglist__23104);
    return rt__delegate(args__5755__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20965_23105 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20966_23106 = null;
    var count__20967_23107 = 0;
    var i__20968_23108 = 0;
    while (true) {
      if (i__20968_23108 < count__20967_23107) {
        var arg__5757__auto___23109 = cljs.core._nth.call(null, chunk__20966_23106, i__20968_23108);
        a__5756__auto__.push(arg__5757__auto___23109);
        var G__23110 = seq__20965_23105;
        var G__23111 = chunk__20966_23106;
        var G__23112 = count__20967_23107;
        var G__23113 = i__20968_23108 + 1;
        seq__20965_23105 = G__23110;
        chunk__20966_23106 = G__23111;
        count__20967_23107 = G__23112;
        i__20968_23108 = G__23113;
        continue;
      } else {
        var temp__4126__auto___23114 = cljs.core.seq.call(null, seq__20965_23105);
        if (temp__4126__auto___23114) {
          var seq__20965_23115__$1 = temp__4126__auto___23114;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20965_23115__$1)) {
            var c__5012__auto___23116 = cljs.core.chunk_first.call(null, seq__20965_23115__$1);
            var G__23117 = cljs.core.chunk_rest.call(null, seq__20965_23115__$1);
            var G__23118 = c__5012__auto___23116;
            var G__23119 = cljs.core.count.call(null, c__5012__auto___23116);
            var G__23120 = 0;
            seq__20965_23105 = G__23117;
            chunk__20966_23106 = G__23118;
            count__20967_23107 = G__23119;
            i__20968_23108 = G__23120;
            continue;
          } else {
            var arg__5757__auto___23121 = cljs.core.first.call(null, seq__20965_23115__$1);
            a__5756__auto__.push(arg__5757__auto___23121);
            var G__23122 = cljs.core.next.call(null, seq__20965_23115__$1);
            var G__23123 = null;
            var G__23124 = 0;
            var G__23125 = 0;
            seq__20965_23105 = G__23122;
            chunk__20966_23106 = G__23123;
            count__20967_23107 = G__23124;
            i__20968_23108 = G__23125;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__5756__auto__);
  };
  var ruby = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23126__i = 0, G__23126__a = new Array(arguments.length - 0);
      while (G__23126__i < G__23126__a.length) {
        G__23126__a[G__23126__i] = arguments[G__23126__i + 0];
        ++G__23126__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23126__a, 0);
    }
    return ruby__delegate.call(this, args__5755__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__23127) {
    var args__5755__auto__ = cljs.core.seq(arglist__23127);
    return ruby__delegate(args__5755__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20973_23128 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20974_23129 = null;
    var count__20975_23130 = 0;
    var i__20976_23131 = 0;
    while (true) {
      if (i__20976_23131 < count__20975_23130) {
        var arg__5757__auto___23132 = cljs.core._nth.call(null, chunk__20974_23129, i__20976_23131);
        a__5756__auto__.push(arg__5757__auto___23132);
        var G__23133 = seq__20973_23128;
        var G__23134 = chunk__20974_23129;
        var G__23135 = count__20975_23130;
        var G__23136 = i__20976_23131 + 1;
        seq__20973_23128 = G__23133;
        chunk__20974_23129 = G__23134;
        count__20975_23130 = G__23135;
        i__20976_23131 = G__23136;
        continue;
      } else {
        var temp__4126__auto___23137 = cljs.core.seq.call(null, seq__20973_23128);
        if (temp__4126__auto___23137) {
          var seq__20973_23138__$1 = temp__4126__auto___23137;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20973_23138__$1)) {
            var c__5012__auto___23139 = cljs.core.chunk_first.call(null, seq__20973_23138__$1);
            var G__23140 = cljs.core.chunk_rest.call(null, seq__20973_23138__$1);
            var G__23141 = c__5012__auto___23139;
            var G__23142 = cljs.core.count.call(null, c__5012__auto___23139);
            var G__23143 = 0;
            seq__20973_23128 = G__23140;
            chunk__20974_23129 = G__23141;
            count__20975_23130 = G__23142;
            i__20976_23131 = G__23143;
            continue;
          } else {
            var arg__5757__auto___23144 = cljs.core.first.call(null, seq__20973_23138__$1);
            a__5756__auto__.push(arg__5757__auto___23144);
            var G__23145 = cljs.core.next.call(null, seq__20973_23138__$1);
            var G__23146 = null;
            var G__23147 = 0;
            var G__23148 = 0;
            seq__20973_23128 = G__23145;
            chunk__20974_23129 = G__23146;
            count__20975_23130 = G__23147;
            i__20976_23131 = G__23148;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__5756__auto__);
  };
  var s = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23149__i = 0, G__23149__a = new Array(arguments.length - 0);
      while (G__23149__i < G__23149__a.length) {
        G__23149__a[G__23149__i] = arguments[G__23149__i + 0];
        ++G__23149__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23149__a, 0);
    }
    return s__delegate.call(this, args__5755__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__23150) {
    var args__5755__auto__ = cljs.core.seq(arglist__23150);
    return s__delegate(args__5755__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20981_23151 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20982_23152 = null;
    var count__20983_23153 = 0;
    var i__20984_23154 = 0;
    while (true) {
      if (i__20984_23154 < count__20983_23153) {
        var arg__5757__auto___23155 = cljs.core._nth.call(null, chunk__20982_23152, i__20984_23154);
        a__5756__auto__.push(arg__5757__auto___23155);
        var G__23156 = seq__20981_23151;
        var G__23157 = chunk__20982_23152;
        var G__23158 = count__20983_23153;
        var G__23159 = i__20984_23154 + 1;
        seq__20981_23151 = G__23156;
        chunk__20982_23152 = G__23157;
        count__20983_23153 = G__23158;
        i__20984_23154 = G__23159;
        continue;
      } else {
        var temp__4126__auto___23160 = cljs.core.seq.call(null, seq__20981_23151);
        if (temp__4126__auto___23160) {
          var seq__20981_23161__$1 = temp__4126__auto___23160;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20981_23161__$1)) {
            var c__5012__auto___23162 = cljs.core.chunk_first.call(null, seq__20981_23161__$1);
            var G__23163 = cljs.core.chunk_rest.call(null, seq__20981_23161__$1);
            var G__23164 = c__5012__auto___23162;
            var G__23165 = cljs.core.count.call(null, c__5012__auto___23162);
            var G__23166 = 0;
            seq__20981_23151 = G__23163;
            chunk__20982_23152 = G__23164;
            count__20983_23153 = G__23165;
            i__20984_23154 = G__23166;
            continue;
          } else {
            var arg__5757__auto___23167 = cljs.core.first.call(null, seq__20981_23161__$1);
            a__5756__auto__.push(arg__5757__auto___23167);
            var G__23168 = cljs.core.next.call(null, seq__20981_23161__$1);
            var G__23169 = null;
            var G__23170 = 0;
            var G__23171 = 0;
            seq__20981_23151 = G__23168;
            chunk__20982_23152 = G__23169;
            count__20983_23153 = G__23170;
            i__20984_23154 = G__23171;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__5756__auto__);
  };
  var samp = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23172__i = 0, G__23172__a = new Array(arguments.length - 0);
      while (G__23172__i < G__23172__a.length) {
        G__23172__a[G__23172__i] = arguments[G__23172__i + 0];
        ++G__23172__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23172__a, 0);
    }
    return samp__delegate.call(this, args__5755__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__23173) {
    var args__5755__auto__ = cljs.core.seq(arglist__23173);
    return samp__delegate(args__5755__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20989_23174 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20990_23175 = null;
    var count__20991_23176 = 0;
    var i__20992_23177 = 0;
    while (true) {
      if (i__20992_23177 < count__20991_23176) {
        var arg__5757__auto___23178 = cljs.core._nth.call(null, chunk__20990_23175, i__20992_23177);
        a__5756__auto__.push(arg__5757__auto___23178);
        var G__23179 = seq__20989_23174;
        var G__23180 = chunk__20990_23175;
        var G__23181 = count__20991_23176;
        var G__23182 = i__20992_23177 + 1;
        seq__20989_23174 = G__23179;
        chunk__20990_23175 = G__23180;
        count__20991_23176 = G__23181;
        i__20992_23177 = G__23182;
        continue;
      } else {
        var temp__4126__auto___23183 = cljs.core.seq.call(null, seq__20989_23174);
        if (temp__4126__auto___23183) {
          var seq__20989_23184__$1 = temp__4126__auto___23183;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20989_23184__$1)) {
            var c__5012__auto___23185 = cljs.core.chunk_first.call(null, seq__20989_23184__$1);
            var G__23186 = cljs.core.chunk_rest.call(null, seq__20989_23184__$1);
            var G__23187 = c__5012__auto___23185;
            var G__23188 = cljs.core.count.call(null, c__5012__auto___23185);
            var G__23189 = 0;
            seq__20989_23174 = G__23186;
            chunk__20990_23175 = G__23187;
            count__20991_23176 = G__23188;
            i__20992_23177 = G__23189;
            continue;
          } else {
            var arg__5757__auto___23190 = cljs.core.first.call(null, seq__20989_23184__$1);
            a__5756__auto__.push(arg__5757__auto___23190);
            var G__23191 = cljs.core.next.call(null, seq__20989_23184__$1);
            var G__23192 = null;
            var G__23193 = 0;
            var G__23194 = 0;
            seq__20989_23174 = G__23191;
            chunk__20990_23175 = G__23192;
            count__20991_23176 = G__23193;
            i__20992_23177 = G__23194;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__5756__auto__);
  };
  var script = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23195__i = 0, G__23195__a = new Array(arguments.length - 0);
      while (G__23195__i < G__23195__a.length) {
        G__23195__a[G__23195__i] = arguments[G__23195__i + 0];
        ++G__23195__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23195__a, 0);
    }
    return script__delegate.call(this, args__5755__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__23196) {
    var args__5755__auto__ = cljs.core.seq(arglist__23196);
    return script__delegate(args__5755__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20997_23197 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20998_23198 = null;
    var count__20999_23199 = 0;
    var i__21000_23200 = 0;
    while (true) {
      if (i__21000_23200 < count__20999_23199) {
        var arg__5757__auto___23201 = cljs.core._nth.call(null, chunk__20998_23198, i__21000_23200);
        a__5756__auto__.push(arg__5757__auto___23201);
        var G__23202 = seq__20997_23197;
        var G__23203 = chunk__20998_23198;
        var G__23204 = count__20999_23199;
        var G__23205 = i__21000_23200 + 1;
        seq__20997_23197 = G__23202;
        chunk__20998_23198 = G__23203;
        count__20999_23199 = G__23204;
        i__21000_23200 = G__23205;
        continue;
      } else {
        var temp__4126__auto___23206 = cljs.core.seq.call(null, seq__20997_23197);
        if (temp__4126__auto___23206) {
          var seq__20997_23207__$1 = temp__4126__auto___23206;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20997_23207__$1)) {
            var c__5012__auto___23208 = cljs.core.chunk_first.call(null, seq__20997_23207__$1);
            var G__23209 = cljs.core.chunk_rest.call(null, seq__20997_23207__$1);
            var G__23210 = c__5012__auto___23208;
            var G__23211 = cljs.core.count.call(null, c__5012__auto___23208);
            var G__23212 = 0;
            seq__20997_23197 = G__23209;
            chunk__20998_23198 = G__23210;
            count__20999_23199 = G__23211;
            i__21000_23200 = G__23212;
            continue;
          } else {
            var arg__5757__auto___23213 = cljs.core.first.call(null, seq__20997_23207__$1);
            a__5756__auto__.push(arg__5757__auto___23213);
            var G__23214 = cljs.core.next.call(null, seq__20997_23207__$1);
            var G__23215 = null;
            var G__23216 = 0;
            var G__23217 = 0;
            seq__20997_23197 = G__23214;
            chunk__20998_23198 = G__23215;
            count__20999_23199 = G__23216;
            i__21000_23200 = G__23217;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__5756__auto__);
  };
  var section = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23218__i = 0, G__23218__a = new Array(arguments.length - 0);
      while (G__23218__i < G__23218__a.length) {
        G__23218__a[G__23218__i] = arguments[G__23218__i + 0];
        ++G__23218__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23218__a, 0);
    }
    return section__delegate.call(this, args__5755__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__23219) {
    var args__5755__auto__ = cljs.core.seq(arglist__23219);
    return section__delegate(args__5755__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21005_23220 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21006_23221 = null;
    var count__21007_23222 = 0;
    var i__21008_23223 = 0;
    while (true) {
      if (i__21008_23223 < count__21007_23222) {
        var arg__5757__auto___23224 = cljs.core._nth.call(null, chunk__21006_23221, i__21008_23223);
        a__5756__auto__.push(arg__5757__auto___23224);
        var G__23225 = seq__21005_23220;
        var G__23226 = chunk__21006_23221;
        var G__23227 = count__21007_23222;
        var G__23228 = i__21008_23223 + 1;
        seq__21005_23220 = G__23225;
        chunk__21006_23221 = G__23226;
        count__21007_23222 = G__23227;
        i__21008_23223 = G__23228;
        continue;
      } else {
        var temp__4126__auto___23229 = cljs.core.seq.call(null, seq__21005_23220);
        if (temp__4126__auto___23229) {
          var seq__21005_23230__$1 = temp__4126__auto___23229;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21005_23230__$1)) {
            var c__5012__auto___23231 = cljs.core.chunk_first.call(null, seq__21005_23230__$1);
            var G__23232 = cljs.core.chunk_rest.call(null, seq__21005_23230__$1);
            var G__23233 = c__5012__auto___23231;
            var G__23234 = cljs.core.count.call(null, c__5012__auto___23231);
            var G__23235 = 0;
            seq__21005_23220 = G__23232;
            chunk__21006_23221 = G__23233;
            count__21007_23222 = G__23234;
            i__21008_23223 = G__23235;
            continue;
          } else {
            var arg__5757__auto___23236 = cljs.core.first.call(null, seq__21005_23230__$1);
            a__5756__auto__.push(arg__5757__auto___23236);
            var G__23237 = cljs.core.next.call(null, seq__21005_23230__$1);
            var G__23238 = null;
            var G__23239 = 0;
            var G__23240 = 0;
            seq__21005_23220 = G__23237;
            chunk__21006_23221 = G__23238;
            count__21007_23222 = G__23239;
            i__21008_23223 = G__23240;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__5756__auto__);
  };
  var select = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23241__i = 0, G__23241__a = new Array(arguments.length - 0);
      while (G__23241__i < G__23241__a.length) {
        G__23241__a[G__23241__i] = arguments[G__23241__i + 0];
        ++G__23241__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23241__a, 0);
    }
    return select__delegate.call(this, args__5755__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__23242) {
    var args__5755__auto__ = cljs.core.seq(arglist__23242);
    return select__delegate(args__5755__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21013_23243 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21014_23244 = null;
    var count__21015_23245 = 0;
    var i__21016_23246 = 0;
    while (true) {
      if (i__21016_23246 < count__21015_23245) {
        var arg__5757__auto___23247 = cljs.core._nth.call(null, chunk__21014_23244, i__21016_23246);
        a__5756__auto__.push(arg__5757__auto___23247);
        var G__23248 = seq__21013_23243;
        var G__23249 = chunk__21014_23244;
        var G__23250 = count__21015_23245;
        var G__23251 = i__21016_23246 + 1;
        seq__21013_23243 = G__23248;
        chunk__21014_23244 = G__23249;
        count__21015_23245 = G__23250;
        i__21016_23246 = G__23251;
        continue;
      } else {
        var temp__4126__auto___23252 = cljs.core.seq.call(null, seq__21013_23243);
        if (temp__4126__auto___23252) {
          var seq__21013_23253__$1 = temp__4126__auto___23252;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21013_23253__$1)) {
            var c__5012__auto___23254 = cljs.core.chunk_first.call(null, seq__21013_23253__$1);
            var G__23255 = cljs.core.chunk_rest.call(null, seq__21013_23253__$1);
            var G__23256 = c__5012__auto___23254;
            var G__23257 = cljs.core.count.call(null, c__5012__auto___23254);
            var G__23258 = 0;
            seq__21013_23243 = G__23255;
            chunk__21014_23244 = G__23256;
            count__21015_23245 = G__23257;
            i__21016_23246 = G__23258;
            continue;
          } else {
            var arg__5757__auto___23259 = cljs.core.first.call(null, seq__21013_23253__$1);
            a__5756__auto__.push(arg__5757__auto___23259);
            var G__23260 = cljs.core.next.call(null, seq__21013_23253__$1);
            var G__23261 = null;
            var G__23262 = 0;
            var G__23263 = 0;
            seq__21013_23243 = G__23260;
            chunk__21014_23244 = G__23261;
            count__21015_23245 = G__23262;
            i__21016_23246 = G__23263;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__5756__auto__);
  };
  var small = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23264__i = 0, G__23264__a = new Array(arguments.length - 0);
      while (G__23264__i < G__23264__a.length) {
        G__23264__a[G__23264__i] = arguments[G__23264__i + 0];
        ++G__23264__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23264__a, 0);
    }
    return small__delegate.call(this, args__5755__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__23265) {
    var args__5755__auto__ = cljs.core.seq(arglist__23265);
    return small__delegate(args__5755__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21021_23266 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21022_23267 = null;
    var count__21023_23268 = 0;
    var i__21024_23269 = 0;
    while (true) {
      if (i__21024_23269 < count__21023_23268) {
        var arg__5757__auto___23270 = cljs.core._nth.call(null, chunk__21022_23267, i__21024_23269);
        a__5756__auto__.push(arg__5757__auto___23270);
        var G__23271 = seq__21021_23266;
        var G__23272 = chunk__21022_23267;
        var G__23273 = count__21023_23268;
        var G__23274 = i__21024_23269 + 1;
        seq__21021_23266 = G__23271;
        chunk__21022_23267 = G__23272;
        count__21023_23268 = G__23273;
        i__21024_23269 = G__23274;
        continue;
      } else {
        var temp__4126__auto___23275 = cljs.core.seq.call(null, seq__21021_23266);
        if (temp__4126__auto___23275) {
          var seq__21021_23276__$1 = temp__4126__auto___23275;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21021_23276__$1)) {
            var c__5012__auto___23277 = cljs.core.chunk_first.call(null, seq__21021_23276__$1);
            var G__23278 = cljs.core.chunk_rest.call(null, seq__21021_23276__$1);
            var G__23279 = c__5012__auto___23277;
            var G__23280 = cljs.core.count.call(null, c__5012__auto___23277);
            var G__23281 = 0;
            seq__21021_23266 = G__23278;
            chunk__21022_23267 = G__23279;
            count__21023_23268 = G__23280;
            i__21024_23269 = G__23281;
            continue;
          } else {
            var arg__5757__auto___23282 = cljs.core.first.call(null, seq__21021_23276__$1);
            a__5756__auto__.push(arg__5757__auto___23282);
            var G__23283 = cljs.core.next.call(null, seq__21021_23276__$1);
            var G__23284 = null;
            var G__23285 = 0;
            var G__23286 = 0;
            seq__21021_23266 = G__23283;
            chunk__21022_23267 = G__23284;
            count__21023_23268 = G__23285;
            i__21024_23269 = G__23286;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__5756__auto__);
  };
  var source = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23287__i = 0, G__23287__a = new Array(arguments.length - 0);
      while (G__23287__i < G__23287__a.length) {
        G__23287__a[G__23287__i] = arguments[G__23287__i + 0];
        ++G__23287__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23287__a, 0);
    }
    return source__delegate.call(this, args__5755__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__23288) {
    var args__5755__auto__ = cljs.core.seq(arglist__23288);
    return source__delegate(args__5755__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21029_23289 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21030_23290 = null;
    var count__21031_23291 = 0;
    var i__21032_23292 = 0;
    while (true) {
      if (i__21032_23292 < count__21031_23291) {
        var arg__5757__auto___23293 = cljs.core._nth.call(null, chunk__21030_23290, i__21032_23292);
        a__5756__auto__.push(arg__5757__auto___23293);
        var G__23294 = seq__21029_23289;
        var G__23295 = chunk__21030_23290;
        var G__23296 = count__21031_23291;
        var G__23297 = i__21032_23292 + 1;
        seq__21029_23289 = G__23294;
        chunk__21030_23290 = G__23295;
        count__21031_23291 = G__23296;
        i__21032_23292 = G__23297;
        continue;
      } else {
        var temp__4126__auto___23298 = cljs.core.seq.call(null, seq__21029_23289);
        if (temp__4126__auto___23298) {
          var seq__21029_23299__$1 = temp__4126__auto___23298;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21029_23299__$1)) {
            var c__5012__auto___23300 = cljs.core.chunk_first.call(null, seq__21029_23299__$1);
            var G__23301 = cljs.core.chunk_rest.call(null, seq__21029_23299__$1);
            var G__23302 = c__5012__auto___23300;
            var G__23303 = cljs.core.count.call(null, c__5012__auto___23300);
            var G__23304 = 0;
            seq__21029_23289 = G__23301;
            chunk__21030_23290 = G__23302;
            count__21031_23291 = G__23303;
            i__21032_23292 = G__23304;
            continue;
          } else {
            var arg__5757__auto___23305 = cljs.core.first.call(null, seq__21029_23299__$1);
            a__5756__auto__.push(arg__5757__auto___23305);
            var G__23306 = cljs.core.next.call(null, seq__21029_23299__$1);
            var G__23307 = null;
            var G__23308 = 0;
            var G__23309 = 0;
            seq__21029_23289 = G__23306;
            chunk__21030_23290 = G__23307;
            count__21031_23291 = G__23308;
            i__21032_23292 = G__23309;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__5756__auto__);
  };
  var span = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23310__i = 0, G__23310__a = new Array(arguments.length - 0);
      while (G__23310__i < G__23310__a.length) {
        G__23310__a[G__23310__i] = arguments[G__23310__i + 0];
        ++G__23310__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23310__a, 0);
    }
    return span__delegate.call(this, args__5755__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__23311) {
    var args__5755__auto__ = cljs.core.seq(arglist__23311);
    return span__delegate(args__5755__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21037_23312 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21038_23313 = null;
    var count__21039_23314 = 0;
    var i__21040_23315 = 0;
    while (true) {
      if (i__21040_23315 < count__21039_23314) {
        var arg__5757__auto___23316 = cljs.core._nth.call(null, chunk__21038_23313, i__21040_23315);
        a__5756__auto__.push(arg__5757__auto___23316);
        var G__23317 = seq__21037_23312;
        var G__23318 = chunk__21038_23313;
        var G__23319 = count__21039_23314;
        var G__23320 = i__21040_23315 + 1;
        seq__21037_23312 = G__23317;
        chunk__21038_23313 = G__23318;
        count__21039_23314 = G__23319;
        i__21040_23315 = G__23320;
        continue;
      } else {
        var temp__4126__auto___23321 = cljs.core.seq.call(null, seq__21037_23312);
        if (temp__4126__auto___23321) {
          var seq__21037_23322__$1 = temp__4126__auto___23321;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21037_23322__$1)) {
            var c__5012__auto___23323 = cljs.core.chunk_first.call(null, seq__21037_23322__$1);
            var G__23324 = cljs.core.chunk_rest.call(null, seq__21037_23322__$1);
            var G__23325 = c__5012__auto___23323;
            var G__23326 = cljs.core.count.call(null, c__5012__auto___23323);
            var G__23327 = 0;
            seq__21037_23312 = G__23324;
            chunk__21038_23313 = G__23325;
            count__21039_23314 = G__23326;
            i__21040_23315 = G__23327;
            continue;
          } else {
            var arg__5757__auto___23328 = cljs.core.first.call(null, seq__21037_23322__$1);
            a__5756__auto__.push(arg__5757__auto___23328);
            var G__23329 = cljs.core.next.call(null, seq__21037_23322__$1);
            var G__23330 = null;
            var G__23331 = 0;
            var G__23332 = 0;
            seq__21037_23312 = G__23329;
            chunk__21038_23313 = G__23330;
            count__21039_23314 = G__23331;
            i__21040_23315 = G__23332;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__5756__auto__);
  };
  var strong = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23333__i = 0, G__23333__a = new Array(arguments.length - 0);
      while (G__23333__i < G__23333__a.length) {
        G__23333__a[G__23333__i] = arguments[G__23333__i + 0];
        ++G__23333__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23333__a, 0);
    }
    return strong__delegate.call(this, args__5755__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__23334) {
    var args__5755__auto__ = cljs.core.seq(arglist__23334);
    return strong__delegate(args__5755__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21045_23335 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21046_23336 = null;
    var count__21047_23337 = 0;
    var i__21048_23338 = 0;
    while (true) {
      if (i__21048_23338 < count__21047_23337) {
        var arg__5757__auto___23339 = cljs.core._nth.call(null, chunk__21046_23336, i__21048_23338);
        a__5756__auto__.push(arg__5757__auto___23339);
        var G__23340 = seq__21045_23335;
        var G__23341 = chunk__21046_23336;
        var G__23342 = count__21047_23337;
        var G__23343 = i__21048_23338 + 1;
        seq__21045_23335 = G__23340;
        chunk__21046_23336 = G__23341;
        count__21047_23337 = G__23342;
        i__21048_23338 = G__23343;
        continue;
      } else {
        var temp__4126__auto___23344 = cljs.core.seq.call(null, seq__21045_23335);
        if (temp__4126__auto___23344) {
          var seq__21045_23345__$1 = temp__4126__auto___23344;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21045_23345__$1)) {
            var c__5012__auto___23346 = cljs.core.chunk_first.call(null, seq__21045_23345__$1);
            var G__23347 = cljs.core.chunk_rest.call(null, seq__21045_23345__$1);
            var G__23348 = c__5012__auto___23346;
            var G__23349 = cljs.core.count.call(null, c__5012__auto___23346);
            var G__23350 = 0;
            seq__21045_23335 = G__23347;
            chunk__21046_23336 = G__23348;
            count__21047_23337 = G__23349;
            i__21048_23338 = G__23350;
            continue;
          } else {
            var arg__5757__auto___23351 = cljs.core.first.call(null, seq__21045_23345__$1);
            a__5756__auto__.push(arg__5757__auto___23351);
            var G__23352 = cljs.core.next.call(null, seq__21045_23345__$1);
            var G__23353 = null;
            var G__23354 = 0;
            var G__23355 = 0;
            seq__21045_23335 = G__23352;
            chunk__21046_23336 = G__23353;
            count__21047_23337 = G__23354;
            i__21048_23338 = G__23355;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__5756__auto__);
  };
  var style = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23356__i = 0, G__23356__a = new Array(arguments.length - 0);
      while (G__23356__i < G__23356__a.length) {
        G__23356__a[G__23356__i] = arguments[G__23356__i + 0];
        ++G__23356__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23356__a, 0);
    }
    return style__delegate.call(this, args__5755__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__23357) {
    var args__5755__auto__ = cljs.core.seq(arglist__23357);
    return style__delegate(args__5755__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21053_23358 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21054_23359 = null;
    var count__21055_23360 = 0;
    var i__21056_23361 = 0;
    while (true) {
      if (i__21056_23361 < count__21055_23360) {
        var arg__5757__auto___23362 = cljs.core._nth.call(null, chunk__21054_23359, i__21056_23361);
        a__5756__auto__.push(arg__5757__auto___23362);
        var G__23363 = seq__21053_23358;
        var G__23364 = chunk__21054_23359;
        var G__23365 = count__21055_23360;
        var G__23366 = i__21056_23361 + 1;
        seq__21053_23358 = G__23363;
        chunk__21054_23359 = G__23364;
        count__21055_23360 = G__23365;
        i__21056_23361 = G__23366;
        continue;
      } else {
        var temp__4126__auto___23367 = cljs.core.seq.call(null, seq__21053_23358);
        if (temp__4126__auto___23367) {
          var seq__21053_23368__$1 = temp__4126__auto___23367;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21053_23368__$1)) {
            var c__5012__auto___23369 = cljs.core.chunk_first.call(null, seq__21053_23368__$1);
            var G__23370 = cljs.core.chunk_rest.call(null, seq__21053_23368__$1);
            var G__23371 = c__5012__auto___23369;
            var G__23372 = cljs.core.count.call(null, c__5012__auto___23369);
            var G__23373 = 0;
            seq__21053_23358 = G__23370;
            chunk__21054_23359 = G__23371;
            count__21055_23360 = G__23372;
            i__21056_23361 = G__23373;
            continue;
          } else {
            var arg__5757__auto___23374 = cljs.core.first.call(null, seq__21053_23368__$1);
            a__5756__auto__.push(arg__5757__auto___23374);
            var G__23375 = cljs.core.next.call(null, seq__21053_23368__$1);
            var G__23376 = null;
            var G__23377 = 0;
            var G__23378 = 0;
            seq__21053_23358 = G__23375;
            chunk__21054_23359 = G__23376;
            count__21055_23360 = G__23377;
            i__21056_23361 = G__23378;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__5756__auto__);
  };
  var sub = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23379__i = 0, G__23379__a = new Array(arguments.length - 0);
      while (G__23379__i < G__23379__a.length) {
        G__23379__a[G__23379__i] = arguments[G__23379__i + 0];
        ++G__23379__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23379__a, 0);
    }
    return sub__delegate.call(this, args__5755__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__23380) {
    var args__5755__auto__ = cljs.core.seq(arglist__23380);
    return sub__delegate(args__5755__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21061_23381 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21062_23382 = null;
    var count__21063_23383 = 0;
    var i__21064_23384 = 0;
    while (true) {
      if (i__21064_23384 < count__21063_23383) {
        var arg__5757__auto___23385 = cljs.core._nth.call(null, chunk__21062_23382, i__21064_23384);
        a__5756__auto__.push(arg__5757__auto___23385);
        var G__23386 = seq__21061_23381;
        var G__23387 = chunk__21062_23382;
        var G__23388 = count__21063_23383;
        var G__23389 = i__21064_23384 + 1;
        seq__21061_23381 = G__23386;
        chunk__21062_23382 = G__23387;
        count__21063_23383 = G__23388;
        i__21064_23384 = G__23389;
        continue;
      } else {
        var temp__4126__auto___23390 = cljs.core.seq.call(null, seq__21061_23381);
        if (temp__4126__auto___23390) {
          var seq__21061_23391__$1 = temp__4126__auto___23390;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21061_23391__$1)) {
            var c__5012__auto___23392 = cljs.core.chunk_first.call(null, seq__21061_23391__$1);
            var G__23393 = cljs.core.chunk_rest.call(null, seq__21061_23391__$1);
            var G__23394 = c__5012__auto___23392;
            var G__23395 = cljs.core.count.call(null, c__5012__auto___23392);
            var G__23396 = 0;
            seq__21061_23381 = G__23393;
            chunk__21062_23382 = G__23394;
            count__21063_23383 = G__23395;
            i__21064_23384 = G__23396;
            continue;
          } else {
            var arg__5757__auto___23397 = cljs.core.first.call(null, seq__21061_23391__$1);
            a__5756__auto__.push(arg__5757__auto___23397);
            var G__23398 = cljs.core.next.call(null, seq__21061_23391__$1);
            var G__23399 = null;
            var G__23400 = 0;
            var G__23401 = 0;
            seq__21061_23381 = G__23398;
            chunk__21062_23382 = G__23399;
            count__21063_23383 = G__23400;
            i__21064_23384 = G__23401;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__5756__auto__);
  };
  var summary = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23402__i = 0, G__23402__a = new Array(arguments.length - 0);
      while (G__23402__i < G__23402__a.length) {
        G__23402__a[G__23402__i] = arguments[G__23402__i + 0];
        ++G__23402__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23402__a, 0);
    }
    return summary__delegate.call(this, args__5755__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__23403) {
    var args__5755__auto__ = cljs.core.seq(arglist__23403);
    return summary__delegate(args__5755__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21069_23404 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21070_23405 = null;
    var count__21071_23406 = 0;
    var i__21072_23407 = 0;
    while (true) {
      if (i__21072_23407 < count__21071_23406) {
        var arg__5757__auto___23408 = cljs.core._nth.call(null, chunk__21070_23405, i__21072_23407);
        a__5756__auto__.push(arg__5757__auto___23408);
        var G__23409 = seq__21069_23404;
        var G__23410 = chunk__21070_23405;
        var G__23411 = count__21071_23406;
        var G__23412 = i__21072_23407 + 1;
        seq__21069_23404 = G__23409;
        chunk__21070_23405 = G__23410;
        count__21071_23406 = G__23411;
        i__21072_23407 = G__23412;
        continue;
      } else {
        var temp__4126__auto___23413 = cljs.core.seq.call(null, seq__21069_23404);
        if (temp__4126__auto___23413) {
          var seq__21069_23414__$1 = temp__4126__auto___23413;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21069_23414__$1)) {
            var c__5012__auto___23415 = cljs.core.chunk_first.call(null, seq__21069_23414__$1);
            var G__23416 = cljs.core.chunk_rest.call(null, seq__21069_23414__$1);
            var G__23417 = c__5012__auto___23415;
            var G__23418 = cljs.core.count.call(null, c__5012__auto___23415);
            var G__23419 = 0;
            seq__21069_23404 = G__23416;
            chunk__21070_23405 = G__23417;
            count__21071_23406 = G__23418;
            i__21072_23407 = G__23419;
            continue;
          } else {
            var arg__5757__auto___23420 = cljs.core.first.call(null, seq__21069_23414__$1);
            a__5756__auto__.push(arg__5757__auto___23420);
            var G__23421 = cljs.core.next.call(null, seq__21069_23414__$1);
            var G__23422 = null;
            var G__23423 = 0;
            var G__23424 = 0;
            seq__21069_23404 = G__23421;
            chunk__21070_23405 = G__23422;
            count__21071_23406 = G__23423;
            i__21072_23407 = G__23424;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__5756__auto__);
  };
  var sup = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23425__i = 0, G__23425__a = new Array(arguments.length - 0);
      while (G__23425__i < G__23425__a.length) {
        G__23425__a[G__23425__i] = arguments[G__23425__i + 0];
        ++G__23425__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23425__a, 0);
    }
    return sup__delegate.call(this, args__5755__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__23426) {
    var args__5755__auto__ = cljs.core.seq(arglist__23426);
    return sup__delegate(args__5755__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21077_23427 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21078_23428 = null;
    var count__21079_23429 = 0;
    var i__21080_23430 = 0;
    while (true) {
      if (i__21080_23430 < count__21079_23429) {
        var arg__5757__auto___23431 = cljs.core._nth.call(null, chunk__21078_23428, i__21080_23430);
        a__5756__auto__.push(arg__5757__auto___23431);
        var G__23432 = seq__21077_23427;
        var G__23433 = chunk__21078_23428;
        var G__23434 = count__21079_23429;
        var G__23435 = i__21080_23430 + 1;
        seq__21077_23427 = G__23432;
        chunk__21078_23428 = G__23433;
        count__21079_23429 = G__23434;
        i__21080_23430 = G__23435;
        continue;
      } else {
        var temp__4126__auto___23436 = cljs.core.seq.call(null, seq__21077_23427);
        if (temp__4126__auto___23436) {
          var seq__21077_23437__$1 = temp__4126__auto___23436;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21077_23437__$1)) {
            var c__5012__auto___23438 = cljs.core.chunk_first.call(null, seq__21077_23437__$1);
            var G__23439 = cljs.core.chunk_rest.call(null, seq__21077_23437__$1);
            var G__23440 = c__5012__auto___23438;
            var G__23441 = cljs.core.count.call(null, c__5012__auto___23438);
            var G__23442 = 0;
            seq__21077_23427 = G__23439;
            chunk__21078_23428 = G__23440;
            count__21079_23429 = G__23441;
            i__21080_23430 = G__23442;
            continue;
          } else {
            var arg__5757__auto___23443 = cljs.core.first.call(null, seq__21077_23437__$1);
            a__5756__auto__.push(arg__5757__auto___23443);
            var G__23444 = cljs.core.next.call(null, seq__21077_23437__$1);
            var G__23445 = null;
            var G__23446 = 0;
            var G__23447 = 0;
            seq__21077_23427 = G__23444;
            chunk__21078_23428 = G__23445;
            count__21079_23429 = G__23446;
            i__21080_23430 = G__23447;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__5756__auto__);
  };
  var table = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23448__i = 0, G__23448__a = new Array(arguments.length - 0);
      while (G__23448__i < G__23448__a.length) {
        G__23448__a[G__23448__i] = arguments[G__23448__i + 0];
        ++G__23448__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23448__a, 0);
    }
    return table__delegate.call(this, args__5755__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__23449) {
    var args__5755__auto__ = cljs.core.seq(arglist__23449);
    return table__delegate(args__5755__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21085_23450 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21086_23451 = null;
    var count__21087_23452 = 0;
    var i__21088_23453 = 0;
    while (true) {
      if (i__21088_23453 < count__21087_23452) {
        var arg__5757__auto___23454 = cljs.core._nth.call(null, chunk__21086_23451, i__21088_23453);
        a__5756__auto__.push(arg__5757__auto___23454);
        var G__23455 = seq__21085_23450;
        var G__23456 = chunk__21086_23451;
        var G__23457 = count__21087_23452;
        var G__23458 = i__21088_23453 + 1;
        seq__21085_23450 = G__23455;
        chunk__21086_23451 = G__23456;
        count__21087_23452 = G__23457;
        i__21088_23453 = G__23458;
        continue;
      } else {
        var temp__4126__auto___23459 = cljs.core.seq.call(null, seq__21085_23450);
        if (temp__4126__auto___23459) {
          var seq__21085_23460__$1 = temp__4126__auto___23459;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21085_23460__$1)) {
            var c__5012__auto___23461 = cljs.core.chunk_first.call(null, seq__21085_23460__$1);
            var G__23462 = cljs.core.chunk_rest.call(null, seq__21085_23460__$1);
            var G__23463 = c__5012__auto___23461;
            var G__23464 = cljs.core.count.call(null, c__5012__auto___23461);
            var G__23465 = 0;
            seq__21085_23450 = G__23462;
            chunk__21086_23451 = G__23463;
            count__21087_23452 = G__23464;
            i__21088_23453 = G__23465;
            continue;
          } else {
            var arg__5757__auto___23466 = cljs.core.first.call(null, seq__21085_23460__$1);
            a__5756__auto__.push(arg__5757__auto___23466);
            var G__23467 = cljs.core.next.call(null, seq__21085_23460__$1);
            var G__23468 = null;
            var G__23469 = 0;
            var G__23470 = 0;
            seq__21085_23450 = G__23467;
            chunk__21086_23451 = G__23468;
            count__21087_23452 = G__23469;
            i__21088_23453 = G__23470;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__5756__auto__);
  };
  var tbody = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23471__i = 0, G__23471__a = new Array(arguments.length - 0);
      while (G__23471__i < G__23471__a.length) {
        G__23471__a[G__23471__i] = arguments[G__23471__i + 0];
        ++G__23471__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23471__a, 0);
    }
    return tbody__delegate.call(this, args__5755__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__23472) {
    var args__5755__auto__ = cljs.core.seq(arglist__23472);
    return tbody__delegate(args__5755__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21093_23473 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21094_23474 = null;
    var count__21095_23475 = 0;
    var i__21096_23476 = 0;
    while (true) {
      if (i__21096_23476 < count__21095_23475) {
        var arg__5757__auto___23477 = cljs.core._nth.call(null, chunk__21094_23474, i__21096_23476);
        a__5756__auto__.push(arg__5757__auto___23477);
        var G__23478 = seq__21093_23473;
        var G__23479 = chunk__21094_23474;
        var G__23480 = count__21095_23475;
        var G__23481 = i__21096_23476 + 1;
        seq__21093_23473 = G__23478;
        chunk__21094_23474 = G__23479;
        count__21095_23475 = G__23480;
        i__21096_23476 = G__23481;
        continue;
      } else {
        var temp__4126__auto___23482 = cljs.core.seq.call(null, seq__21093_23473);
        if (temp__4126__auto___23482) {
          var seq__21093_23483__$1 = temp__4126__auto___23482;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21093_23483__$1)) {
            var c__5012__auto___23484 = cljs.core.chunk_first.call(null, seq__21093_23483__$1);
            var G__23485 = cljs.core.chunk_rest.call(null, seq__21093_23483__$1);
            var G__23486 = c__5012__auto___23484;
            var G__23487 = cljs.core.count.call(null, c__5012__auto___23484);
            var G__23488 = 0;
            seq__21093_23473 = G__23485;
            chunk__21094_23474 = G__23486;
            count__21095_23475 = G__23487;
            i__21096_23476 = G__23488;
            continue;
          } else {
            var arg__5757__auto___23489 = cljs.core.first.call(null, seq__21093_23483__$1);
            a__5756__auto__.push(arg__5757__auto___23489);
            var G__23490 = cljs.core.next.call(null, seq__21093_23483__$1);
            var G__23491 = null;
            var G__23492 = 0;
            var G__23493 = 0;
            seq__21093_23473 = G__23490;
            chunk__21094_23474 = G__23491;
            count__21095_23475 = G__23492;
            i__21096_23476 = G__23493;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__5756__auto__);
  };
  var td = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23494__i = 0, G__23494__a = new Array(arguments.length - 0);
      while (G__23494__i < G__23494__a.length) {
        G__23494__a[G__23494__i] = arguments[G__23494__i + 0];
        ++G__23494__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23494__a, 0);
    }
    return td__delegate.call(this, args__5755__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__23495) {
    var args__5755__auto__ = cljs.core.seq(arglist__23495);
    return td__delegate(args__5755__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21101_23496 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21102_23497 = null;
    var count__21103_23498 = 0;
    var i__21104_23499 = 0;
    while (true) {
      if (i__21104_23499 < count__21103_23498) {
        var arg__5757__auto___23500 = cljs.core._nth.call(null, chunk__21102_23497, i__21104_23499);
        a__5756__auto__.push(arg__5757__auto___23500);
        var G__23501 = seq__21101_23496;
        var G__23502 = chunk__21102_23497;
        var G__23503 = count__21103_23498;
        var G__23504 = i__21104_23499 + 1;
        seq__21101_23496 = G__23501;
        chunk__21102_23497 = G__23502;
        count__21103_23498 = G__23503;
        i__21104_23499 = G__23504;
        continue;
      } else {
        var temp__4126__auto___23505 = cljs.core.seq.call(null, seq__21101_23496);
        if (temp__4126__auto___23505) {
          var seq__21101_23506__$1 = temp__4126__auto___23505;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21101_23506__$1)) {
            var c__5012__auto___23507 = cljs.core.chunk_first.call(null, seq__21101_23506__$1);
            var G__23508 = cljs.core.chunk_rest.call(null, seq__21101_23506__$1);
            var G__23509 = c__5012__auto___23507;
            var G__23510 = cljs.core.count.call(null, c__5012__auto___23507);
            var G__23511 = 0;
            seq__21101_23496 = G__23508;
            chunk__21102_23497 = G__23509;
            count__21103_23498 = G__23510;
            i__21104_23499 = G__23511;
            continue;
          } else {
            var arg__5757__auto___23512 = cljs.core.first.call(null, seq__21101_23506__$1);
            a__5756__auto__.push(arg__5757__auto___23512);
            var G__23513 = cljs.core.next.call(null, seq__21101_23506__$1);
            var G__23514 = null;
            var G__23515 = 0;
            var G__23516 = 0;
            seq__21101_23496 = G__23513;
            chunk__21102_23497 = G__23514;
            count__21103_23498 = G__23515;
            i__21104_23499 = G__23516;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__5756__auto__);
  };
  var textarea = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23517__i = 0, G__23517__a = new Array(arguments.length - 0);
      while (G__23517__i < G__23517__a.length) {
        G__23517__a[G__23517__i] = arguments[G__23517__i + 0];
        ++G__23517__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23517__a, 0);
    }
    return textarea__delegate.call(this, args__5755__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__23518) {
    var args__5755__auto__ = cljs.core.seq(arglist__23518);
    return textarea__delegate(args__5755__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21109_23519 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21110_23520 = null;
    var count__21111_23521 = 0;
    var i__21112_23522 = 0;
    while (true) {
      if (i__21112_23522 < count__21111_23521) {
        var arg__5757__auto___23523 = cljs.core._nth.call(null, chunk__21110_23520, i__21112_23522);
        a__5756__auto__.push(arg__5757__auto___23523);
        var G__23524 = seq__21109_23519;
        var G__23525 = chunk__21110_23520;
        var G__23526 = count__21111_23521;
        var G__23527 = i__21112_23522 + 1;
        seq__21109_23519 = G__23524;
        chunk__21110_23520 = G__23525;
        count__21111_23521 = G__23526;
        i__21112_23522 = G__23527;
        continue;
      } else {
        var temp__4126__auto___23528 = cljs.core.seq.call(null, seq__21109_23519);
        if (temp__4126__auto___23528) {
          var seq__21109_23529__$1 = temp__4126__auto___23528;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21109_23529__$1)) {
            var c__5012__auto___23530 = cljs.core.chunk_first.call(null, seq__21109_23529__$1);
            var G__23531 = cljs.core.chunk_rest.call(null, seq__21109_23529__$1);
            var G__23532 = c__5012__auto___23530;
            var G__23533 = cljs.core.count.call(null, c__5012__auto___23530);
            var G__23534 = 0;
            seq__21109_23519 = G__23531;
            chunk__21110_23520 = G__23532;
            count__21111_23521 = G__23533;
            i__21112_23522 = G__23534;
            continue;
          } else {
            var arg__5757__auto___23535 = cljs.core.first.call(null, seq__21109_23529__$1);
            a__5756__auto__.push(arg__5757__auto___23535);
            var G__23536 = cljs.core.next.call(null, seq__21109_23529__$1);
            var G__23537 = null;
            var G__23538 = 0;
            var G__23539 = 0;
            seq__21109_23519 = G__23536;
            chunk__21110_23520 = G__23537;
            count__21111_23521 = G__23538;
            i__21112_23522 = G__23539;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__5756__auto__);
  };
  var tfoot = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23540__i = 0, G__23540__a = new Array(arguments.length - 0);
      while (G__23540__i < G__23540__a.length) {
        G__23540__a[G__23540__i] = arguments[G__23540__i + 0];
        ++G__23540__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23540__a, 0);
    }
    return tfoot__delegate.call(this, args__5755__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__23541) {
    var args__5755__auto__ = cljs.core.seq(arglist__23541);
    return tfoot__delegate(args__5755__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21117_23542 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21118_23543 = null;
    var count__21119_23544 = 0;
    var i__21120_23545 = 0;
    while (true) {
      if (i__21120_23545 < count__21119_23544) {
        var arg__5757__auto___23546 = cljs.core._nth.call(null, chunk__21118_23543, i__21120_23545);
        a__5756__auto__.push(arg__5757__auto___23546);
        var G__23547 = seq__21117_23542;
        var G__23548 = chunk__21118_23543;
        var G__23549 = count__21119_23544;
        var G__23550 = i__21120_23545 + 1;
        seq__21117_23542 = G__23547;
        chunk__21118_23543 = G__23548;
        count__21119_23544 = G__23549;
        i__21120_23545 = G__23550;
        continue;
      } else {
        var temp__4126__auto___23551 = cljs.core.seq.call(null, seq__21117_23542);
        if (temp__4126__auto___23551) {
          var seq__21117_23552__$1 = temp__4126__auto___23551;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21117_23552__$1)) {
            var c__5012__auto___23553 = cljs.core.chunk_first.call(null, seq__21117_23552__$1);
            var G__23554 = cljs.core.chunk_rest.call(null, seq__21117_23552__$1);
            var G__23555 = c__5012__auto___23553;
            var G__23556 = cljs.core.count.call(null, c__5012__auto___23553);
            var G__23557 = 0;
            seq__21117_23542 = G__23554;
            chunk__21118_23543 = G__23555;
            count__21119_23544 = G__23556;
            i__21120_23545 = G__23557;
            continue;
          } else {
            var arg__5757__auto___23558 = cljs.core.first.call(null, seq__21117_23552__$1);
            a__5756__auto__.push(arg__5757__auto___23558);
            var G__23559 = cljs.core.next.call(null, seq__21117_23552__$1);
            var G__23560 = null;
            var G__23561 = 0;
            var G__23562 = 0;
            seq__21117_23542 = G__23559;
            chunk__21118_23543 = G__23560;
            count__21119_23544 = G__23561;
            i__21120_23545 = G__23562;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__5756__auto__);
  };
  var th = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23563__i = 0, G__23563__a = new Array(arguments.length - 0);
      while (G__23563__i < G__23563__a.length) {
        G__23563__a[G__23563__i] = arguments[G__23563__i + 0];
        ++G__23563__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23563__a, 0);
    }
    return th__delegate.call(this, args__5755__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__23564) {
    var args__5755__auto__ = cljs.core.seq(arglist__23564);
    return th__delegate(args__5755__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21125_23565 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21126_23566 = null;
    var count__21127_23567 = 0;
    var i__21128_23568 = 0;
    while (true) {
      if (i__21128_23568 < count__21127_23567) {
        var arg__5757__auto___23569 = cljs.core._nth.call(null, chunk__21126_23566, i__21128_23568);
        a__5756__auto__.push(arg__5757__auto___23569);
        var G__23570 = seq__21125_23565;
        var G__23571 = chunk__21126_23566;
        var G__23572 = count__21127_23567;
        var G__23573 = i__21128_23568 + 1;
        seq__21125_23565 = G__23570;
        chunk__21126_23566 = G__23571;
        count__21127_23567 = G__23572;
        i__21128_23568 = G__23573;
        continue;
      } else {
        var temp__4126__auto___23574 = cljs.core.seq.call(null, seq__21125_23565);
        if (temp__4126__auto___23574) {
          var seq__21125_23575__$1 = temp__4126__auto___23574;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21125_23575__$1)) {
            var c__5012__auto___23576 = cljs.core.chunk_first.call(null, seq__21125_23575__$1);
            var G__23577 = cljs.core.chunk_rest.call(null, seq__21125_23575__$1);
            var G__23578 = c__5012__auto___23576;
            var G__23579 = cljs.core.count.call(null, c__5012__auto___23576);
            var G__23580 = 0;
            seq__21125_23565 = G__23577;
            chunk__21126_23566 = G__23578;
            count__21127_23567 = G__23579;
            i__21128_23568 = G__23580;
            continue;
          } else {
            var arg__5757__auto___23581 = cljs.core.first.call(null, seq__21125_23575__$1);
            a__5756__auto__.push(arg__5757__auto___23581);
            var G__23582 = cljs.core.next.call(null, seq__21125_23575__$1);
            var G__23583 = null;
            var G__23584 = 0;
            var G__23585 = 0;
            seq__21125_23565 = G__23582;
            chunk__21126_23566 = G__23583;
            count__21127_23567 = G__23584;
            i__21128_23568 = G__23585;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__5756__auto__);
  };
  var thead = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23586__i = 0, G__23586__a = new Array(arguments.length - 0);
      while (G__23586__i < G__23586__a.length) {
        G__23586__a[G__23586__i] = arguments[G__23586__i + 0];
        ++G__23586__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23586__a, 0);
    }
    return thead__delegate.call(this, args__5755__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__23587) {
    var args__5755__auto__ = cljs.core.seq(arglist__23587);
    return thead__delegate(args__5755__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21133_23588 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21134_23589 = null;
    var count__21135_23590 = 0;
    var i__21136_23591 = 0;
    while (true) {
      if (i__21136_23591 < count__21135_23590) {
        var arg__5757__auto___23592 = cljs.core._nth.call(null, chunk__21134_23589, i__21136_23591);
        a__5756__auto__.push(arg__5757__auto___23592);
        var G__23593 = seq__21133_23588;
        var G__23594 = chunk__21134_23589;
        var G__23595 = count__21135_23590;
        var G__23596 = i__21136_23591 + 1;
        seq__21133_23588 = G__23593;
        chunk__21134_23589 = G__23594;
        count__21135_23590 = G__23595;
        i__21136_23591 = G__23596;
        continue;
      } else {
        var temp__4126__auto___23597 = cljs.core.seq.call(null, seq__21133_23588);
        if (temp__4126__auto___23597) {
          var seq__21133_23598__$1 = temp__4126__auto___23597;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21133_23598__$1)) {
            var c__5012__auto___23599 = cljs.core.chunk_first.call(null, seq__21133_23598__$1);
            var G__23600 = cljs.core.chunk_rest.call(null, seq__21133_23598__$1);
            var G__23601 = c__5012__auto___23599;
            var G__23602 = cljs.core.count.call(null, c__5012__auto___23599);
            var G__23603 = 0;
            seq__21133_23588 = G__23600;
            chunk__21134_23589 = G__23601;
            count__21135_23590 = G__23602;
            i__21136_23591 = G__23603;
            continue;
          } else {
            var arg__5757__auto___23604 = cljs.core.first.call(null, seq__21133_23598__$1);
            a__5756__auto__.push(arg__5757__auto___23604);
            var G__23605 = cljs.core.next.call(null, seq__21133_23598__$1);
            var G__23606 = null;
            var G__23607 = 0;
            var G__23608 = 0;
            seq__21133_23588 = G__23605;
            chunk__21134_23589 = G__23606;
            count__21135_23590 = G__23607;
            i__21136_23591 = G__23608;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__5756__auto__);
  };
  var time = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23609__i = 0, G__23609__a = new Array(arguments.length - 0);
      while (G__23609__i < G__23609__a.length) {
        G__23609__a[G__23609__i] = arguments[G__23609__i + 0];
        ++G__23609__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23609__a, 0);
    }
    return time__delegate.call(this, args__5755__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__23610) {
    var args__5755__auto__ = cljs.core.seq(arglist__23610);
    return time__delegate(args__5755__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21141_23611 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21142_23612 = null;
    var count__21143_23613 = 0;
    var i__21144_23614 = 0;
    while (true) {
      if (i__21144_23614 < count__21143_23613) {
        var arg__5757__auto___23615 = cljs.core._nth.call(null, chunk__21142_23612, i__21144_23614);
        a__5756__auto__.push(arg__5757__auto___23615);
        var G__23616 = seq__21141_23611;
        var G__23617 = chunk__21142_23612;
        var G__23618 = count__21143_23613;
        var G__23619 = i__21144_23614 + 1;
        seq__21141_23611 = G__23616;
        chunk__21142_23612 = G__23617;
        count__21143_23613 = G__23618;
        i__21144_23614 = G__23619;
        continue;
      } else {
        var temp__4126__auto___23620 = cljs.core.seq.call(null, seq__21141_23611);
        if (temp__4126__auto___23620) {
          var seq__21141_23621__$1 = temp__4126__auto___23620;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21141_23621__$1)) {
            var c__5012__auto___23622 = cljs.core.chunk_first.call(null, seq__21141_23621__$1);
            var G__23623 = cljs.core.chunk_rest.call(null, seq__21141_23621__$1);
            var G__23624 = c__5012__auto___23622;
            var G__23625 = cljs.core.count.call(null, c__5012__auto___23622);
            var G__23626 = 0;
            seq__21141_23611 = G__23623;
            chunk__21142_23612 = G__23624;
            count__21143_23613 = G__23625;
            i__21144_23614 = G__23626;
            continue;
          } else {
            var arg__5757__auto___23627 = cljs.core.first.call(null, seq__21141_23621__$1);
            a__5756__auto__.push(arg__5757__auto___23627);
            var G__23628 = cljs.core.next.call(null, seq__21141_23621__$1);
            var G__23629 = null;
            var G__23630 = 0;
            var G__23631 = 0;
            seq__21141_23611 = G__23628;
            chunk__21142_23612 = G__23629;
            count__21143_23613 = G__23630;
            i__21144_23614 = G__23631;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__5756__auto__);
  };
  var title = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23632__i = 0, G__23632__a = new Array(arguments.length - 0);
      while (G__23632__i < G__23632__a.length) {
        G__23632__a[G__23632__i] = arguments[G__23632__i + 0];
        ++G__23632__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23632__a, 0);
    }
    return title__delegate.call(this, args__5755__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__23633) {
    var args__5755__auto__ = cljs.core.seq(arglist__23633);
    return title__delegate(args__5755__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21149_23634 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21150_23635 = null;
    var count__21151_23636 = 0;
    var i__21152_23637 = 0;
    while (true) {
      if (i__21152_23637 < count__21151_23636) {
        var arg__5757__auto___23638 = cljs.core._nth.call(null, chunk__21150_23635, i__21152_23637);
        a__5756__auto__.push(arg__5757__auto___23638);
        var G__23639 = seq__21149_23634;
        var G__23640 = chunk__21150_23635;
        var G__23641 = count__21151_23636;
        var G__23642 = i__21152_23637 + 1;
        seq__21149_23634 = G__23639;
        chunk__21150_23635 = G__23640;
        count__21151_23636 = G__23641;
        i__21152_23637 = G__23642;
        continue;
      } else {
        var temp__4126__auto___23643 = cljs.core.seq.call(null, seq__21149_23634);
        if (temp__4126__auto___23643) {
          var seq__21149_23644__$1 = temp__4126__auto___23643;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21149_23644__$1)) {
            var c__5012__auto___23645 = cljs.core.chunk_first.call(null, seq__21149_23644__$1);
            var G__23646 = cljs.core.chunk_rest.call(null, seq__21149_23644__$1);
            var G__23647 = c__5012__auto___23645;
            var G__23648 = cljs.core.count.call(null, c__5012__auto___23645);
            var G__23649 = 0;
            seq__21149_23634 = G__23646;
            chunk__21150_23635 = G__23647;
            count__21151_23636 = G__23648;
            i__21152_23637 = G__23649;
            continue;
          } else {
            var arg__5757__auto___23650 = cljs.core.first.call(null, seq__21149_23644__$1);
            a__5756__auto__.push(arg__5757__auto___23650);
            var G__23651 = cljs.core.next.call(null, seq__21149_23644__$1);
            var G__23652 = null;
            var G__23653 = 0;
            var G__23654 = 0;
            seq__21149_23634 = G__23651;
            chunk__21150_23635 = G__23652;
            count__21151_23636 = G__23653;
            i__21152_23637 = G__23654;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__5756__auto__);
  };
  var tr = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23655__i = 0, G__23655__a = new Array(arguments.length - 0);
      while (G__23655__i < G__23655__a.length) {
        G__23655__a[G__23655__i] = arguments[G__23655__i + 0];
        ++G__23655__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23655__a, 0);
    }
    return tr__delegate.call(this, args__5755__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__23656) {
    var args__5755__auto__ = cljs.core.seq(arglist__23656);
    return tr__delegate(args__5755__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21157_23657 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21158_23658 = null;
    var count__21159_23659 = 0;
    var i__21160_23660 = 0;
    while (true) {
      if (i__21160_23660 < count__21159_23659) {
        var arg__5757__auto___23661 = cljs.core._nth.call(null, chunk__21158_23658, i__21160_23660);
        a__5756__auto__.push(arg__5757__auto___23661);
        var G__23662 = seq__21157_23657;
        var G__23663 = chunk__21158_23658;
        var G__23664 = count__21159_23659;
        var G__23665 = i__21160_23660 + 1;
        seq__21157_23657 = G__23662;
        chunk__21158_23658 = G__23663;
        count__21159_23659 = G__23664;
        i__21160_23660 = G__23665;
        continue;
      } else {
        var temp__4126__auto___23666 = cljs.core.seq.call(null, seq__21157_23657);
        if (temp__4126__auto___23666) {
          var seq__21157_23667__$1 = temp__4126__auto___23666;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21157_23667__$1)) {
            var c__5012__auto___23668 = cljs.core.chunk_first.call(null, seq__21157_23667__$1);
            var G__23669 = cljs.core.chunk_rest.call(null, seq__21157_23667__$1);
            var G__23670 = c__5012__auto___23668;
            var G__23671 = cljs.core.count.call(null, c__5012__auto___23668);
            var G__23672 = 0;
            seq__21157_23657 = G__23669;
            chunk__21158_23658 = G__23670;
            count__21159_23659 = G__23671;
            i__21160_23660 = G__23672;
            continue;
          } else {
            var arg__5757__auto___23673 = cljs.core.first.call(null, seq__21157_23667__$1);
            a__5756__auto__.push(arg__5757__auto___23673);
            var G__23674 = cljs.core.next.call(null, seq__21157_23667__$1);
            var G__23675 = null;
            var G__23676 = 0;
            var G__23677 = 0;
            seq__21157_23657 = G__23674;
            chunk__21158_23658 = G__23675;
            count__21159_23659 = G__23676;
            i__21160_23660 = G__23677;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__5756__auto__);
  };
  var track = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23678__i = 0, G__23678__a = new Array(arguments.length - 0);
      while (G__23678__i < G__23678__a.length) {
        G__23678__a[G__23678__i] = arguments[G__23678__i + 0];
        ++G__23678__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23678__a, 0);
    }
    return track__delegate.call(this, args__5755__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__23679) {
    var args__5755__auto__ = cljs.core.seq(arglist__23679);
    return track__delegate(args__5755__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21165_23680 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21166_23681 = null;
    var count__21167_23682 = 0;
    var i__21168_23683 = 0;
    while (true) {
      if (i__21168_23683 < count__21167_23682) {
        var arg__5757__auto___23684 = cljs.core._nth.call(null, chunk__21166_23681, i__21168_23683);
        a__5756__auto__.push(arg__5757__auto___23684);
        var G__23685 = seq__21165_23680;
        var G__23686 = chunk__21166_23681;
        var G__23687 = count__21167_23682;
        var G__23688 = i__21168_23683 + 1;
        seq__21165_23680 = G__23685;
        chunk__21166_23681 = G__23686;
        count__21167_23682 = G__23687;
        i__21168_23683 = G__23688;
        continue;
      } else {
        var temp__4126__auto___23689 = cljs.core.seq.call(null, seq__21165_23680);
        if (temp__4126__auto___23689) {
          var seq__21165_23690__$1 = temp__4126__auto___23689;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21165_23690__$1)) {
            var c__5012__auto___23691 = cljs.core.chunk_first.call(null, seq__21165_23690__$1);
            var G__23692 = cljs.core.chunk_rest.call(null, seq__21165_23690__$1);
            var G__23693 = c__5012__auto___23691;
            var G__23694 = cljs.core.count.call(null, c__5012__auto___23691);
            var G__23695 = 0;
            seq__21165_23680 = G__23692;
            chunk__21166_23681 = G__23693;
            count__21167_23682 = G__23694;
            i__21168_23683 = G__23695;
            continue;
          } else {
            var arg__5757__auto___23696 = cljs.core.first.call(null, seq__21165_23690__$1);
            a__5756__auto__.push(arg__5757__auto___23696);
            var G__23697 = cljs.core.next.call(null, seq__21165_23690__$1);
            var G__23698 = null;
            var G__23699 = 0;
            var G__23700 = 0;
            seq__21165_23680 = G__23697;
            chunk__21166_23681 = G__23698;
            count__21167_23682 = G__23699;
            i__21168_23683 = G__23700;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__5756__auto__);
  };
  var u = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23701__i = 0, G__23701__a = new Array(arguments.length - 0);
      while (G__23701__i < G__23701__a.length) {
        G__23701__a[G__23701__i] = arguments[G__23701__i + 0];
        ++G__23701__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23701__a, 0);
    }
    return u__delegate.call(this, args__5755__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__23702) {
    var args__5755__auto__ = cljs.core.seq(arglist__23702);
    return u__delegate(args__5755__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21173_23703 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21174_23704 = null;
    var count__21175_23705 = 0;
    var i__21176_23706 = 0;
    while (true) {
      if (i__21176_23706 < count__21175_23705) {
        var arg__5757__auto___23707 = cljs.core._nth.call(null, chunk__21174_23704, i__21176_23706);
        a__5756__auto__.push(arg__5757__auto___23707);
        var G__23708 = seq__21173_23703;
        var G__23709 = chunk__21174_23704;
        var G__23710 = count__21175_23705;
        var G__23711 = i__21176_23706 + 1;
        seq__21173_23703 = G__23708;
        chunk__21174_23704 = G__23709;
        count__21175_23705 = G__23710;
        i__21176_23706 = G__23711;
        continue;
      } else {
        var temp__4126__auto___23712 = cljs.core.seq.call(null, seq__21173_23703);
        if (temp__4126__auto___23712) {
          var seq__21173_23713__$1 = temp__4126__auto___23712;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21173_23713__$1)) {
            var c__5012__auto___23714 = cljs.core.chunk_first.call(null, seq__21173_23713__$1);
            var G__23715 = cljs.core.chunk_rest.call(null, seq__21173_23713__$1);
            var G__23716 = c__5012__auto___23714;
            var G__23717 = cljs.core.count.call(null, c__5012__auto___23714);
            var G__23718 = 0;
            seq__21173_23703 = G__23715;
            chunk__21174_23704 = G__23716;
            count__21175_23705 = G__23717;
            i__21176_23706 = G__23718;
            continue;
          } else {
            var arg__5757__auto___23719 = cljs.core.first.call(null, seq__21173_23713__$1);
            a__5756__auto__.push(arg__5757__auto___23719);
            var G__23720 = cljs.core.next.call(null, seq__21173_23713__$1);
            var G__23721 = null;
            var G__23722 = 0;
            var G__23723 = 0;
            seq__21173_23703 = G__23720;
            chunk__21174_23704 = G__23721;
            count__21175_23705 = G__23722;
            i__21176_23706 = G__23723;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__5756__auto__);
  };
  var ul = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23724__i = 0, G__23724__a = new Array(arguments.length - 0);
      while (G__23724__i < G__23724__a.length) {
        G__23724__a[G__23724__i] = arguments[G__23724__i + 0];
        ++G__23724__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23724__a, 0);
    }
    return ul__delegate.call(this, args__5755__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__23725) {
    var args__5755__auto__ = cljs.core.seq(arglist__23725);
    return ul__delegate(args__5755__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21181_23726 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21182_23727 = null;
    var count__21183_23728 = 0;
    var i__21184_23729 = 0;
    while (true) {
      if (i__21184_23729 < count__21183_23728) {
        var arg__5757__auto___23730 = cljs.core._nth.call(null, chunk__21182_23727, i__21184_23729);
        a__5756__auto__.push(arg__5757__auto___23730);
        var G__23731 = seq__21181_23726;
        var G__23732 = chunk__21182_23727;
        var G__23733 = count__21183_23728;
        var G__23734 = i__21184_23729 + 1;
        seq__21181_23726 = G__23731;
        chunk__21182_23727 = G__23732;
        count__21183_23728 = G__23733;
        i__21184_23729 = G__23734;
        continue;
      } else {
        var temp__4126__auto___23735 = cljs.core.seq.call(null, seq__21181_23726);
        if (temp__4126__auto___23735) {
          var seq__21181_23736__$1 = temp__4126__auto___23735;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21181_23736__$1)) {
            var c__5012__auto___23737 = cljs.core.chunk_first.call(null, seq__21181_23736__$1);
            var G__23738 = cljs.core.chunk_rest.call(null, seq__21181_23736__$1);
            var G__23739 = c__5012__auto___23737;
            var G__23740 = cljs.core.count.call(null, c__5012__auto___23737);
            var G__23741 = 0;
            seq__21181_23726 = G__23738;
            chunk__21182_23727 = G__23739;
            count__21183_23728 = G__23740;
            i__21184_23729 = G__23741;
            continue;
          } else {
            var arg__5757__auto___23742 = cljs.core.first.call(null, seq__21181_23736__$1);
            a__5756__auto__.push(arg__5757__auto___23742);
            var G__23743 = cljs.core.next.call(null, seq__21181_23736__$1);
            var G__23744 = null;
            var G__23745 = 0;
            var G__23746 = 0;
            seq__21181_23726 = G__23743;
            chunk__21182_23727 = G__23744;
            count__21183_23728 = G__23745;
            i__21184_23729 = G__23746;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__5756__auto__);
  };
  var var$ = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23747__i = 0, G__23747__a = new Array(arguments.length - 0);
      while (G__23747__i < G__23747__a.length) {
        G__23747__a[G__23747__i] = arguments[G__23747__i + 0];
        ++G__23747__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23747__a, 0);
    }
    return var$__delegate.call(this, args__5755__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__23748) {
    var args__5755__auto__ = cljs.core.seq(arglist__23748);
    return var$__delegate(args__5755__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21189_23749 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21190_23750 = null;
    var count__21191_23751 = 0;
    var i__21192_23752 = 0;
    while (true) {
      if (i__21192_23752 < count__21191_23751) {
        var arg__5757__auto___23753 = cljs.core._nth.call(null, chunk__21190_23750, i__21192_23752);
        a__5756__auto__.push(arg__5757__auto___23753);
        var G__23754 = seq__21189_23749;
        var G__23755 = chunk__21190_23750;
        var G__23756 = count__21191_23751;
        var G__23757 = i__21192_23752 + 1;
        seq__21189_23749 = G__23754;
        chunk__21190_23750 = G__23755;
        count__21191_23751 = G__23756;
        i__21192_23752 = G__23757;
        continue;
      } else {
        var temp__4126__auto___23758 = cljs.core.seq.call(null, seq__21189_23749);
        if (temp__4126__auto___23758) {
          var seq__21189_23759__$1 = temp__4126__auto___23758;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21189_23759__$1)) {
            var c__5012__auto___23760 = cljs.core.chunk_first.call(null, seq__21189_23759__$1);
            var G__23761 = cljs.core.chunk_rest.call(null, seq__21189_23759__$1);
            var G__23762 = c__5012__auto___23760;
            var G__23763 = cljs.core.count.call(null, c__5012__auto___23760);
            var G__23764 = 0;
            seq__21189_23749 = G__23761;
            chunk__21190_23750 = G__23762;
            count__21191_23751 = G__23763;
            i__21192_23752 = G__23764;
            continue;
          } else {
            var arg__5757__auto___23765 = cljs.core.first.call(null, seq__21189_23759__$1);
            a__5756__auto__.push(arg__5757__auto___23765);
            var G__23766 = cljs.core.next.call(null, seq__21189_23759__$1);
            var G__23767 = null;
            var G__23768 = 0;
            var G__23769 = 0;
            seq__21189_23749 = G__23766;
            chunk__21190_23750 = G__23767;
            count__21191_23751 = G__23768;
            i__21192_23752 = G__23769;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__5756__auto__);
  };
  var video = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23770__i = 0, G__23770__a = new Array(arguments.length - 0);
      while (G__23770__i < G__23770__a.length) {
        G__23770__a[G__23770__i] = arguments[G__23770__i + 0];
        ++G__23770__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23770__a, 0);
    }
    return video__delegate.call(this, args__5755__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__23771) {
    var args__5755__auto__ = cljs.core.seq(arglist__23771);
    return video__delegate(args__5755__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21197_23772 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21198_23773 = null;
    var count__21199_23774 = 0;
    var i__21200_23775 = 0;
    while (true) {
      if (i__21200_23775 < count__21199_23774) {
        var arg__5757__auto___23776 = cljs.core._nth.call(null, chunk__21198_23773, i__21200_23775);
        a__5756__auto__.push(arg__5757__auto___23776);
        var G__23777 = seq__21197_23772;
        var G__23778 = chunk__21198_23773;
        var G__23779 = count__21199_23774;
        var G__23780 = i__21200_23775 + 1;
        seq__21197_23772 = G__23777;
        chunk__21198_23773 = G__23778;
        count__21199_23774 = G__23779;
        i__21200_23775 = G__23780;
        continue;
      } else {
        var temp__4126__auto___23781 = cljs.core.seq.call(null, seq__21197_23772);
        if (temp__4126__auto___23781) {
          var seq__21197_23782__$1 = temp__4126__auto___23781;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21197_23782__$1)) {
            var c__5012__auto___23783 = cljs.core.chunk_first.call(null, seq__21197_23782__$1);
            var G__23784 = cljs.core.chunk_rest.call(null, seq__21197_23782__$1);
            var G__23785 = c__5012__auto___23783;
            var G__23786 = cljs.core.count.call(null, c__5012__auto___23783);
            var G__23787 = 0;
            seq__21197_23772 = G__23784;
            chunk__21198_23773 = G__23785;
            count__21199_23774 = G__23786;
            i__21200_23775 = G__23787;
            continue;
          } else {
            var arg__5757__auto___23788 = cljs.core.first.call(null, seq__21197_23782__$1);
            a__5756__auto__.push(arg__5757__auto___23788);
            var G__23789 = cljs.core.next.call(null, seq__21197_23782__$1);
            var G__23790 = null;
            var G__23791 = 0;
            var G__23792 = 0;
            seq__21197_23772 = G__23789;
            chunk__21198_23773 = G__23790;
            count__21199_23774 = G__23791;
            i__21200_23775 = G__23792;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__5756__auto__);
  };
  var wbr = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23793__i = 0, G__23793__a = new Array(arguments.length - 0);
      while (G__23793__i < G__23793__a.length) {
        G__23793__a[G__23793__i] = arguments[G__23793__i + 0];
        ++G__23793__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23793__a, 0);
    }
    return wbr__delegate.call(this, args__5755__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__23794) {
    var args__5755__auto__ = cljs.core.seq(arglist__23794);
    return wbr__delegate(args__5755__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21205_23795 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21206_23796 = null;
    var count__21207_23797 = 0;
    var i__21208_23798 = 0;
    while (true) {
      if (i__21208_23798 < count__21207_23797) {
        var arg__5757__auto___23799 = cljs.core._nth.call(null, chunk__21206_23796, i__21208_23798);
        a__5756__auto__.push(arg__5757__auto___23799);
        var G__23800 = seq__21205_23795;
        var G__23801 = chunk__21206_23796;
        var G__23802 = count__21207_23797;
        var G__23803 = i__21208_23798 + 1;
        seq__21205_23795 = G__23800;
        chunk__21206_23796 = G__23801;
        count__21207_23797 = G__23802;
        i__21208_23798 = G__23803;
        continue;
      } else {
        var temp__4126__auto___23804 = cljs.core.seq.call(null, seq__21205_23795);
        if (temp__4126__auto___23804) {
          var seq__21205_23805__$1 = temp__4126__auto___23804;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21205_23805__$1)) {
            var c__5012__auto___23806 = cljs.core.chunk_first.call(null, seq__21205_23805__$1);
            var G__23807 = cljs.core.chunk_rest.call(null, seq__21205_23805__$1);
            var G__23808 = c__5012__auto___23806;
            var G__23809 = cljs.core.count.call(null, c__5012__auto___23806);
            var G__23810 = 0;
            seq__21205_23795 = G__23807;
            chunk__21206_23796 = G__23808;
            count__21207_23797 = G__23809;
            i__21208_23798 = G__23810;
            continue;
          } else {
            var arg__5757__auto___23811 = cljs.core.first.call(null, seq__21205_23805__$1);
            a__5756__auto__.push(arg__5757__auto___23811);
            var G__23812 = cljs.core.next.call(null, seq__21205_23805__$1);
            var G__23813 = null;
            var G__23814 = 0;
            var G__23815 = 0;
            seq__21205_23795 = G__23812;
            chunk__21206_23796 = G__23813;
            count__21207_23797 = G__23814;
            i__21208_23798 = G__23815;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__5756__auto__);
  };
  var circle = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23816__i = 0, G__23816__a = new Array(arguments.length - 0);
      while (G__23816__i < G__23816__a.length) {
        G__23816__a[G__23816__i] = arguments[G__23816__i + 0];
        ++G__23816__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23816__a, 0);
    }
    return circle__delegate.call(this, args__5755__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__23817) {
    var args__5755__auto__ = cljs.core.seq(arglist__23817);
    return circle__delegate(args__5755__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21213_23818 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21214_23819 = null;
    var count__21215_23820 = 0;
    var i__21216_23821 = 0;
    while (true) {
      if (i__21216_23821 < count__21215_23820) {
        var arg__5757__auto___23822 = cljs.core._nth.call(null, chunk__21214_23819, i__21216_23821);
        a__5756__auto__.push(arg__5757__auto___23822);
        var G__23823 = seq__21213_23818;
        var G__23824 = chunk__21214_23819;
        var G__23825 = count__21215_23820;
        var G__23826 = i__21216_23821 + 1;
        seq__21213_23818 = G__23823;
        chunk__21214_23819 = G__23824;
        count__21215_23820 = G__23825;
        i__21216_23821 = G__23826;
        continue;
      } else {
        var temp__4126__auto___23827 = cljs.core.seq.call(null, seq__21213_23818);
        if (temp__4126__auto___23827) {
          var seq__21213_23828__$1 = temp__4126__auto___23827;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21213_23828__$1)) {
            var c__5012__auto___23829 = cljs.core.chunk_first.call(null, seq__21213_23828__$1);
            var G__23830 = cljs.core.chunk_rest.call(null, seq__21213_23828__$1);
            var G__23831 = c__5012__auto___23829;
            var G__23832 = cljs.core.count.call(null, c__5012__auto___23829);
            var G__23833 = 0;
            seq__21213_23818 = G__23830;
            chunk__21214_23819 = G__23831;
            count__21215_23820 = G__23832;
            i__21216_23821 = G__23833;
            continue;
          } else {
            var arg__5757__auto___23834 = cljs.core.first.call(null, seq__21213_23828__$1);
            a__5756__auto__.push(arg__5757__auto___23834);
            var G__23835 = cljs.core.next.call(null, seq__21213_23828__$1);
            var G__23836 = null;
            var G__23837 = 0;
            var G__23838 = 0;
            seq__21213_23818 = G__23835;
            chunk__21214_23819 = G__23836;
            count__21215_23820 = G__23837;
            i__21216_23821 = G__23838;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__5756__auto__);
  };
  var g = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23839__i = 0, G__23839__a = new Array(arguments.length - 0);
      while (G__23839__i < G__23839__a.length) {
        G__23839__a[G__23839__i] = arguments[G__23839__i + 0];
        ++G__23839__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23839__a, 0);
    }
    return g__delegate.call(this, args__5755__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__23840) {
    var args__5755__auto__ = cljs.core.seq(arglist__23840);
    return g__delegate(args__5755__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21221_23841 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21222_23842 = null;
    var count__21223_23843 = 0;
    var i__21224_23844 = 0;
    while (true) {
      if (i__21224_23844 < count__21223_23843) {
        var arg__5757__auto___23845 = cljs.core._nth.call(null, chunk__21222_23842, i__21224_23844);
        a__5756__auto__.push(arg__5757__auto___23845);
        var G__23846 = seq__21221_23841;
        var G__23847 = chunk__21222_23842;
        var G__23848 = count__21223_23843;
        var G__23849 = i__21224_23844 + 1;
        seq__21221_23841 = G__23846;
        chunk__21222_23842 = G__23847;
        count__21223_23843 = G__23848;
        i__21224_23844 = G__23849;
        continue;
      } else {
        var temp__4126__auto___23850 = cljs.core.seq.call(null, seq__21221_23841);
        if (temp__4126__auto___23850) {
          var seq__21221_23851__$1 = temp__4126__auto___23850;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21221_23851__$1)) {
            var c__5012__auto___23852 = cljs.core.chunk_first.call(null, seq__21221_23851__$1);
            var G__23853 = cljs.core.chunk_rest.call(null, seq__21221_23851__$1);
            var G__23854 = c__5012__auto___23852;
            var G__23855 = cljs.core.count.call(null, c__5012__auto___23852);
            var G__23856 = 0;
            seq__21221_23841 = G__23853;
            chunk__21222_23842 = G__23854;
            count__21223_23843 = G__23855;
            i__21224_23844 = G__23856;
            continue;
          } else {
            var arg__5757__auto___23857 = cljs.core.first.call(null, seq__21221_23851__$1);
            a__5756__auto__.push(arg__5757__auto___23857);
            var G__23858 = cljs.core.next.call(null, seq__21221_23851__$1);
            var G__23859 = null;
            var G__23860 = 0;
            var G__23861 = 0;
            seq__21221_23841 = G__23858;
            chunk__21222_23842 = G__23859;
            count__21223_23843 = G__23860;
            i__21224_23844 = G__23861;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__5756__auto__);
  };
  var line = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23862__i = 0, G__23862__a = new Array(arguments.length - 0);
      while (G__23862__i < G__23862__a.length) {
        G__23862__a[G__23862__i] = arguments[G__23862__i + 0];
        ++G__23862__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23862__a, 0);
    }
    return line__delegate.call(this, args__5755__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__23863) {
    var args__5755__auto__ = cljs.core.seq(arglist__23863);
    return line__delegate(args__5755__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21229_23864 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21230_23865 = null;
    var count__21231_23866 = 0;
    var i__21232_23867 = 0;
    while (true) {
      if (i__21232_23867 < count__21231_23866) {
        var arg__5757__auto___23868 = cljs.core._nth.call(null, chunk__21230_23865, i__21232_23867);
        a__5756__auto__.push(arg__5757__auto___23868);
        var G__23869 = seq__21229_23864;
        var G__23870 = chunk__21230_23865;
        var G__23871 = count__21231_23866;
        var G__23872 = i__21232_23867 + 1;
        seq__21229_23864 = G__23869;
        chunk__21230_23865 = G__23870;
        count__21231_23866 = G__23871;
        i__21232_23867 = G__23872;
        continue;
      } else {
        var temp__4126__auto___23873 = cljs.core.seq.call(null, seq__21229_23864);
        if (temp__4126__auto___23873) {
          var seq__21229_23874__$1 = temp__4126__auto___23873;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21229_23874__$1)) {
            var c__5012__auto___23875 = cljs.core.chunk_first.call(null, seq__21229_23874__$1);
            var G__23876 = cljs.core.chunk_rest.call(null, seq__21229_23874__$1);
            var G__23877 = c__5012__auto___23875;
            var G__23878 = cljs.core.count.call(null, c__5012__auto___23875);
            var G__23879 = 0;
            seq__21229_23864 = G__23876;
            chunk__21230_23865 = G__23877;
            count__21231_23866 = G__23878;
            i__21232_23867 = G__23879;
            continue;
          } else {
            var arg__5757__auto___23880 = cljs.core.first.call(null, seq__21229_23874__$1);
            a__5756__auto__.push(arg__5757__auto___23880);
            var G__23881 = cljs.core.next.call(null, seq__21229_23874__$1);
            var G__23882 = null;
            var G__23883 = 0;
            var G__23884 = 0;
            seq__21229_23864 = G__23881;
            chunk__21230_23865 = G__23882;
            count__21231_23866 = G__23883;
            i__21232_23867 = G__23884;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__5756__auto__);
  };
  var path = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23885__i = 0, G__23885__a = new Array(arguments.length - 0);
      while (G__23885__i < G__23885__a.length) {
        G__23885__a[G__23885__i] = arguments[G__23885__i + 0];
        ++G__23885__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23885__a, 0);
    }
    return path__delegate.call(this, args__5755__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__23886) {
    var args__5755__auto__ = cljs.core.seq(arglist__23886);
    return path__delegate(args__5755__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21237_23887 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21238_23888 = null;
    var count__21239_23889 = 0;
    var i__21240_23890 = 0;
    while (true) {
      if (i__21240_23890 < count__21239_23889) {
        var arg__5757__auto___23891 = cljs.core._nth.call(null, chunk__21238_23888, i__21240_23890);
        a__5756__auto__.push(arg__5757__auto___23891);
        var G__23892 = seq__21237_23887;
        var G__23893 = chunk__21238_23888;
        var G__23894 = count__21239_23889;
        var G__23895 = i__21240_23890 + 1;
        seq__21237_23887 = G__23892;
        chunk__21238_23888 = G__23893;
        count__21239_23889 = G__23894;
        i__21240_23890 = G__23895;
        continue;
      } else {
        var temp__4126__auto___23896 = cljs.core.seq.call(null, seq__21237_23887);
        if (temp__4126__auto___23896) {
          var seq__21237_23897__$1 = temp__4126__auto___23896;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21237_23897__$1)) {
            var c__5012__auto___23898 = cljs.core.chunk_first.call(null, seq__21237_23897__$1);
            var G__23899 = cljs.core.chunk_rest.call(null, seq__21237_23897__$1);
            var G__23900 = c__5012__auto___23898;
            var G__23901 = cljs.core.count.call(null, c__5012__auto___23898);
            var G__23902 = 0;
            seq__21237_23887 = G__23899;
            chunk__21238_23888 = G__23900;
            count__21239_23889 = G__23901;
            i__21240_23890 = G__23902;
            continue;
          } else {
            var arg__5757__auto___23903 = cljs.core.first.call(null, seq__21237_23897__$1);
            a__5756__auto__.push(arg__5757__auto___23903);
            var G__23904 = cljs.core.next.call(null, seq__21237_23897__$1);
            var G__23905 = null;
            var G__23906 = 0;
            var G__23907 = 0;
            seq__21237_23887 = G__23904;
            chunk__21238_23888 = G__23905;
            count__21239_23889 = G__23906;
            i__21240_23890 = G__23907;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__5756__auto__);
  };
  var polygon = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23908__i = 0, G__23908__a = new Array(arguments.length - 0);
      while (G__23908__i < G__23908__a.length) {
        G__23908__a[G__23908__i] = arguments[G__23908__i + 0];
        ++G__23908__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23908__a, 0);
    }
    return polygon__delegate.call(this, args__5755__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__23909) {
    var args__5755__auto__ = cljs.core.seq(arglist__23909);
    return polygon__delegate(args__5755__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21245_23910 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21246_23911 = null;
    var count__21247_23912 = 0;
    var i__21248_23913 = 0;
    while (true) {
      if (i__21248_23913 < count__21247_23912) {
        var arg__5757__auto___23914 = cljs.core._nth.call(null, chunk__21246_23911, i__21248_23913);
        a__5756__auto__.push(arg__5757__auto___23914);
        var G__23915 = seq__21245_23910;
        var G__23916 = chunk__21246_23911;
        var G__23917 = count__21247_23912;
        var G__23918 = i__21248_23913 + 1;
        seq__21245_23910 = G__23915;
        chunk__21246_23911 = G__23916;
        count__21247_23912 = G__23917;
        i__21248_23913 = G__23918;
        continue;
      } else {
        var temp__4126__auto___23919 = cljs.core.seq.call(null, seq__21245_23910);
        if (temp__4126__auto___23919) {
          var seq__21245_23920__$1 = temp__4126__auto___23919;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21245_23920__$1)) {
            var c__5012__auto___23921 = cljs.core.chunk_first.call(null, seq__21245_23920__$1);
            var G__23922 = cljs.core.chunk_rest.call(null, seq__21245_23920__$1);
            var G__23923 = c__5012__auto___23921;
            var G__23924 = cljs.core.count.call(null, c__5012__auto___23921);
            var G__23925 = 0;
            seq__21245_23910 = G__23922;
            chunk__21246_23911 = G__23923;
            count__21247_23912 = G__23924;
            i__21248_23913 = G__23925;
            continue;
          } else {
            var arg__5757__auto___23926 = cljs.core.first.call(null, seq__21245_23920__$1);
            a__5756__auto__.push(arg__5757__auto___23926);
            var G__23927 = cljs.core.next.call(null, seq__21245_23920__$1);
            var G__23928 = null;
            var G__23929 = 0;
            var G__23930 = 0;
            seq__21245_23910 = G__23927;
            chunk__21246_23911 = G__23928;
            count__21247_23912 = G__23929;
            i__21248_23913 = G__23930;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__5756__auto__);
  };
  var polyline = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23931__i = 0, G__23931__a = new Array(arguments.length - 0);
      while (G__23931__i < G__23931__a.length) {
        G__23931__a[G__23931__i] = arguments[G__23931__i + 0];
        ++G__23931__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23931__a, 0);
    }
    return polyline__delegate.call(this, args__5755__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__23932) {
    var args__5755__auto__ = cljs.core.seq(arglist__23932);
    return polyline__delegate(args__5755__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21253_23933 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21254_23934 = null;
    var count__21255_23935 = 0;
    var i__21256_23936 = 0;
    while (true) {
      if (i__21256_23936 < count__21255_23935) {
        var arg__5757__auto___23937 = cljs.core._nth.call(null, chunk__21254_23934, i__21256_23936);
        a__5756__auto__.push(arg__5757__auto___23937);
        var G__23938 = seq__21253_23933;
        var G__23939 = chunk__21254_23934;
        var G__23940 = count__21255_23935;
        var G__23941 = i__21256_23936 + 1;
        seq__21253_23933 = G__23938;
        chunk__21254_23934 = G__23939;
        count__21255_23935 = G__23940;
        i__21256_23936 = G__23941;
        continue;
      } else {
        var temp__4126__auto___23942 = cljs.core.seq.call(null, seq__21253_23933);
        if (temp__4126__auto___23942) {
          var seq__21253_23943__$1 = temp__4126__auto___23942;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21253_23943__$1)) {
            var c__5012__auto___23944 = cljs.core.chunk_first.call(null, seq__21253_23943__$1);
            var G__23945 = cljs.core.chunk_rest.call(null, seq__21253_23943__$1);
            var G__23946 = c__5012__auto___23944;
            var G__23947 = cljs.core.count.call(null, c__5012__auto___23944);
            var G__23948 = 0;
            seq__21253_23933 = G__23945;
            chunk__21254_23934 = G__23946;
            count__21255_23935 = G__23947;
            i__21256_23936 = G__23948;
            continue;
          } else {
            var arg__5757__auto___23949 = cljs.core.first.call(null, seq__21253_23943__$1);
            a__5756__auto__.push(arg__5757__auto___23949);
            var G__23950 = cljs.core.next.call(null, seq__21253_23943__$1);
            var G__23951 = null;
            var G__23952 = 0;
            var G__23953 = 0;
            seq__21253_23933 = G__23950;
            chunk__21254_23934 = G__23951;
            count__21255_23935 = G__23952;
            i__21256_23936 = G__23953;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__5756__auto__);
  };
  var rect = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23954__i = 0, G__23954__a = new Array(arguments.length - 0);
      while (G__23954__i < G__23954__a.length) {
        G__23954__a[G__23954__i] = arguments[G__23954__i + 0];
        ++G__23954__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23954__a, 0);
    }
    return rect__delegate.call(this, args__5755__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__23955) {
    var args__5755__auto__ = cljs.core.seq(arglist__23955);
    return rect__delegate(args__5755__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__21261_23956 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__21262_23957 = null;
    var count__21263_23958 = 0;
    var i__21264_23959 = 0;
    while (true) {
      if (i__21264_23959 < count__21263_23958) {
        var arg__5757__auto___23960 = cljs.core._nth.call(null, chunk__21262_23957, i__21264_23959);
        a__5756__auto__.push(arg__5757__auto___23960);
        var G__23961 = seq__21261_23956;
        var G__23962 = chunk__21262_23957;
        var G__23963 = count__21263_23958;
        var G__23964 = i__21264_23959 + 1;
        seq__21261_23956 = G__23961;
        chunk__21262_23957 = G__23962;
        count__21263_23958 = G__23963;
        i__21264_23959 = G__23964;
        continue;
      } else {
        var temp__4126__auto___23965 = cljs.core.seq.call(null, seq__21261_23956);
        if (temp__4126__auto___23965) {
          var seq__21261_23966__$1 = temp__4126__auto___23965;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21261_23966__$1)) {
            var c__5012__auto___23967 = cljs.core.chunk_first.call(null, seq__21261_23966__$1);
            var G__23968 = cljs.core.chunk_rest.call(null, seq__21261_23966__$1);
            var G__23969 = c__5012__auto___23967;
            var G__23970 = cljs.core.count.call(null, c__5012__auto___23967);
            var G__23971 = 0;
            seq__21261_23956 = G__23968;
            chunk__21262_23957 = G__23969;
            count__21263_23958 = G__23970;
            i__21264_23959 = G__23971;
            continue;
          } else {
            var arg__5757__auto___23972 = cljs.core.first.call(null, seq__21261_23966__$1);
            a__5756__auto__.push(arg__5757__auto___23972);
            var G__23973 = cljs.core.next.call(null, seq__21261_23966__$1);
            var G__23974 = null;
            var G__23975 = 0;
            var G__23976 = 0;
            seq__21261_23956 = G__23973;
            chunk__21262_23957 = G__23974;
            count__21263_23958 = G__23975;
            i__21264_23959 = G__23976;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__5756__auto__);
  };
  var svg = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__23977__i = 0, G__23977__a = new Array(arguments.length - 0);
      while (G__23977__i < G__23977__a.length) {
        G__23977__a[G__23977__i] = arguments[G__23977__i + 0];
        ++G__23977__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__23977__a, 0);
    }
    return svg__delegate.call(this, args__5755__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__23978) {
    var args__5755__auto__ = cljs.core.seq(arglist__23978);
    return svg__delegate(args__5755__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__5755__auto__) {
    var a__5756__auto__ = [];
    a__5756__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5755__auto__)));
    var seq__20573_23979 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5755__auto__));
    var chunk__20574_23980 = null;
    var count__20575_23981 = 0;
    var i__20576_23982 = 0;
    while (true) {
      if (i__20576_23982 < count__20575_23981) {
        var arg__5757__auto___23983 = cljs.core._nth.call(null, chunk__20574_23980, i__20576_23982);
        a__5756__auto__.push(arg__5757__auto___23983);
        var G__23984 = seq__20573_23979;
        var G__23985 = chunk__20574_23980;
        var G__23986 = count__20575_23981;
        var G__23987 = i__20576_23982 + 1;
        seq__20573_23979 = G__23984;
        chunk__20574_23980 = G__23985;
        count__20575_23981 = G__23986;
        i__20576_23982 = G__23987;
        continue;
      } else {
        var temp__4126__auto___23988 = cljs.core.seq.call(null, seq__20573_23979);
        if (temp__4126__auto___23988) {
          var seq__20573_23989__$1 = temp__4126__auto___23988;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20573_23989__$1)) {
            var c__5012__auto___23990 = cljs.core.chunk_first.call(null, seq__20573_23989__$1);
            var G__23991 = cljs.core.chunk_rest.call(null, seq__20573_23989__$1);
            var G__23992 = c__5012__auto___23990;
            var G__23993 = cljs.core.count.call(null, c__5012__auto___23990);
            var G__23994 = 0;
            seq__20573_23979 = G__23991;
            chunk__20574_23980 = G__23992;
            count__20575_23981 = G__23993;
            i__20576_23982 = G__23994;
            continue;
          } else {
            var arg__5757__auto___23995 = cljs.core.first.call(null, seq__20573_23989__$1);
            a__5756__auto__.push(arg__5757__auto___23995);
            var G__23996 = cljs.core.next.call(null, seq__20573_23989__$1);
            var G__23997 = null;
            var G__23998 = 0;
            var G__23999 = 0;
            seq__20573_23979 = G__23996;
            chunk__20574_23980 = G__23997;
            count__20575_23981 = G__23998;
            i__20576_23982 = G__23999;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__5756__auto__);
  };
  var text = function(var_args) {
    var args__5755__auto__ = null;
    if (arguments.length > 0) {
      var G__24000__i = 0, G__24000__a = new Array(arguments.length - 0);
      while (G__24000__i < G__24000__a.length) {
        G__24000__a[G__24000__i] = arguments[G__24000__i + 0];
        ++G__24000__i;
      }
      args__5755__auto__ = new cljs.core.IndexedSeq(G__24000__a, 0);
    }
    return text__delegate.call(this, args__5755__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__24001) {
    var args__5755__auto__ = cljs.core.seq(arglist__24001);
    return text__delegate(args__5755__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
quiescent.dom.defined_tags = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "thead", "thead", -291875296), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "del", "del", 574975584), new cljs.core.Keyword(null, "fieldset", "fieldset", -1949770816), new cljs.core.Keyword(null, "q", "q", 689001697), new cljs.core.Keyword(null, "figure", "figure", -561394079), new cljs.core.Keyword(null, "aside", "aside", 1414397537), new cljs.core.Keyword(null, 
"figcaption", "figcaption", -1790122047), new cljs.core.Keyword(null, "video", "video", 156888130), new cljs.core.Keyword(null, "address", "address", 559499426), new cljs.core.Keyword(null, "caption", "caption", -855383902), new cljs.core.Keyword(null, "bdi", "bdi", -1323025886), new cljs.core.Keyword(null, "rp", "rp", 2006698083), new cljs.core.Keyword(null, "hr", "hr", 1377740067), new cljs.core.Keyword(null, "dd", "dd", -1340437629), new cljs.core.Keyword(null, "meta", "meta", 1499536964), new cljs.core.Keyword(null, 
"tbody", "tbody", -80678300), new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.Keyword(null, "pre", "pre", 2118456869), new cljs.core.Keyword(null, "sup", "sup", -2039492346), new cljs.core.Keyword(null, "script", "script", -1304443801), new cljs.core.Keyword(null, "big", "big", 903550151), new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.Keyword(null, "dfn", "dfn", 241908167), new cljs.core.Keyword(null, 
"sub", "sub", -2093760025), new cljs.core.Keyword(null, "mark", "mark", -373816345), new cljs.core.Keyword(null, "wbr", "wbr", 228661800), new cljs.core.Keyword(null, "strong", "strong", 269529E3), new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.Keyword(null, "dt", "dt", -368444759), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "th", "th", -545608566), new cljs.core.Keyword(null, "time", 
"time", 1385887882), new cljs.core.Keyword(null, "optgroup", "optgroup", 1738282218), new cljs.core.Keyword(null, "iframe", "iframe", 884422026), new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.Keyword(null, "circle", "circle", 1903212362), new cljs.core.Keyword(null, "article", "article", -21685045), new cljs.core.Keyword(null, "legend", "legend", -1027192245), new cljs.core.Keyword(null, "em", "em", 707813035), new cljs.core.Keyword(null, "kbd", "kbd", 316156875), new cljs.core.Keyword(null, 
"abbr", "abbr", 2088591884), new cljs.core.Keyword(null, "source", "source", -433931539), new cljs.core.Keyword(null, "output", "output", -1105869043), new cljs.core.Keyword(null, "ins", "ins", -1021983570), new cljs.core.Keyword(null, "footer", "footer", 1606445390), new cljs.core.Keyword(null, "header", "header", 119441134), new cljs.core.Keyword(null, "datalist", "datalist", -1235043474), new cljs.core.Keyword(null, "tfoot", "tfoot", -701599890), new cljs.core.Keyword(null, "s", "s", 1705939918), 
new cljs.core.Keyword(null, "h5", "h5", -1829156625), new cljs.core.Keyword(null, "canvas", "canvas", -1798817489), new cljs.core.Keyword(null, "param", "param", 2013631823), new cljs.core.Keyword(null, "title", "title", 636505583), new cljs.core.Keyword(null, "small", "small", 2133478704), new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.Keyword(null, "option", 
"option", 65132272), new cljs.core.Keyword(null, "summary", "summary", 380847952), new cljs.core.Keyword(null, "samp", "samp", 1506141136), new cljs.core.Keyword(null, "h4", "h4", 2004862993), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "g", "g", 1738089905), new cljs.core.Keyword(null, "ol", "ol", 932524051), new cljs.core.Keyword(null, "details", "details", 1956795411), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "var", 
"var", -769682797), new cljs.core.Keyword(null, "h6", "h6", 557293780), new cljs.core.Keyword(null, "link", "link", -1769163468), new cljs.core.Keyword(null, "col", "col", -1959363084), new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.Keyword(null, "rt", "rt", 623480692), new cljs.core.Keyword(null, "colgroup", "colgroup", 651118645), new cljs.core.Keyword(null, "meter", "meter", -187641611), new cljs.core.Keyword(null, "svg", "svg", 856789142), new cljs.core.Keyword(null, 
"code", "code", 1586293142), new cljs.core.Keyword(null, "bdo", "bdo", -2131148202), new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "noscript", "noscript", -704777289), new cljs.core.Keyword(null, "h2", "h2", -372662728), new cljs.core.Keyword(null, "area", "area", 472007256), new cljs.core.Keyword(null, "br", "br", 934104792), new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.Keyword(null, "audio", "audio", 1819127321), new cljs.core.Keyword(null, 
"input", "input", 556931961), new cljs.core.Keyword(null, "menuitem", "menuitem", 1004047353), new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.Keyword(null, "progress", "progress", 244323547), new cljs.core.Keyword(null, "main", "main", -2117802661), new cljs.core.Keyword(null, "embed", "embed", -1354913349), new cljs.core.Keyword(null, "h3", "h3", 2067611163), new cljs.core.Keyword(null, "body", "body", -2049205669), new cljs.core.Keyword(null, 
"keygen", "keygen", -571693253), new cljs.core.Keyword(null, "polyline", "polyline", -1731551044), new cljs.core.Keyword(null, "cite", "cite", 1909439996), new cljs.core.Keyword(null, "rect", "rect", -108902628), new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.Keyword(null, "nav", "nav", 719540477), new cljs.core.Keyword(null, "ruby", "ruby", 2000737661), new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "object", "object", 1474613949), new cljs.core.Keyword(null, 
"i", "i", -1386841315), new cljs.core.Keyword(null, "menu", "menu", 352255198), new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "dl", "dl", -2140151713), new cljs.core.Keyword(null, "select", "select", 1147833503), new cljs.core.Keyword(null, "polygon", "polygon", 837053759), new cljs.core.Keyword(null, "html", "html", -998796897), new cljs.core.Keyword(null, 
"text", "text", -1790561697), new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.Keyword(null, "track", "track", 195787487), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "u", "u", -1156634785)], [quiescent.dom.thead, quiescent.dom.path, quiescent.dom.del, quiescent.dom.fieldset, quiescent.dom.q, quiescent.dom.figure, quiescent.dom.aside, quiescent.dom.figcaption, quiescent.dom.video, quiescent.dom.address, quiescent.dom.caption, quiescent.dom.bdi, 
quiescent.dom.rp, quiescent.dom.hr, quiescent.dom.dd, quiescent.dom.meta, quiescent.dom.tbody, quiescent.dom.table, quiescent.dom.ul, quiescent.dom.pre, quiescent.dom.sup, quiescent.dom.script, quiescent.dom.big, quiescent.dom.button, quiescent.dom.dfn, quiescent.dom.sub, quiescent.dom.mark, quiescent.dom.wbr, quiescent.dom.strong, quiescent.dom.td, quiescent.dom.li, quiescent.dom.dt, quiescent.dom.section, quiescent.dom.th, quiescent.dom.time, quiescent.dom.optgroup, quiescent.dom.iframe, quiescent.dom.tr, 
quiescent.dom.circle, quiescent.dom.article, quiescent.dom.legend, quiescent.dom.em, quiescent.dom.kbd, quiescent.dom.abbr, quiescent.dom.source, quiescent.dom.output, quiescent.dom.ins, quiescent.dom.footer, quiescent.dom.header, quiescent.dom.datalist, quiescent.dom.tfoot, quiescent.dom.s, quiescent.dom.h5, quiescent.dom.canvas, quiescent.dom.param, quiescent.dom.title, quiescent.dom.small, quiescent.dom.style, quiescent.dom.textarea, quiescent.dom.div, quiescent.dom.option, quiescent.dom.summary, 
quiescent.dom.samp, quiescent.dom.h4, quiescent.dom.head, quiescent.dom.g, quiescent.dom.ol, quiescent.dom.details, quiescent.dom.line, quiescent.dom.var$, quiescent.dom.h6, quiescent.dom.link, quiescent.dom.col, quiescent.dom.label, quiescent.dom.rt, quiescent.dom.colgroup, quiescent.dom.meter, quiescent.dom.svg, quiescent.dom.code, quiescent.dom.bdo, quiescent.dom.b, quiescent.dom.noscript, quiescent.dom.h2, quiescent.dom.area, quiescent.dom.br, quiescent.dom.form, quiescent.dom.audio, quiescent.dom.input, 
quiescent.dom.menuitem, quiescent.dom.base, quiescent.dom.h1, quiescent.dom.progress, quiescent.dom.main, quiescent.dom.embed, quiescent.dom.h3, quiescent.dom.body, quiescent.dom.keygen, quiescent.dom.polyline, quiescent.dom.cite, quiescent.dom.rect, quiescent.dom.p, quiescent.dom.nav, quiescent.dom.ruby, quiescent.dom.map, quiescent.dom.object, quiescent.dom.i, quiescent.dom.menu, quiescent.dom.blockquote, quiescent.dom.img, quiescent.dom.a, quiescent.dom.dl, quiescent.dom.select, quiescent.dom.polygon, 
quiescent.dom.html, quiescent.dom.text, quiescent.dom.span, quiescent.dom.track, quiescent.dom.data, quiescent.dom.u]);
goog.provide("prone.ui.components.code_excerpt");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent");
prone.ui.components.code_excerpt.source_classes = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "clj", "clj", -660495428), "language-clojure", new cljs.core.Keyword(null, "java", "java", 1958249105), "language-java"], null);
prone.ui.components.code_excerpt.CodeExcerpt = quiescent.component.call(null, function(source_loc) {
  return quiescent.dom.header.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "trace_info clearfix"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "title"], null), quiescent.dom.h2.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "name"], null), (new cljs.core.Keyword(null, 
  "method-name", "method-name", 662660806)).cljs$core$IFn$_invoke$arity$1(source_loc)), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "location"], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "filename"], null), (new cljs.core.Keyword(null, "class-path-url", "class-path-url", -1839272882)).cljs$core$IFn$_invoke$arity$1(source_loc)))), 
  function() {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "source", "source", -433931539)).cljs$core$IFn$_invoke$arity$1(source_loc));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var source_code = temp__4124__auto__;
      return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "code_block clearfix"], null), quiescent.dom.pre.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "className", "className", -1983287057), "line-numbers code", new cljs.core.Keyword(null, "data-line", "data-line", -37851467), (new cljs.core.Keyword(null, "line-number", "line-number", -133688931)).cljs$core$IFn$_invoke$arity$1(source_loc), 
      new cljs.core.Keyword(null, "data-line-offset", "data-line-offset", 997715861), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "source", "source", -433931539)).cljs$core$IFn$_invoke$arity$1(source_loc))], null), quiescent.dom.code.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), prone.ui.components.code_excerpt.source_classes.call(null, (new cljs.core.Keyword(null, 
      "lang", "lang", -1819677104)).cljs$core$IFn$_invoke$arity$1(source_loc))], null), source_code)));
    } else {
      return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "source-failure"], null), (new cljs.core.Keyword(null, "failure", "failure", 720415879)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "source", "source", -433931539)).cljs$core$IFn$_invoke$arity$1(source_loc)));
    }
  }());
});
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__24061 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__24062 = cljs.core.next.call(null, coll__$1);
        sb = G__24061;
        coll__$1 = G__24062;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__24063 = sb;
        var G__24064 = coll__$2;
        sb = G__24063;
        coll__$1 = G__24064;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__24065 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__24065;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__24069 = cljs.core._EQ_;
    var expr__24070 = limit;
    if (cljs.core.truth_(pred__24069.call(null, 1, expr__24070))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__24069.call(null, 2, expr__24070))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__24072 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__24073 = limit__$1 - 1;
            var G__24074 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__24072;
            limit__$1 = G__24073;
            parts = G__24074;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__24075 = index - 1;
        index = G__24075;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___24076 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___24076)) {
        var replacement_24077 = temp__4124__auto___24076;
        buffer.append([cljs.core.str(replacement_24077)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__24078 = index + 1;
      index = G__24078;
      continue;
    }
    break;
  }
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      return outer.call(null, form);
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__24083) {
    var vec__24084 = p__24083;
    var k = cljs.core.nth.call(null, vec__24084, 0, null);
    var v = cljs.core.nth.call(null, vec__24084, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__24087) {
    var vec__24088 = p__24087;
    var k = cljs.core.nth.call(null, vec__24088, 0, null);
    var v = cljs.core.nth.call(null, vec__24088, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("prone.ui.components.map_browser");
goog.require("cljs.core");
goog.require("prone.ui.utils");
goog.require("quiescent");
goog.require("clojure.walk");
goog.require("cljs.core.async");
goog.require("quiescent.dom");
goog.require("clojure.string");
prone.ui.components.map_browser.inline_length_limit = 120;
prone.ui.components.map_browser.serialized_value_QMARK_ = function serialized_value_QMARK_(v) {
  return(new cljs.core.Keyword("prone.prep", "original-type", "prone.prep/original-type", 1899333685)).cljs$core$IFn$_invoke$arity$1(v);
};
prone.ui.components.map_browser.serialized_value_shorthand = function serialized_value_shorthand(v) {
  if (cljs.core.truth_(prone.ui.components.map_browser.serialized_value_QMARK_.call(null, v))) {
    return(new cljs.core.Keyword("prone.prep", "value", "prone.prep/value", 1870365234)).cljs$core$IFn$_invoke$arity$1(v);
  } else {
    return v;
  }
};
prone.ui.components.map_browser.serialized_value_with_type = function serialized_value_with_type(v) {
  if (cljs.core.truth_(prone.ui.components.map_browser.serialized_value_QMARK_.call(null, v))) {
    return[cljs.core.str((new cljs.core.Keyword("prone.prep", "value", "prone.prep/value", 1870365234)).cljs$core$IFn$_invoke$arity$1(v)), cljs.core.str("\x3c"), cljs.core.str((new cljs.core.Keyword("prone.prep", "original-type", "prone.prep/original-type", 1899333685)).cljs$core$IFn$_invoke$arity$1(v)), cljs.core.str("\x3e")].join("");
  } else {
    return v;
  }
};
prone.ui.components.map_browser.to_str = function to_str(v) {
  return cljs.core.pr_str.call(null, clojure.walk.prewalk.call(null, prone.ui.components.map_browser.serialized_value_shorthand, v));
};
prone.ui.components.map_browser.too_long_for_inline_QMARK_ = function too_long_for_inline_QMARK_(v) {
  return prone.ui.components.map_browser.inline_length_limit < cljs.core.pr_str.call(null, clojure.walk.prewalk.call(null, prone.ui.components.map_browser.serialized_value_with_type, v)).length;
};
prone.ui.components.map_browser.get_token_class = function get_token_class(v) {
  return[cljs.core.str("token "), cljs.core.str(typeof v === "string" ? "string" : typeof v === "number" ? "number" : v instanceof cljs.core.Keyword ? "operator" : null)].join("");
};
prone.ui.components.map_browser.ValueToken = quiescent.component.call(null, function(t) {
  return quiescent.dom.code.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), prone.ui.components.map_browser.get_token_class.call(null, t)], null), prone.ui.components.map_browser.to_str.call(null, t));
});
prone.ui.components.map_browser.SerializedValueToken = quiescent.component.call(null, function(t) {
  return quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, prone.ui.components.map_browser.InlineToken.call(null, (new cljs.core.Keyword("prone.prep", "value", "prone.prep/value", 1870365234)).cljs$core$IFn$_invoke$arity$1(t)), quiescent.dom.code.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "subtle"], null), "\x3c", (new cljs.core.Keyword("prone.prep", "original-type", "prone.prep/original-type", 1899333685)).cljs$core$IFn$_invoke$arity$1(t), 
  "\x3e"));
});
prone.ui.components.map_browser.format_inline_map = function format_inline_map(p__10815, navigate_request) {
  var vec__10817 = p__10815;
  var k = cljs.core.nth.call(null, vec__10817, 0, null);
  var v = cljs.core.nth.call(null, vec__10817, 1, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [prone.ui.components.map_browser.InlineToken.call(null, k, navigate_request), " ", prone.ui.components.map_browser.InlineToken.call(null, v, navigate_request)], null);
};
prone.ui.components.map_browser.InlineMapBrowser = quiescent.component.call(null, function(m, navigate_request) {
  var kv_pairs = cljs.core.mapcat.call(null, function(p1__10818_SHARP_) {
    return prone.ui.components.map_browser.format_inline_map.call(null, p1__10818_SHARP_, navigate_request);
  }, m);
  return cljs.core.apply.call(null, quiescent.dom.span, cljs.core.PersistentArrayMap.EMPTY, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["{"], null), cljs.core.interpose.call(null, " ", kv_pairs), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["}"], null)));
});
prone.ui.components.map_browser.format_list = function format_list(l, pre, post) {
  return cljs.core.apply.call(null, quiescent.dom.span, cljs.core.PersistentArrayMap.EMPTY, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre, cljs.core.interpose.call(null, " ", cljs.core.map.call(null, prone.ui.components.map_browser.InlineToken, l)), post], null)));
};
prone.ui.components.map_browser.InlineVectorBrowser = quiescent.component.call(null, function(v, navigate_request) {
  return prone.ui.components.map_browser.format_list.call(null, v, "[", "]");
});
prone.ui.components.map_browser.InlineListBrowser = quiescent.component.call(null, function(v, navigate_request) {
  return prone.ui.components.map_browser.format_list.call(null, v, "(", ")");
});
prone.ui.components.map_browser.InlineSetBrowser = quiescent.component.call(null, function(v, navigate_request) {
  return prone.ui.components.map_browser.format_list.call(null, v, "#{", "}");
});
prone.ui.components.map_browser.InlineToken = quiescent.component.call(null, function(t, navigate_request) {
  if (cljs.core.truth_(prone.ui.components.map_browser.serialized_value_QMARK_.call(null, t))) {
    return prone.ui.components.map_browser.SerializedValueToken.call(null, t);
  } else {
    if (cljs.core.map_QMARK_.call(null, t)) {
      return prone.ui.components.map_browser.InlineMapBrowser.call(null, t, navigate_request);
    } else {
      if (cljs.core.vector_QMARK_.call(null, t)) {
        return prone.ui.components.map_browser.InlineVectorBrowser.call(null, t, navigate_request);
      } else {
        if (cljs.core.list_QMARK_.call(null, t)) {
          return prone.ui.components.map_browser.InlineListBrowser.call(null, t, navigate_request);
        } else {
          if (cljs.core.set_QMARK_.call(null, t)) {
            return prone.ui.components.map_browser.InlineSetBrowser.call(null, t, navigate_request);
          } else {
            return prone.ui.components.map_browser.ValueToken.call(null, t);
          }
        }
      }
    }
  }
});
prone.ui.components.map_browser.browseworthy_map_QMARK_ = function browseworthy_map_QMARK_(m) {
  return cljs.core.map_QMARK_.call(null, m) && cljs.core.not.call(null, prone.ui.components.map_browser.serialized_value_QMARK_.call(null, m)) && prone.ui.components.map_browser.too_long_for_inline_QMARK_.call(null, m);
};
prone.ui.components.map_browser.browseworthy_list_QMARK_ = function browseworthy_list_QMARK_(t) {
  return(cljs.core.list_QMARK_.call(null, t) || cljs.core.vector_QMARK_.call(null, t)) && prone.ui.components.map_browser.too_long_for_inline_QMARK_.call(null, t);
};
prone.ui.components.map_browser.MapSummary = quiescent.component.call(null, function(k, ks, navigate_request) {
  var too_long_QMARK_ = prone.ui.components.map_browser.too_long_for_inline_QMARK_.call(null, ks);
  var linked_keys = too_long_QMARK_ ? [cljs.core.str(cljs.core.count.call(null, ks)), cljs.core.str(" keys")].join("") : cljs.core.interpose.call(null, " ", cljs.core.map.call(null, function(too_long_QMARK_) {
    return function(p1__10819_SHARP_) {
      return quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, prone.ui.components.map_browser.to_str.call(null, p1__10819_SHARP_));
    };
  }(too_long_QMARK_), ks));
  return quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, function(too_long_QMARK_, linked_keys) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, navigate_request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "concat", "concat", -2108183992), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)], null));
    };
  }(too_long_QMARK_, linked_keys))], null), cljs.core.apply.call(null, quiescent.dom.pre, cljs.core.PersistentArrayMap.EMPTY, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["{", linked_keys, "}"], null))));
});
prone.ui.components.map_browser.ListSummary = quiescent.component.call(null, function(k, v, navigate_request) {
  return quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, function() {
    return cljs.core.async.put_BANG_.call(null, navigate_request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "concat", "concat", -2108183992), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)], null));
  })], null), cljs.core.list_QMARK_.call(null, v) ? quiescent.dom.pre.call(null, cljs.core.PersistentArrayMap.EMPTY, "(", cljs.core.count.call(null, v), " items)") : cljs.core.vector_QMARK_.call(null, v) ? quiescent.dom.pre.call(null, cljs.core.PersistentArrayMap.EMPTY, "[", cljs.core.count.call(null, v), " items]") : null);
});
prone.ui.components.map_browser.MapEntry = quiescent.component.call(null, function(p__10820, navigate_request) {
  var vec__10821 = p__10820;
  var k = cljs.core.nth.call(null, vec__10821, 0, null);
  var v = cljs.core.nth.call(null, vec__10821, 1, null);
  return quiescent.dom.tr.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.td.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "name"], null), prone.ui.components.map_browser.InlineToken.call(null, k, navigate_request)), quiescent.dom.td.call(null, cljs.core.PersistentArrayMap.EMPTY, prone.ui.components.map_browser.browseworthy_map_QMARK_.call(null, v) ? prone.ui.components.map_browser.MapSummary.call(null, k, cljs.core.keys.call(null, 
  v), navigate_request) : prone.ui.components.map_browser.browseworthy_list_QMARK_.call(null, v) ? prone.ui.components.map_browser.ListSummary.call(null, k, v, navigate_request) : prone.ui.components.map_browser.InlineToken.call(null, v, navigate_request)));
});
prone.ui.components.map_browser.MapPath = quiescent.component.call(null, function(path, navigate_request) {
  var paths = cljs.core.map.call(null, function(p1__10822_SHARP_) {
    return cljs.core.take.call(null, p1__10822_SHARP_ + 1, path);
  }, cljs.core.range.call(null, cljs.core.count.call(null, path)));
  return cljs.core.apply.call(null, quiescent.dom.span, cljs.core.PersistentArrayMap.EMPTY, cljs.core.interpose.call(null, " ", cljs.core.conj.call(null, cljs.core.mapv.call(null, function(paths) {
    return function(p1__10823_SHARP_) {
      return quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, function(paths) {
        return function() {
          return cljs.core.async.put_BANG_.call(null, navigate_request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reset", "reset", -800929946), p1__10823_SHARP_], null));
        };
      }(paths))], null), prone.ui.components.map_browser.to_str.call(null, cljs.core.last.call(null, p1__10823_SHARP_)));
    };
  }(paths), cljs.core.butlast.call(null, paths)), function() {
    var temp__4126__auto__ = cljs.core.last.call(null, cljs.core.last.call(null, paths));
    if (cljs.core.truth_(temp__4126__auto__)) {
      var curr = temp__4126__auto__;
      return prone.ui.components.map_browser.to_str.call(null, curr);
    } else {
      return null;
    }
  }())));
});
prone.ui.components.map_browser.MapBrowser = quiescent.component.call(null, function(p__10827, navigate_request) {
  var map__10828 = p__10827;
  var map__10828__$1 = cljs.core.seq_QMARK_.call(null, map__10828) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10828) : map__10828;
  var path = cljs.core.get.call(null, map__10828__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var data = cljs.core.get.call(null, map__10828__$1, new cljs.core.Keyword(null, "data", "data", -232669377));
  var name = cljs.core.get.call(null, map__10828__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  return quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.h3.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "map-path"], null), cljs.core.empty_QMARK_.call(null, path) ? name : quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, 
  function(map__10828, map__10828__$1, path, data, name) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, navigate_request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reset", "reset", -800929946), cljs.core.PersistentVector.EMPTY], null));
    };
  }(map__10828, map__10828__$1, path, data, name))], null), name), " ", prone.ui.components.map_browser.MapPath.call(null, path, navigate_request)), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "inset variables"], null), quiescent.dom.table.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "var_table"], null), cljs.core.apply.call(null, 
  quiescent.dom.tbody, cljs.core.PersistentArrayMap.EMPTY, function() {
    var view = prone.ui.utils.get_in_STAR_.call(null, data, path);
    if (cljs.core.map_QMARK_.call(null, view)) {
      return cljs.core.map.call(null, function(view, map__10828, map__10828__$1, path, data, name) {
        return function(p1__10824_SHARP_) {
          return prone.ui.components.map_browser.MapEntry.call(null, p1__10824_SHARP_, navigate_request);
        };
      }(view, map__10828, map__10828__$1, path, data, name), cljs.core.sort.call(null, view));
    } else {
      return cljs.core.map_indexed.call(null, function(view, map__10828, map__10828__$1, path, data, name) {
        return function(p1__10825_SHARP_, p2__10826_SHARP_) {
          return prone.ui.components.map_browser.MapEntry.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10825_SHARP_, p2__10826_SHARP_], null), navigate_request);
        };
      }(view, map__10828, map__10828__$1, path, data, name), view);
    }
  }()))));
});
goog.provide("prone.ui.components.source_location");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("prone.ui.utils");
goog.require("cljs.core.async");
prone.ui.components.source_location.SourceLocation = quiescent.component.call(null, function(p__10831, select_src_loc) {
  var map__10832 = p__10831;
  var map__10832__$1 = cljs.core.seq_QMARK_.call(null, map__10832) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10832) : map__10832;
  var selected_QMARK_ = cljs.core.get.call(null, map__10832__$1, new cljs.core.Keyword(null, "selected?", "selected?", -742502788));
  var src_loc = cljs.core.get.call(null, map__10832__$1, new cljs.core.Keyword(null, "src-loc", "src-loc", -1864306810));
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), cljs.core.truth_(selected_QMARK_) ? "selected" : null, new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, function(map__10832, map__10832__$1, selected_QMARK_, src_loc) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, select_src_loc, src_loc);
    };
  }(map__10832, map__10832__$1, selected_QMARK_, src_loc))], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "stroke"], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), cljs.core.truth_((new cljs.core.Keyword(null, "application?", "application?", 1548365967)).cljs$core$IFn$_invoke$arity$1(src_loc)) ? 
  "icon application" : "icon"], null)), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "info"], null), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "lang", "lang", -1819677104)).cljs$core$IFn$_invoke$arity$1(src_loc), new cljs.core.Keyword(null, "clj", "clj", -660495428)) ? quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 
  -1983287057), "name"], null), quiescent.dom.strong.call(null, cljs.core.PersistentArrayMap.EMPTY, (new cljs.core.Keyword(null, "package", "package", 1189062786)).cljs$core$IFn$_invoke$arity$1(src_loc)), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "method"], null), "/", (new cljs.core.Keyword(null, "method-name", "method-name", 662660806)).cljs$core$IFn$_invoke$arity$1(src_loc))) : quiescent.dom.div.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "name"], null), quiescent.dom.strong.call(null, cljs.core.PersistentArrayMap.EMPTY, (new cljs.core.Keyword(null, "package", "package", 1189062786)).cljs$core$IFn$_invoke$arity$1(src_loc), ".", (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(src_loc)), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "method"], null), "$", (new cljs.core.Keyword(null, "method-name", "method-name", 662660806)).cljs$core$IFn$_invoke$arity$1(src_loc))), cljs.core.truth_((new cljs.core.Keyword(null, "file-name", "file-name", -1654217259)).cljs$core$IFn$_invoke$arity$1(src_loc)) ? quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "location"], null), (new cljs.core.Keyword(null, "loaded-from", 
  "loaded-from", -281149057)).cljs$core$IFn$_invoke$arity$1(src_loc), " ", quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "filename"], null), (new cljs.core.Keyword(null, "file-name", "file-name", -1654217259)).cljs$core$IFn$_invoke$arity$1(src_loc)), ", line ", quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "line"], 
  null), (new cljs.core.Keyword(null, "line-number", "line-number", -133688931)).cljs$core$IFn$_invoke$arity$1(src_loc))) : quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "location"], null), "(unknown file)"))));
});
goog.provide("prone.ui.components.app");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("prone.ui.utils");
goog.require("prone.ui.components.code_excerpt");
goog.require("prone.ui.components.source_location");
goog.require("prone.ui.components.map_browser");
goog.require("cljs.core.async");
prone.ui.components.app.ErrorHeader = quiescent.component.call(null, function(p__10799, chans) {
  var map__10800 = p__10799;
  var map__10800__$1 = cljs.core.seq_QMARK_.call(null, map__10800) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10800) : map__10800;
  var paths = cljs.core.get.call(null, map__10800__$1, new cljs.core.Keyword(null, "paths", "paths", -1807389588));
  var request = cljs.core.get.call(null, map__10800__$1, new cljs.core.Keyword(null, "request", "request", 1772954723));
  var error = cljs.core.get.call(null, map__10800__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  return quiescent.dom.header.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "exception"], null), quiescent.dom.h2.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.strong.call(null, cljs.core.PersistentArrayMap.EMPTY, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(error)), quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, " at ", (new cljs.core.Keyword(null, 
  "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(request)), cljs.core.truth_(function() {
    var or__4225__auto__ = (new cljs.core.Keyword(null, "caused-by", "caused-by", 1696165692)).cljs$core$IFn$_invoke$arity$1(error);
    if (cljs.core.truth_(or__4225__auto__)) {
      return or__4225__auto__;
    } else {
      return cljs.core.seq.call(null, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(paths));
    }
  }()) ? quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "caused-by"], null), cljs.core.seq.call(null, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(paths)) ? quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, 
  function(map__10800, map__10800__$1, paths, request, error) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "navigate-data", "navigate-data", -655137664)).cljs$core$IFn$_invoke$arity$1(chans), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reset", "reset", -800929946), cljs.core.butlast.call(null, (new cljs.core.Keyword(null, 
      "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(paths))], null)], null));
    };
  }(map__10800, map__10800__$1, paths, request, error))], null), "\x3c back") : null, function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "caused-by", "caused-by", 1696165692)).cljs$core$IFn$_invoke$arity$1(error);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var caused_by = temp__4126__auto__;
      return quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, " Caused by ", quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, function(caused_by, temp__4126__auto__, map__10800, map__10800__$1, paths, request, error) {
        return function() {
          return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "navigate-data", "navigate-data", -655137664)).cljs$core$IFn$_invoke$arity$1(chans), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "concat", "concat", -2108183992), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
          [new cljs.core.Keyword(null, "caused-by", "caused-by", 1696165692)], null)], null)], null));
        };
      }(caused_by, temp__4126__auto__, map__10800, map__10800__$1, paths, request, error))], null), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(caused_by)));
    } else {
      return null;
    }
  }()) : null), quiescent.dom.p.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var or__4225__auto__ = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(error);
    if (cljs.core.truth_(or__4225__auto__)) {
      return or__4225__auto__;
    } else {
      return quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, (new cljs.core.Keyword(null, "class-name", "class-name", 945142584)).cljs$core$IFn$_invoke$arity$1(error), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "subtle"], null), " [no message]"));
    }
  }()));
});
prone.ui.components.app.DebugHeader = quiescent.component.call(null, function(p__10801, chans) {
  var map__10802 = p__10801;
  var map__10802__$1 = cljs.core.seq_QMARK_.call(null, map__10802) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10802) : map__10802;
  var request = cljs.core.get.call(null, map__10802__$1, new cljs.core.Keyword(null, "request", "request", 1772954723));
  return quiescent.dom.header.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "exception"], null), quiescent.dom.h2.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, "Tired of seeing this page? Remove calls to ", "prone.debug/debug - and stop causing exceptions")), quiescent.dom.p.call(null, cljs.core.PersistentArrayMap.EMPTY, "Halted for debugging"));
});
prone.ui.components.app.Header = quiescent.component.call(null, function(data, chans) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(data))) {
    return prone.ui.components.app.ErrorHeader.call(null, data, chans);
  } else {
    return prone.ui.components.app.DebugHeader.call(null, data, chans);
  }
});
prone.ui.components.app.SourceLocLink = quiescent.component.call(null, function(src_loc_selection, target, name, chans) {
  return quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), cljs.core._EQ_.call(null, target, src_loc_selection) ? "selected" : null, new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), prone.ui.utils.action.call(null, function() {
    return cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "change-src-loc-selection", "change-src-loc-selection", 21427056)).cljs$core$IFn$_invoke$arity$1(chans), target);
  })], null), name);
});
prone.ui.components.app.Sidebar = quiescent.component.call(null, function(p__10804, chans) {
  var map__10805 = p__10804;
  var map__10805__$1 = cljs.core.seq_QMARK_.call(null, map__10805) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10805) : map__10805;
  var active_src_locs = cljs.core.get.call(null, map__10805__$1, new cljs.core.Keyword(null, "active-src-locs", "active-src-locs", 862526734));
  var debug_data = cljs.core.get.call(null, map__10805__$1, new cljs.core.Keyword(null, "debug-data", "debug-data", -1799575218));
  var selected_src_loc = cljs.core.get.call(null, map__10805__$1, new cljs.core.Keyword(null, "selected-src-loc", "selected-src-loc", 479424332));
  var src_loc_selection = cljs.core.get.call(null, map__10805__$1, new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678));
  var error = cljs.core.get.call(null, map__10805__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  return quiescent.dom.nav.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "sidebar"], null), quiescent.dom.nav.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "tabs"], null), cljs.core.truth_(error) ? prone.ui.components.app.SourceLocLink.call(null, src_loc_selection, new cljs.core.Keyword(null, "application", "application", 551185447), "Application Frames", 
  chans) : null, cljs.core.truth_(error) ? prone.ui.components.app.SourceLocLink.call(null, src_loc_selection, new cljs.core.Keyword(null, "all", "all", 892129742), "All Frames", chans) : null, cljs.core.seq.call(null, debug_data) ? prone.ui.components.app.SourceLocLink.call(null, src_loc_selection, new cljs.core.Keyword(null, "debug", "debug", -1608172596), "Debug Calls", chans) : null), cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "frames", new cljs.core.Keyword(null, "id", "id", -1388402092), "frames"], null), cljs.core.map.call(null, function(map__10805, map__10805__$1, active_src_locs, debug_data, selected_src_loc, src_loc_selection, error) {
    return function(p1__10803_SHARP_) {
      return prone.ui.components.source_location.SourceLocation.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src-loc", "src-loc", -1864306810), p1__10803_SHARP_, new cljs.core.Keyword(null, "selected?", "selected?", -742502788), cljs.core._EQ_.call(null, p1__10803_SHARP_, selected_src_loc)], null), (new cljs.core.Keyword(null, "select-src-loc", "select-src-loc", 142593136)).cljs$core$IFn$_invoke$arity$1(chans));
    };
  }(map__10805, map__10805__$1, active_src_locs, debug_data, selected_src_loc, src_loc_selection, error), active_src_locs)));
});
prone.ui.components.app.Body = quiescent.component.call(null, function(p__10807, p__10808) {
  var map__10809 = p__10807;
  var map__10809__$1 = cljs.core.seq_QMARK_.call(null, map__10809) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10809) : map__10809;
  var data = map__10809__$1;
  var browsables = cljs.core.get.call(null, map__10809__$1, new cljs.core.Keyword(null, "browsables", "browsables", -1660385559));
  var paths = cljs.core.get.call(null, map__10809__$1, new cljs.core.Keyword(null, "paths", "paths", -1807389588));
  var error = cljs.core.get.call(null, map__10809__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var debug_data = cljs.core.get.call(null, map__10809__$1, new cljs.core.Keyword(null, "debug-data", "debug-data", -1799575218));
  var selected_src_loc = cljs.core.get.call(null, map__10809__$1, new cljs.core.Keyword(null, "selected-src-loc", "selected-src-loc", 479424332));
  var src_loc_selection = cljs.core.get.call(null, map__10809__$1, new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678));
  var map__10810 = p__10808;
  var map__10810__$1 = cljs.core.seq_QMARK_.call(null, map__10810) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10810) : map__10810;
  var navigate_data = cljs.core.get.call(null, map__10810__$1, new cljs.core.Keyword(null, "navigate-data", "navigate-data", -655137664));
  var debugging_QMARK_ = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "debug", "debug", -1608172596), src_loc_selection);
  var local_browsables = (new cljs.core.Keyword(null, "browsables", "browsables", -1660385559)).cljs$core$IFn$_invoke$arity$1(debugging_QMARK_ ? selected_src_loc : error);
  var heading = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "debug", "debug", -1608172596), src_loc_selection) ? (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(debug_data) : null;
  return cljs.core.apply.call(null, quiescent.dom.div, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "frame_info", new cljs.core.Keyword(null, "id", "id", -1388402092), "frame-info"], null), prone.ui.components.code_excerpt.CodeExcerpt.call(null, selected_src_loc), cljs.core.truth_(heading) ? quiescent.dom.h2.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "sub-heading"], 
  null), heading) : null, cljs.core.map.call(null, function(debugging_QMARK_, local_browsables, heading, map__10809, map__10809__$1, data, browsables, paths, error, debug_data, selected_src_loc, src_loc_selection, map__10810, map__10810__$1, navigate_data) {
    return function(p1__10806_SHARP_) {
      return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "sub"], null), prone.ui.components.map_browser.MapBrowser.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "data", "data", -232669377), (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(p1__10806_SHARP_), new cljs.core.Keyword(null, "path", "path", -188191168), cljs.core.get.call(null, 
      paths, p1__10806_SHARP_), new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p1__10806_SHARP_)], null), cljs.core.async.map_GT_.call(null, function(debugging_QMARK_, local_browsables, heading, map__10809, map__10809__$1, data, browsables, paths, error, debug_data, selected_src_loc, src_loc_selection, map__10810, map__10810__$1, navigate_data) {
        return function(v) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10806_SHARP_, v], null);
        };
      }(debugging_QMARK_, local_browsables, heading, map__10809, map__10809__$1, data, browsables, paths, error, debug_data, selected_src_loc, src_loc_selection, map__10810, map__10810__$1, navigate_data), navigate_data)));
    };
  }(debugging_QMARK_, local_browsables, heading, map__10809, map__10809__$1, data, browsables, paths, error, debug_data, selected_src_loc, src_loc_selection, map__10810, map__10810__$1, navigate_data), cljs.core.concat.call(null, local_browsables, browsables)));
});
prone.ui.components.app.ProneUI = quiescent.component.call(null, function(data, chans) {
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "top"], null), prone.ui.components.app.Header.call(null, data, chans), quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "backtrace"], null), prone.ui.components.app.Sidebar.call(null, data, chans), prone.ui.components.app.Body.call(null, data, chans)));
});
goog.provide("prone.ui.main");
goog.require("cljs.core");
goog.require("quiescent");
goog.require("prone.ui.utils");
goog.require("prone.ui.components.app");
goog.require("clojure.string");
goog.require("cljs.core.async");
prone.ui.main.code_excerpt_changed_QMARK_ = function code_excerpt_changed_QMARK_(old, new$) {
  return cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "selected-src-locs", "selected-src-locs", -2142178168)).cljs$core$IFn$_invoke$arity$1(new$), (new cljs.core.Keyword(null, "selected-src-locs", "selected-src-locs", -2142178168)).cljs$core$IFn$_invoke$arity$1(old)) || cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678)).cljs$core$IFn$_invoke$arity$1(new$), (new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 
  89044678)).cljs$core$IFn$_invoke$arity$1(old));
};
prone.ui.main.get_active_src_locs = function get_active_src_locs(p__10835) {
  var map__10838 = p__10835;
  var map__10838__$1 = cljs.core.seq_QMARK_.call(null, map__10838) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10838) : map__10838;
  var debug_data = cljs.core.get.call(null, map__10838__$1, new cljs.core.Keyword(null, "debug-data", "debug-data", -1799575218));
  var src_loc_selection = cljs.core.get.call(null, map__10838__$1, new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678));
  var error = cljs.core.get.call(null, map__10838__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var G__10839 = src_loc_selection instanceof cljs.core.Keyword ? src_loc_selection.fqn : null;
  switch(G__10839) {
    case "debug":
      return debug_data;
      break;
    case "application":
      return cljs.core.filter.call(null, new cljs.core.Keyword(null, "application?", "application?", 1548365967), (new cljs.core.Keyword(null, "frames", "frames", 1765687497)).cljs$core$IFn$_invoke$arity$1(error));
      break;
    case "all":
      return(new cljs.core.Keyword(null, "frames", "frames", 1765687497)).cljs$core$IFn$_invoke$arity$1(error);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(src_loc_selection)].join(""));;
  }
};
prone.ui.main.select_current_error_in_chain = function select_current_error_in_chain(data) {
  return cljs.core.update_in.call(null, data, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", -978969032)], null), function(p1__10841_SHARP_) {
    return cljs.core.get_in.call(null, p1__10841_SHARP_, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "paths", "paths", -1807389588)).cljs$core$IFn$_invoke$arity$1(data)));
  });
};
prone.ui.main.prepare_data_for_display = function prepare_data_for_display(data) {
  var data__$1 = prone.ui.main.select_current_error_in_chain.call(null, data);
  return cljs.core.assoc.call(null, cljs.core.assoc.call(null, data__$1, new cljs.core.Keyword(null, "active-src-locs", "active-src-locs", 862526734), prone.ui.main.get_active_src_locs.call(null, data__$1)), new cljs.core.Keyword(null, "selected-src-loc", "selected-src-loc", 479424332), cljs.core.get_in.call(null, data__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selected-src-locs", "selected-src-locs", -2142178168), (new cljs.core.Keyword(null, 
  "src-loc-selection", "src-loc-selection", 89044678)).cljs$core$IFn$_invoke$arity$1(data__$1)], null)));
};
prone.ui.main.handle_data_change = function handle_data_change(chans, key, ref, old, new$) {
  quiescent.render.call(null, prone.ui.components.app.ProneUI.call(null, prone.ui.main.prepare_data_for_display.call(null, new$), chans), document.getElementById("ui-root"));
  if (prone.ui.main.code_excerpt_changed_QMARK_.call(null, old, new$)) {
    Prism.highlightAll();
    return document.getElementById("frame-info").scrollTop = 0;
  } else {
    return null;
  }
};
prone.ui.main.navigate_data = function navigate_data(data, p__10843) {
  var vec__10847 = p__10843;
  var path_key = cljs.core.nth.call(null, vec__10847, 0, null);
  var vec__10848 = cljs.core.nth.call(null, vec__10847, 1, null);
  var nav_type = cljs.core.nth.call(null, vec__10848, 0, null);
  var path = cljs.core.nth.call(null, vec__10848, 1, null);
  var G__10849 = nav_type instanceof cljs.core.Keyword ? nav_type.fqn : null;
  switch(G__10849) {
    case "reset":
      return cljs.core.assoc_in.call(null, data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "paths", "paths", -1807389588), path_key], null), path);
      break;
    case "concat":
      return cljs.core.update_in.call(null, data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "paths", "paths", -1807389588), path_key], null), function(G__10849, vec__10847, path_key, vec__10848, nav_type, path) {
        return function(p1__10842_SHARP_) {
          return cljs.core.concat.call(null, p1__10842_SHARP_, path);
        };
      }(G__10849, vec__10847, path_key, vec__10848, nav_type, path));
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(nav_type)].join(""));;
  }
};
prone.ui.main.on_msg = function on_msg(chan, handler) {
  var c__8013__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8013__auto__) {
    return function() {
      var f__8014__auto__ = function() {
        var switch__7957__auto__ = function(c__8013__auto__) {
          return function(state_10892) {
            var state_val_10893 = state_10892[1];
            if (state_val_10893 === 7) {
              var inst_10888 = state_10892[2];
              var state_10892__$1 = state_10892;
              var statearr_10894_10909 = state_10892__$1;
              statearr_10894_10909[2] = inst_10888;
              statearr_10894_10909[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10893 === 6) {
                var state_10892__$1 = state_10892;
                var statearr_10895_10910 = state_10892__$1;
                statearr_10895_10910[2] = null;
                statearr_10895_10910[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10893 === 5) {
                  var inst_10882 = state_10892[7];
                  var inst_10884 = handler.call(null, inst_10882);
                  var state_10892__$1 = function() {
                    var statearr_10896 = state_10892;
                    statearr_10896[8] = inst_10884;
                    return statearr_10896;
                  }();
                  var statearr_10897_10911 = state_10892__$1;
                  statearr_10897_10911[2] = null;
                  statearr_10897_10911[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10893 === 4) {
                    var inst_10882 = state_10892[7];
                    var inst_10882__$1 = state_10892[2];
                    var state_10892__$1 = function() {
                      var statearr_10898 = state_10892;
                      statearr_10898[7] = inst_10882__$1;
                      return statearr_10898;
                    }();
                    if (cljs.core.truth_(inst_10882__$1)) {
                      var statearr_10899_10912 = state_10892__$1;
                      statearr_10899_10912[1] = 5;
                    } else {
                      var statearr_10900_10913 = state_10892__$1;
                      statearr_10900_10913[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10893 === 3) {
                      var inst_10890 = state_10892[2];
                      var state_10892__$1 = state_10892;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10892__$1, inst_10890);
                    } else {
                      if (state_val_10893 === 2) {
                        var state_10892__$1 = state_10892;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10892__$1, 4, chan);
                      } else {
                        if (state_val_10893 === 1) {
                          var state_10892__$1 = state_10892;
                          var statearr_10901_10914 = state_10892__$1;
                          statearr_10901_10914[2] = null;
                          statearr_10901_10914[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8013__auto__);
        return function(switch__7957__auto__, c__8013__auto__) {
          return function() {
            var state_machine__7958__auto__ = null;
            var state_machine__7958__auto____0 = function() {
              var statearr_10905 = [null, null, null, null, null, null, null, null, null];
              statearr_10905[0] = state_machine__7958__auto__;
              statearr_10905[1] = 1;
              return statearr_10905;
            };
            var state_machine__7958__auto____1 = function(state_10892) {
              while (true) {
                var ret_value__7959__auto__ = function() {
                  try {
                    while (true) {
                      var result__7960__auto__ = switch__7957__auto__.call(null, state_10892);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7960__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7960__auto__;
                      }
                      break;
                    }
                  } catch (e10906) {
                    if (e10906 instanceof Object) {
                      var ex__7961__auto__ = e10906;
                      var statearr_10907_10915 = state_10892;
                      statearr_10907_10915[5] = ex__7961__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10892);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10906;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7959__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10916 = state_10892;
                  state_10892 = G__10916;
                  continue;
                } else {
                  return ret_value__7959__auto__;
                }
                break;
              }
            };
            state_machine__7958__auto__ = function(state_10892) {
              switch(arguments.length) {
                case 0:
                  return state_machine__7958__auto____0.call(this);
                case 1:
                  return state_machine__7958__auto____1.call(this, state_10892);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__7958__auto____0;
            state_machine__7958__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__7958__auto____1;
            return state_machine__7958__auto__;
          }();
        }(switch__7957__auto__, c__8013__auto__);
      }();
      var state__8015__auto__ = function() {
        var statearr_10908 = f__8014__auto__.call(null);
        statearr_10908[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8013__auto__;
        return statearr_10908;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8015__auto__);
    };
  }(c__8013__auto__));
  return c__8013__auto__;
};
prone.ui.main.select_src_loc = function select_src_loc(data, selection) {
  return cljs.core.assoc_in.call(null, data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selected-src-locs", "selected-src-locs", -2142178168), (new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678)).cljs$core$IFn$_invoke$arity$1(data)], null), selection);
};
prone.ui.main.ensure_selected_src_loc = function ensure_selected_src_loc(data) {
  if (cljs.core.truth_(cljs.core.get_in.call(null, data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "selected-src-locs", "selected-src-locs", -2142178168), (new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678)).cljs$core$IFn$_invoke$arity$1(data)], null)))) {
    return data;
  } else {
    return prone.ui.main.select_src_loc.call(null, data, cljs.core.first.call(null, prone.ui.main.get_active_src_locs.call(null, data)));
  }
};
prone.ui.main.change_src_loc_selection = function change_src_loc_selection(data, selection) {
  return prone.ui.main.ensure_selected_src_loc.call(null, cljs.core.assoc.call(null, data, new cljs.core.Keyword(null, "src-loc-selection", "src-loc-selection", 89044678), selection));
};
prone.ui.main.initialize_data = function initialize_data(data) {
  return prone.ui.main.ensure_selected_src_loc.call(null, data);
};
prone.ui.main.bootstrap_BANG_ = function bootstrap_BANG_(data) {
  var chans = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "change-src-loc-selection", "change-src-loc-selection", 21427056), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "select-src-loc", "select-src-loc", 142593136), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "navigate-request", "navigate-request", 2048421500), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "navigate-data", "navigate-data", -655137664), cljs.core.async.chan.call(null), 
  new cljs.core.Keyword(null, "navigate-error", "navigate-error", 600678411), cljs.core.async.chan.call(null)], null);
  var prone_data = cljs.core.atom.call(null, null);
  prone.ui.main.on_msg.call(null, (new cljs.core.Keyword(null, "select-src-loc", "select-src-loc", 142593136)).cljs$core$IFn$_invoke$arity$1(chans), function(chans, prone_data) {
    return function(p1__10917_SHARP_) {
      return cljs.core.swap_BANG_.call(null, prone_data, prone.ui.main.select_src_loc, p1__10917_SHARP_);
    };
  }(chans, prone_data));
  prone.ui.main.on_msg.call(null, (new cljs.core.Keyword(null, "change-src-loc-selection", "change-src-loc-selection", 21427056)).cljs$core$IFn$_invoke$arity$1(chans), function(chans, prone_data) {
    return function(p1__10918_SHARP_) {
      return cljs.core.swap_BANG_.call(null, prone_data, prone.ui.main.change_src_loc_selection, p1__10918_SHARP_);
    };
  }(chans, prone_data));
  prone.ui.main.on_msg.call(null, (new cljs.core.Keyword(null, "navigate-data", "navigate-data", -655137664)).cljs$core$IFn$_invoke$arity$1(chans), function(chans, prone_data) {
    return function(p1__10919_SHARP_) {
      return cljs.core.swap_BANG_.call(null, prone_data, prone.ui.main.navigate_data, p1__10919_SHARP_);
    };
  }(chans, prone_data));
  cljs.core.add_watch.call(null, prone_data, new cljs.core.Keyword(null, "state-change", "state-change", -496627942), cljs.core.partial.call(null, prone.ui.main.handle_data_change, chans));
  return cljs.core.reset_BANG_.call(null, prone_data, prone.ui.main.initialize_data.call(null, data));
};
prone.ui.main.unescape_script_tags = function unescape_script_tags(s) {
  var script_replacement_string = document.getElementById("script-replacement-string").value;
  return clojure.string.replace.call(null, s, script_replacement_string, "script");
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj24092 = {};
  return obj24092;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__4213__auto__ = reader;
    if (and__4213__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4869__auto__ = reader == null ? null : reader;
    return function() {
      var or__4225__auto__ = cljs.reader.read_char[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.reader.read_char["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__4213__auto__ = reader;
    if (and__4213__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4213__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4869__auto__ = reader == null ? null : reader;
    return function() {
      var or__4225__auto__ = cljs.reader.unread[goog.typeOf(x__4869__auto__)];
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.reader.unread["_"];
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4812__auto__, writer__4813__auto__, opt__4814__auto__) {
  return cljs.core._write.call(null, writer__4813__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__4225__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4225__auto__)) {
    return or__4225__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__24093__i = 0, G__24093__a = new Array(arguments.length - 1);
      while (G__24093__i < G__24093__a.length) {
        G__24093__a[G__24093__i] = arguments[G__24093__i + 1];
        ++G__24093__i;
      }
      msg = new cljs.core.IndexedSeq(G__24093__a, 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__24094) {
    var rdr = cljs.core.first(arglist__24094);
    var msg = cljs.core.rest(arglist__24094);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__4213__auto__ = !(ch === "#");
  if (and__4213__auto__) {
    var and__4213__auto____$1 = !(ch === "'");
    if (and__4213__auto____$1) {
      var and__4213__auto____$2 = !(ch === ":");
      if (and__4213__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4213__auto____$2;
      }
    } else {
      return and__4213__auto____$1;
    }
  } else {
    return and__4213__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__24095 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__24096 = cljs.reader.read_char.call(null, rdr);
      sb = G__24095;
      ch = G__24096;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__24097 = cljs.reader.read_char.call(null, rdr);
      ch = G__24097;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__24098 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__24098;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__24099 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__24099;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4225__auto__ = ch == null;
      if (or__4225__auto__) {
        return or__4225__auto__;
      } else {
        var or__4225__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4225__auto____$1) {
          return or__4225__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4225__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__24100 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__24101 = cljs.reader.read_char.call(null, reader);
      buffer = G__24100;
      ch = G__24101;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__24102 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__24103 = cljs.reader.read_char.call(null, reader);
        buffer = G__24102;
        ch = G__24103;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__24104 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__24105 = cljs.reader.read_char.call(null, reader);
          buffer = G__24104;
          ch = G__24105;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__24110 = function() {
            var G__24108 = buffer;
            G__24108.append(nch);
            return G__24108;
          }();
          var G__24111 = cljs.reader.read_char.call(null, reader);
          buffer = G__24110;
          ch = G__24111;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__24112 = function() {
            var G__24109 = buffer;
            G__24109.append(ch);
            return G__24109;
          }();
          var G__24113 = cljs.reader.read_char.call(null, reader);
          buffer = G__24112;
          ch = G__24113;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4213__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4213__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4213__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__24115 = o;
    if (G__24115) {
      var bit__4906__auto__ = G__24115.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4906__auto__ || G__24115.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__24115.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__24115);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__24115);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__24116 = reader;
        var G__24117 = eof_is_error;
        var G__24118 = sentinel;
        var G__24119 = is_recursive;
        reader = G__24116;
        eof_is_error = G__24117;
        sentinel = G__24118;
        is_recursive = G__24119;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__24120 = cljs.reader.read_comment.call(null, reader, ch);
          var G__24121 = eof_is_error;
          var G__24122 = sentinel;
          var G__24123 = is_recursive;
          reader = G__24120;
          eof_is_error = G__24121;
          sentinel = G__24122;
          is_recursive = G__24123;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__24124 = reader;
            var G__24125 = eof_is_error;
            var G__24126 = sentinel;
            var G__24127 = is_recursive;
            reader = G__24124;
            eof_is_error = G__24125;
            sentinel = G__24126;
            is_recursive = G__24127;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__24128 = b.append("0");
          b = G__24128;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__24130 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__24130, 0, null);
  var years = cljs.core.nth.call(null, vec__24130, 1, null);
  var months = cljs.core.nth.call(null, vec__24130, 2, null);
  var days = cljs.core.nth.call(null, vec__24130, 3, null);
  var hours = cljs.core.nth.call(null, vec__24130, 4, null);
  var minutes = cljs.core.nth.call(null, vec__24130, 5, null);
  var seconds = cljs.core.nth.call(null, vec__24130, 6, null);
  var fraction = cljs.core.nth.call(null, vec__24130, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__24130, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__24130, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__24130, 10, null);
  var v = vec__24130;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4225__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4225__auto__)) {
        return or__4225__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__24132 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__24132, 0, null);
    var months = cljs.core.nth.call(null, vec__24132, 1, null);
    var days = cljs.core.nth.call(null, vec__24132, 2, null);
    var hours = cljs.core.nth.call(null, vec__24132, 3, null);
    var minutes = cljs.core.nth.call(null, vec__24132, 4, null);
    var seconds = cljs.core.nth.call(null, vec__24132, 5, null);
    var ms = cljs.core.nth.call(null, vec__24132, 6, null);
    var offset = cljs.core.nth.call(null, vec__24132, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__24145_24157 = cljs.core.seq.call(null, form);
    var chunk__24146_24158 = null;
    var count__24147_24159 = 0;
    var i__24148_24160 = 0;
    while (true) {
      if (i__24148_24160 < count__24147_24159) {
        var x_24161 = cljs.core._nth.call(null, chunk__24146_24158, i__24148_24160);
        arr.push(x_24161);
        var G__24162 = seq__24145_24157;
        var G__24163 = chunk__24146_24158;
        var G__24164 = count__24147_24159;
        var G__24165 = i__24148_24160 + 1;
        seq__24145_24157 = G__24162;
        chunk__24146_24158 = G__24163;
        count__24147_24159 = G__24164;
        i__24148_24160 = G__24165;
        continue;
      } else {
        var temp__4126__auto___24166 = cljs.core.seq.call(null, seq__24145_24157);
        if (temp__4126__auto___24166) {
          var seq__24145_24167__$1 = temp__4126__auto___24166;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__24145_24167__$1)) {
            var c__5012__auto___24168 = cljs.core.chunk_first.call(null, seq__24145_24167__$1);
            var G__24169 = cljs.core.chunk_rest.call(null, seq__24145_24167__$1);
            var G__24170 = c__5012__auto___24168;
            var G__24171 = cljs.core.count.call(null, c__5012__auto___24168);
            var G__24172 = 0;
            seq__24145_24157 = G__24169;
            chunk__24146_24158 = G__24170;
            count__24147_24159 = G__24171;
            i__24148_24160 = G__24172;
            continue;
          } else {
            var x_24173 = cljs.core.first.call(null, seq__24145_24167__$1);
            arr.push(x_24173);
            var G__24174 = cljs.core.next.call(null, seq__24145_24167__$1);
            var G__24175 = null;
            var G__24176 = 0;
            var G__24177 = 0;
            seq__24145_24157 = G__24174;
            chunk__24146_24158 = G__24175;
            count__24147_24159 = G__24176;
            i__24148_24160 = G__24177;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj24150 = {};
        return obj24150;
      }();
      var seq__24151_24178 = cljs.core.seq.call(null, form);
      var chunk__24152_24179 = null;
      var count__24153_24180 = 0;
      var i__24154_24181 = 0;
      while (true) {
        if (i__24154_24181 < count__24153_24180) {
          var vec__24155_24182 = cljs.core._nth.call(null, chunk__24152_24179, i__24154_24181);
          var k_24183 = cljs.core.nth.call(null, vec__24155_24182, 0, null);
          var v_24184 = cljs.core.nth.call(null, vec__24155_24182, 1, null);
          obj[cljs.core.name.call(null, k_24183)] = v_24184;
          var G__24185 = seq__24151_24178;
          var G__24186 = chunk__24152_24179;
          var G__24187 = count__24153_24180;
          var G__24188 = i__24154_24181 + 1;
          seq__24151_24178 = G__24185;
          chunk__24152_24179 = G__24186;
          count__24153_24180 = G__24187;
          i__24154_24181 = G__24188;
          continue;
        } else {
          var temp__4126__auto___24189 = cljs.core.seq.call(null, seq__24151_24178);
          if (temp__4126__auto___24189) {
            var seq__24151_24190__$1 = temp__4126__auto___24189;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__24151_24190__$1)) {
              var c__5012__auto___24191 = cljs.core.chunk_first.call(null, seq__24151_24190__$1);
              var G__24192 = cljs.core.chunk_rest.call(null, seq__24151_24190__$1);
              var G__24193 = c__5012__auto___24191;
              var G__24194 = cljs.core.count.call(null, c__5012__auto___24191);
              var G__24195 = 0;
              seq__24151_24178 = G__24192;
              chunk__24152_24179 = G__24193;
              count__24153_24180 = G__24194;
              i__24154_24181 = G__24195;
              continue;
            } else {
              var vec__24156_24196 = cljs.core.first.call(null, seq__24151_24190__$1);
              var k_24197 = cljs.core.nth.call(null, vec__24156_24196, 0, null);
              var v_24198 = cljs.core.nth.call(null, vec__24156_24196, 1, null);
              obj[cljs.core.name.call(null, k_24197)] = v_24198;
              var G__24199 = cljs.core.next.call(null, seq__24151_24190__$1);
              var G__24200 = null;
              var G__24201 = 0;
              var G__24202 = 0;
              seq__24151_24178 = G__24199;
              chunk__24152_24179 = G__24200;
              count__24153_24180 = G__24201;
              i__24154_24181 = G__24202;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("prone.ui.run");
goog.require("cljs.core");
goog.require("prone.ui.main");
goog.require("cljs.reader");
prone.ui.main.bootstrap_BANG_.call(null, cljs.reader.read_string.call(null, prone.ui.main.unescape_script_tags.call(null, document.getElementById("prone-data").innerHTML)));
